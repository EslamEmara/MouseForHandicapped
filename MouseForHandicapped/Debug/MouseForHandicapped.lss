
MouseForHandicapped.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001938  000019cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  0080006a  0080006a  000019d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038b0  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001397  00000000  00000000  00005648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002456  00000000  00000000  000069df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00008e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012aa  00000000  00000000  00009598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000200c  00000000  00000000  0000a842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c84e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	4f 02       	muls	r20, r31
      56:	52 02       	muls	r21, r18
      58:	49 02       	muls	r20, r25
      5a:	4c 02       	muls	r20, r28
      5c:	55 02       	muls	r21, r21
      5e:	58 02       	muls	r21, r24
      60:	5b 02       	muls	r21, r27
      62:	07 63       	ori	r16, 0x37	; 55
      64:	42 36       	cpi	r20, 0x62	; 98
      66:	b7 9b       	sbis	0x16, 7	; 22
      68:	d8 a7       	std	Y+40, r29	; 0x28
      6a:	1a 39       	cpi	r17, 0x9A	; 154
      6c:	68 56       	subi	r22, 0x68	; 104
      6e:	18 ae       	std	Y+56, r1	; 0x38
      70:	ba ab       	std	Y+50, r27	; 0x32
      72:	55 8c       	ldd	r5, Z+29	; 0x1d
      74:	1d 3c       	cpi	r17, 0xCD	; 205
      76:	b7 cc       	rjmp	.-1682   	; 0xfffff9e6 <__eeprom_end+0xff7ef9e6>
      78:	57 63       	ori	r21, 0x37	; 55
      7a:	bd 6d       	ori	r27, 0xDD	; 221
      7c:	ed fd       	.word	0xfded	; ????
      7e:	75 3e       	cpi	r23, 0xE5	; 229
      80:	f6 17       	cp	r31, r22
      82:	72 31       	cpi	r23, 0x12	; 18
      84:	bf 00       	.word	0x00bf	; ????
      86:	00 00       	nop
      88:	80 3f       	cpi	r24, 0xF0	; 240
      8a:	08 00       	.word	0x0008	; ????
      8c:	00 00       	nop
      8e:	be 92       	st	-X, r11
      90:	24 49       	sbci	r18, 0x94	; 148
      92:	12 3e       	cpi	r17, 0xE2	; 226
      94:	ab aa       	std	Y+51, r10	; 0x33
      96:	aa 2a       	or	r10, r26
      98:	be cd       	rjmp	.-1156   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
      9a:	cc cc       	rjmp	.-1640   	; 0xfffffa34 <__eeprom_end+0xff7efa34>
      9c:	4c 3e       	cpi	r20, 0xEC	; 236
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	be ab       	std	Y+54, r27	; 0x36
      a4:	aa aa       	std	Y+50, r10	; 0x32
      a6:	aa 3e       	cpi	r26, 0xEA	; 234
      a8:	00 00       	nop
      aa:	00 00       	nop
      ac:	bf 00       	.word	0x00bf	; ????
      ae:	00 00       	nop
      b0:	80 3f       	cpi	r24, 0xF0	; 240
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	41 78       	andi	r20, 0x81	; 129
      ba:	d3 bb       	out	0x13, r29	; 19
      bc:	43 87       	std	Z+11, r20	; 0x0b
      be:	d1 13       	cpse	r29, r17
      c0:	3d 19       	sub	r19, r13
      c2:	0e 3c       	cpi	r16, 0xCE	; 206
      c4:	c3 bd       	out	0x23, r28	; 35
      c6:	42 82       	std	Z+2, r4	; 0x02
      c8:	ad 2b       	or	r26, r29
      ca:	3e 68       	ori	r19, 0x8E	; 142
      cc:	ec 82       	std	Y+4, r14	; 0x04
      ce:	76 be       	out	0x36, r7	; 54
      d0:	d9 8f       	std	Y+25, r29	; 0x19
      d2:	e1 a9       	ldd	r30, Z+49	; 0x31
      d4:	3e 4c       	sbci	r19, 0xCE	; 206
      d6:	80 ef       	ldi	r24, 0xF0	; 240
      d8:	ff be       	out	0x3f, r15	; 63
      da:	01 c4       	rjmp	.+2050   	; 0x8de <__stack+0x7f>
      dc:	ff 7f       	andi	r31, 0xFF	; 255
      de:	3f 00       	.word	0x003f	; ????
      e0:	00 00       	nop
	...

000000e4 <__trampolines_end>:
      e4:	05 01       	movw	r0, r10
      e6:	09 02       	muls	r16, r25
      e8:	a1 01       	movw	r20, r2
      ea:	09 01       	movw	r0, r18
      ec:	a1 00       	.word	0x00a1	; ????
      ee:	05 09       	sbc	r16, r5
      f0:	19 01       	movw	r2, r18
      f2:	29 03       	fmul	r18, r17
      f4:	15 00       	.word	0x0015	; ????
      f6:	25 01       	movw	r4, r10
      f8:	95 03       	fmuls	r17, r21
      fa:	75 01       	movw	r14, r10
      fc:	81 02       	muls	r24, r17
      fe:	95 01       	movw	r18, r10
     100:	75 05       	cpc	r23, r5
     102:	81 03       	fmuls	r16, r17
     104:	05 01       	movw	r0, r10
     106:	09 30       	cpi	r16, 0x09	; 9
     108:	09 31       	cpi	r16, 0x19	; 25
     10a:	09 38       	cpi	r16, 0x89	; 137
     10c:	15 81       	ldd	r17, Z+5	; 0x05
     10e:	25 7f       	andi	r18, 0xF5	; 245
     110:	75 08       	sbc	r7, r5
     112:	95 03       	fmuls	r17, r21
     114:	81 06       	cpc	r8, r17
     116:	c0 c0       	rjmp	.+384    	; 0x298 <rxbit2+0x2>

00000118 <usbDescriptorConfiguration>:
     118:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
     128:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
     138:	00 64                                               .d

0000013a <usbDescriptorDevice>:
     13a:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
     14a:	00 01                                               ..

0000014c <usbDescriptorStringDevice>:
     14c:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

00000158 <usbDescriptorStringVendor>:
     158:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
     168:	74 00                                               t.

0000016a <usbDescriptorString0>:
     16a:	04 03 09 04                                         ....

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf e5       	ldi	r28, 0x5F	; 95
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	a0 e6       	ldi	r26, 0x60	; 96
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e8 e3       	ldi	r30, 0x38	; 56
     182:	f9 e1       	ldi	r31, 0x19	; 25
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	aa 36       	cpi	r26, 0x6A	; 106
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	aa e6       	ldi	r26, 0x6A	; 106
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a4 3b       	cpi	r26, 0xB4	; 180
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 65 05 	call	0xaca	; 0xaca <main>
     1a4:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     1ac:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     1ae:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     1b0:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     1b4:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     1b6:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     1b8:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     1ba:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <usbCrcLoopEntry>

000001be <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     1be:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     1c0:	82 27       	eor	r24, r18

000001c2 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     1c2:	97 95       	ror	r25
    ror     resCrcL
     1c4:	87 95       	ror	r24
    brcs    usbCrcNoXor
     1c6:	10 f0       	brcs	.+4      	; 0x1cc <usbCrcNoXor>
    eor     resCrcL, polyL
     1c8:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     1ca:	95 27       	eor	r25, r21

000001cc <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     1cc:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     1ce:	c8 f3       	brcs	.-14     	; 0x1c2 <usbCrcBitLoop>

000001d0 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     1d0:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     1d2:	a8 f3       	brcs	.-22     	; 0x1be <usbCrcByteLoop>

000001d4 <usbCrcReady>:
usbCrcReady:
    ret
     1d4:	08 95       	ret

000001d6 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     1d6:	ea df       	rcall	.-44     	; 0x1ac <usbCrc16>
    st      ptr+, resCrcL
     1d8:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     1da:	9d 93       	st	X+, r25
    ret
     1dc:	08 95       	ret

000001de <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     1de:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     1e0:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     1e2:	cf 93       	push	r28

000001e4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     1e4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     1e6:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
     1e8:	e9 f7       	brne	.-6      	; 0x1e4 <waitForJ>

000001ea <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     1ea:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1ee:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1f2:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1f6:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1fa:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     1fe:	a3 c0       	rjmp	.+326    	; 0x346 <sofError>

00000200 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     200:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     202:	c0 91 97 00 	lds	r28, 0x0097	; 0x800097 <usbInputBufOffset>
    clr     YH                  ;1 [5]
     206:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     208:	c2 56       	subi	r28, 0x62	; 98
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     20a:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     20c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
     20e:	02 c0       	rjmp	.+4      	; 0x214 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
     210:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
     212:	eb cf       	rjmp	.-42     	; 0x1ea <waitForK>

00000214 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     214:	2f 93       	push	r18
    push    x1              ;2 [12]
     216:	0f 93       	push	r16
    push    x2              ;2 [14]
     218:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     21a:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
     21c:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     21e:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
     220:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     222:	4f 93       	push	r20
    push    cnt             ;2 [24]
     224:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     226:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
     228:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     22a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     22c:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
     22e:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     230:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     232:	31 c0       	rjmp	.+98     	; 0x296 <rxbit2>

00000234 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     234:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     236:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     238:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
     23a:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     23c:	28 c0       	rjmp	.+80     	; 0x28e <didUnstuff0>

0000023e <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     23e:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     240:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     242:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     244:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     246:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
     248:	29 c0       	rjmp	.+82     	; 0x29c <didUnstuff1>

0000024a <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     24a:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     24c:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     24e:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     250:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     252:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
     254:	2b c0       	rjmp	.+86     	; 0x2ac <didUnstuff2>

00000256 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     256:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
     258:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     25a:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     25c:	2a c0       	rjmp	.+84     	; 0x2b2 <didUnstuff3>

0000025e <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     25e:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     260:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
     262:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     264:	2c c0       	rjmp	.+88     	; 0x2be <didUnstuff4>

00000266 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     266:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     268:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
     26a:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     26c:	2f c0       	rjmp	.+94     	; 0x2cc <didUnstuff5>

0000026e <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     26e:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     270:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
     272:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     274:	32 c0       	rjmp	.+100    	; 0x2da <didUnstuff6>

00000276 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     276:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     278:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
     27a:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     27c:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     27e:	00 00       	nop
    eor     x2, x1      ;1 [6]
     280:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     282:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
     284:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     286:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
     288:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
     28a:	c9 f1       	breq	.+114    	; 0x2fe <se0>
    andi    shift, 0xf9 ;1 [12]
     28c:	29 7f       	andi	r18, 0xF9	; 249

0000028e <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     28e:	91 f2       	breq	.-92     	; 0x234 <unstuff0>
    eor     x1, x2      ;1 [14]
     290:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     292:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
     294:	21 f9       	bld	r18, 1

00000296 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     296:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
     298:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     29a:	89 f2       	breq	.-94     	; 0x23e <unstuff1>

0000029c <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     29c:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     29e:	58 f1       	brcs	.+86     	; 0x2f6 <overflow>
    eor     x2, x1      ;1 [22]
     2a0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     2a2:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
     2a4:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     2a6:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
     2a8:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     2aa:	79 f2       	breq	.-98     	; 0x24a <unstuff2>

000002ac <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     2ac:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     2ae:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
     2b0:	23 f9       	bld	r18, 3

000002b2 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     2b2:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     2b4:	81 f2       	breq	.-96     	; 0x256 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     2b6:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
     2b8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     2ba:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
     2bc:	24 f9       	bld	r18, 4

000002be <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     2be:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     2c0:	71 f2       	breq	.-100    	; 0x25e <unstuff4>
    nop2                ;2 [40]
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     2c4:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
     2c6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     2c8:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
     2ca:	25 f9       	bld	r18, 5

000002cc <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     2cc:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     2ce:	59 f2       	breq	.-106    	; 0x266 <unstuff5>
    nop2                ;2 [48]
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     2d2:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
     2d4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     2d6:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
     2d8:	26 f9       	bld	r18, 6

000002da <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     2da:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     2dc:	40 f2       	brcs	.-112    	; 0x26e <unstuff6>
    nop2                ;2 [56]
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     2e0:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
     2e2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     2e4:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
     2e6:	27 f9       	bld	r18, 7

000002e8 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     2e8:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     2ea:	28 f6       	brcc	.-118    	; 0x276 <rxLoop>

000002ec <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     2ec:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     2ee:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     2f0:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
     2f2:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     2f4:	f9 cf       	rjmp	.-14     	; 0x2e8 <didUnstuff7>

000002f6 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     2f6:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     2f8:	1a bf       	out	0x3a, r17	; 58

000002fa <ignorePacket>:
ignorePacket:
    clr     token
     2fa:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     2fc:	19 c0       	rjmp	.+50     	; 0x330 <handleSetupOrOut>

000002fe <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     2fe:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     300:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     302:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     304:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     306:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     308:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     30a:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     30c:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     30e:	f9 f0       	breq	.+62     	; 0x34e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     310:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     312:	e9 f0       	breq	.+58     	; 0x34e <handleData>
    lds     shift, usbDeviceAddr;[17]
     314:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     318:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     31a:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     31c:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     31e:	ed cf       	rjmp	.-38     	; 0x2fa <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     320:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     322:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     324:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     326:	41 f1       	breq	.+80     	; 0x378 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     328:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     32a:	11 f0       	breq	.+4      	; 0x330 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     32c:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     32e:	29 f7       	brne	.-54     	; 0x2fa <ignorePacket>

00000330 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     330:	00 93 9c 00 	sts	0x009C, r16	; 0x80009c <usbCurrentTok>

00000334 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     334:	3f 91       	pop	r19
     336:	4f 91       	pop	r20
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	2f 91       	pop	r18
     33e:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
     340:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     342:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     344:	4f cf       	rjmp	.-354    	; 0x1e4 <waitForJ>

00000346 <sofError>:
sofError:
    POP_RETI                    ;macro call
     346:	cf 91       	pop	r28
     348:	cf bf       	out	0x3f, r28	; 63
     34a:	cf 91       	pop	r28
    reti
     34c:	18 95       	reti

0000034e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     34e:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <usbCurrentTok>
    tst     shift               ;[20]
     352:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     354:	79 f3       	breq	.-34     	; 0x334 <doReturn>
    lds     x2, usbRxLen        ;[22]
     356:	10 91 9a 00 	lds	r17, 0x009A	; 0x80009a <usbRxLen>
    tst     x2                  ;[24]
     35a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     35c:	69 f5       	brne	.+90     	; 0x3b8 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     35e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     360:	6a f1       	brmi	.+90     	; 0x3bc <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     362:	30 93 9a 00 	sts	0x009A, r19	; 0x80009a <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     366:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     36a:	10 91 97 00 	lds	r17, 0x0097	; 0x800097 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     36e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     370:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     372:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     376:	22 c0       	rjmp	.+68     	; 0x3bc <sendAckAndReti>

00000378 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     378:	00 91 9a 00 	lds	r16, 0x009A	; 0x80009a <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     37c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     37e:	e4 f4       	brge	.+56     	; 0x3b8 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     380:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     382:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     384:	49 f4       	brne	.+18     	; 0x398 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     386:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     38a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     38c:	19 c0       	rjmp	.+50     	; 0x3c0 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     38e:	00 93 69 00 	sts	0x0069, r16	; 0x800069 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     392:	ce e7       	ldi	r28, 0x7E	; 126
    ldi     YH, hi8(usbTxBuf)   ;[44]
     394:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <usbSendAndReti>

00000398 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     398:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     39c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     39e:	10 c0       	rjmp	.+32     	; 0x3c0 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     3a0:	00 93 89 00 	sts	0x0089, r16	; 0x800089 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     3a4:	ca e8       	ldi	r28, 0x8A	; 138
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <usbSendAndReti>

000003aa <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
     3aa:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
     3ac:	a8 f4       	brcc	.+42     	; 0x3d8 <doExorN1>
    subi    x4, 1               ;[-3]
     3ae:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
     3b0:	a9 f4       	brne	.+42     	; 0x3dc <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
     3b2:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
     3b4:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <stuffN1Delay>

000003b8 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     3b8:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <usbSendX3>

000003bc <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     3bc:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <usbSendX3>

000003c0 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     3c0:	43 2f       	mov	r20, r19

000003c2 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     3c2:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     3c6:	32 e0       	ldi	r19, 0x02	; 2

000003c8 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
     3c8:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
     3ca:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     3cc:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
     3ce:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
     3d0:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
     3d2:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
     3d4:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
     3d6:	5f 93       	push	r21

000003d8 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
     3d8:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
     3da:	56 e0       	ldi	r21, 0x06	; 6

000003dc <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
     3dc:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
     3de:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
     3e0:	20 f4       	brcc	.+8      	; 0x3ea <doExorN2>
    subi    x4, 1               ;[03]
     3e2:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
     3e4:	21 f4       	brne	.+8      	; 0x3ee <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
     3e6:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
     3e8:	f9 cf       	rjmp	.-14     	; 0x3dc <commonN1>

000003ea <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
     3ea:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
     3ec:	56 e0       	ldi	r21, 0x06	; 6

000003ee <commonN2>:
commonN2:
    nop                         ;[06] [14]
     3ee:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
     3f0:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
     3f2:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
     3f4:	d0 f2       	brcs	.-76     	; 0x3aa <stuffN1Delay>

000003f6 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
     3f6:	27 95       	ror	r18
    brcc    doExor6             ;[43]
     3f8:	28 f4       	brcc	.+10     	; 0x404 <doExor6>
    subi    x4, 1               ;[44]
     3fa:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
     3fc:	29 f4       	brne	.+10     	; 0x408 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
     3fe:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
     400:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
     402:	f9 cf       	rjmp	.-14     	; 0x3f6 <stuff6Delay>

00000404 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
     404:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
     406:	56 e0       	ldi	r21, 0x06	; 6

00000408 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
     408:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
     40a:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
     40c:	20 f4       	brcc	.+8      	; 0x416 <doExor7>
    subi    x4, 1               ;[50]
     40e:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
     410:	21 f4       	brne	.+8      	; 0x41a <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
     412:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
     414:	f9 cf       	rjmp	.-14     	; 0x408 <common6>

00000416 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
     416:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
     418:	56 e0       	ldi	r21, 0x06	; 6

0000041a <common7>:
common7:
    ld      shift, y+           ;[53]
     41a:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
     41c:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
     41e:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
     420:	21 f6       	brne	.-120    	; 0x3aa <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     422:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
     424:	10 91 9b 00 	lds	r17, 0x009B	; 0x80009b <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
     428:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
     42a:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
     42c:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     42e:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
     430:	11 f0       	breq	.+4      	; 0x436 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
     432:	10 93 95 00 	sts	0x0095, r17	; 0x800095 <usbDeviceAddr>

00000436 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
     436:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
     438:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
     43a:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
     43c:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
     43e:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
     440:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
     442:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
     444:	5f 91       	pop	r21
    nop2                        ;[12]
     446:	00 c0       	rjmp	.+0      	; 0x448 <skipAddrAssign+0x12>
    nop2                        ;[14]
     448:	00 c0       	rjmp	.+0      	; 0x44a <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
     44a:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
     44c:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
     44e:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
     450:	71 cf       	rjmp	.-286    	; 0x334 <doReturn>

00000452 <App_Init>:
	if( sensor_S>LOW_CALIBRATED && sensor_G>LOW_CALIBRATED && sensor_A>LOW_CALIBRATED && sensor_M>LOW_CALIBRATED )
	{
		return CALIBRATED;
	}
	return NOT_CALIBRATED;
}
     452:	8b b3       	in	r24, 0x1b	; 27
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	0e 94 bb 04 	call	0x976	; 0x976 <LED_Init>
     45a:	8b b3       	in	r24, 0x1b	; 27
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_TurnOn>
     462:	8b b3       	in	r24, 0x1b	; 27
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	0e 94 bb 04 	call	0x976	; 0x976 <LED_Init>
     46a:	0e 94 2d 04 	call	0x85a	; 0x85a <BNO055_Init>
     46e:	0e 94 27 05 	call	0xa4e	; 0xa4e <Mouse_init>
     472:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TouchSensor_config>
     476:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TouchSensor_config+0x1>
     47a:	0e 94 5c 05 	call	0xab8	; 0xab8 <Touch_Init>
     47e:	08 95       	ret

00000480 <App_OrderMouse>:
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	87 30       	cpi	r24, 0x07	; 7
     484:	91 05       	cpc	r25, r1
     486:	f8 f4       	brcc	.+62     	; 0x4c6 <App_OrderMouse+0x46>
     488:	fc 01       	movw	r30, r24
     48a:	e6 5d       	subi	r30, 0xD6	; 214
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__tablejump2__>
     492:	0e 94 44 05 	call	0xa88	; 0xa88 <Mouse_MoveLeft>
     496:	08 95       	ret
     498:	0e 94 48 05 	call	0xa90	; 0xa90 <Mouse_MoveRight>
     49c:	08 95       	ret
     49e:	0e 94 4c 05 	call	0xa98	; 0xa98 <Mouse_MoveUp>
     4a2:	08 95       	ret
     4a4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Mouse_MoveDown>
     4a8:	08 95       	ret
     4aa:	0e 94 58 05 	call	0xab0	; 0xab0 <Mouse_LeftClick>
     4ae:	08 95       	ret
     4b0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Mouse_RightClick>
     4b4:	08 95       	ret
     4b6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Mouse_RightClick>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 87 04 	call	0x90e	; 0x90e <Delay_ms_independent>
     4c2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Mouse_RightClick>
     4c6:	08 95       	ret

000004c8 <App_GetTouchSensorState>:
     4c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TouchSensor_config>
     4cc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TouchSensor_config+0x1>
     4d0:	0e 94 61 05 	call	0xac2	; 0xac2 <Touch_Read>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	51 f4       	brne	.+20     	; 0x4ec <App_GetTouchSensorState+0x24>
     4d8:	8b b3       	in	r24, 0x1b	; 27
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_TurnOn>
     4e0:	8b b3       	in	r24, 0x1b	; 27
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 c2 04 	call	0x984	; 0x984 <LED_TurnOff>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	08 95       	ret
     4ec:	8b b3       	in	r24, 0x1b	; 27
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 c2 04 	call	0x984	; 0x984 <LED_TurnOff>
     4f4:	8b b3       	in	r24, 0x1b	; 27
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_TurnOn>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	08 95       	ret

00000500 <App_GetImuCalibPoint>:
     500:	83 e7       	ldi	r24, 0x73	; 115
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <BNO055_ReadEulerAngles>
     508:	08 95       	ret

0000050a <App_GetLargestAngle>:
 * return: index of the largest value (1 or 2 or 3) -> u8_t
 * Ex: index = App_GetLargestAngle(54,21,100); -> index=3
 */
u8_t App_GetLargestAngle(s16_t value1,s16_t value2,s16_t value3)
{ // yaw roll pitch
	value1 = abs(value1);
     50a:	9c 01       	movw	r18, r24
     50c:	99 23       	and	r25, r25
     50e:	24 f4       	brge	.+8      	; 0x518 <App_GetLargestAngle+0xe>
     510:	22 27       	eor	r18, r18
     512:	33 27       	eor	r19, r19
     514:	28 1b       	sub	r18, r24
     516:	39 0b       	sbc	r19, r25
	value2 = abs(value2);
     518:	cb 01       	movw	r24, r22
     51a:	99 23       	and	r25, r25
     51c:	24 f4       	brge	.+8      	; 0x526 <App_GetLargestAngle+0x1c>
     51e:	88 27       	eor	r24, r24
     520:	99 27       	eor	r25, r25
     522:	86 1b       	sub	r24, r22
     524:	97 0b       	sbc	r25, r23
	value3 = abs(value3);
     526:	ba 01       	movw	r22, r20
     528:	55 23       	and	r21, r21
     52a:	24 f4       	brge	.+8      	; 0x534 <App_GetLargestAngle+0x2a>
     52c:	66 27       	eor	r22, r22
     52e:	77 27       	eor	r23, r23
     530:	64 1b       	sub	r22, r20
     532:	75 0b       	sbc	r23, r21
	if(value1 > value2)
     534:	82 17       	cp	r24, r18
     536:	93 07       	cpc	r25, r19
     538:	2c f4       	brge	.+10     	; 0x544 <App_GetLargestAngle+0x3a>
	{
		if(value1 > value3)		{ return 1; }
     53a:	62 17       	cp	r22, r18
     53c:	73 07       	cpc	r23, r19
     53e:	3c f4       	brge	.+14     	; 0x54e <App_GetLargestAngle+0x44>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret
		else 					{ return 3; }
	}
	else
	{
		if(value2 > value3)		{ return 2; }
     544:	68 17       	cp	r22, r24
     546:	79 07       	cpc	r23, r25
     548:	24 f4       	brge	.+8      	; 0x552 <App_GetLargestAngle+0x48>
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	08 95       	ret
	value2 = abs(value2);
	value3 = abs(value3);
	if(value1 > value2)
	{
		if(value1 > value3)		{ return 1; }
		else 					{ return 3; }
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	08 95       	ret
	}
	else
	{
		if(value2 > value3)		{ return 2; }
		else 					{ return 3; }
     552:	83 e0       	ldi	r24, 0x03	; 3
	}
     554:	08 95       	ret

00000556 <App_GetImuGradient>:
 * Args: None
 * Return: u8_t gradient_Direction -> (LEFT, RIGHT, UP, DOWN)
 * Ex: u8_t direction = App_GetImuGradient();
 */				
u8_t App_GetImuGradient(void)
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	00 d0       	rcall	.+0      	; 0x55c <App_GetImuGradient+0x6>
     55c:	00 d0       	rcall	.+0      	; 0x55e <App_GetImuGradient+0x8>
     55e:	00 d0       	rcall	.+0      	; 0x560 <App_GetImuGradient+0xa>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
	static u16_t period = 1000; // to control cursor speed with
	
	// define cursor speed
	Delay_ms_independent(period);
     564:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     568:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     56c:	0e 94 87 04 	call	0x90e	; 0x90e <Delay_ms_independent>
	s16_t absolute_gradient[3]; // current_reading - reference_point
	//-- get current imu reading
	BNO055_ReadEulerAngles(current_reading);
     570:	8d e6       	ldi	r24, 0x6D	; 109
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <BNO055_ReadEulerAngles>
	//-- compare this reading to calibration point to know imu (head) gradient
	absolute_gradient[0] = current_reading[0] - reference_angles[0]; // YAW
     578:	ad e6       	ldi	r26, 0x6D	; 109
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	8d 91       	ld	r24, X+
     57e:	9c 91       	ld	r25, X
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	e3 e7       	ldi	r30, 0x73	; 115
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	20 81       	ld	r18, Z
     588:	31 81       	ldd	r19, Z+1	; 0x01
     58a:	82 1b       	sub	r24, r18
     58c:	93 0b       	sbc	r25, r19
     58e:	9a 83       	std	Y+2, r25	; 0x02
     590:	89 83       	std	Y+1, r24	; 0x01
	absolute_gradient[1] = current_reading[1] - reference_angles[1]; // ROLL
     592:	12 96       	adiw	r26, 0x02	; 2
     594:	6d 91       	ld	r22, X+
     596:	7c 91       	ld	r23, X
     598:	13 97       	sbiw	r26, 0x03	; 3
     59a:	22 81       	ldd	r18, Z+2	; 0x02
     59c:	33 81       	ldd	r19, Z+3	; 0x03
     59e:	62 1b       	sub	r22, r18
     5a0:	73 0b       	sbc	r23, r19
     5a2:	7c 83       	std	Y+4, r23	; 0x04
     5a4:	6b 83       	std	Y+3, r22	; 0x03
	absolute_gradient[2] = current_reading[2] - reference_angles[2]; // PITCH
     5a6:	14 96       	adiw	r26, 0x04	; 4
     5a8:	4d 91       	ld	r20, X+
     5aa:	5c 91       	ld	r21, X
     5ac:	15 97       	sbiw	r26, 0x05	; 5
     5ae:	24 81       	ldd	r18, Z+4	; 0x04
     5b0:	35 81       	ldd	r19, Z+5	; 0x05
     5b2:	42 1b       	sub	r20, r18
     5b4:	53 0b       	sbc	r21, r19
     5b6:	5e 83       	std	Y+6, r21	; 0x06
     5b8:	4d 83       	std	Y+5, r20	; 0x05
	//-- decide depending on calculations to which direction mouse should move
	// get the largest angle of them (sign isn't considered)
	u8_t angle_name = App_GetLargestAngle(absolute_gradient[0],absolute_gradient[1],absolute_gradient[2]);
     5ba:	0e 94 85 02 	call	0x50a	; 0x50a <App_GetLargestAngle>
	
	// change period to set cursor speed 
	switch (absolute_gradient[angle_name-1])
     5be:	48 2f       	mov	r20, r24
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	fa 01       	movw	r30, r20
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	2c 0f       	add	r18, r28
     5d0:	3d 1f       	adc	r19, r29
     5d2:	e2 0f       	add	r30, r18
     5d4:	f3 1f       	adc	r31, r19
     5d6:	20 81       	ld	r18, Z
     5d8:	31 81       	ldd	r19, Z+1	; 0x01
     5da:	2a 30       	cpi	r18, 0x0A	; 10
     5dc:	31 05       	cpc	r19, r1
     5de:	ac f0       	brlt	.+42     	; 0x60a <App_GetImuGradient+0xb4>
     5e0:	25 31       	cpi	r18, 0x15	; 21
     5e2:	31 05       	cpc	r19, r1
     5e4:	24 f0       	brlt	.+8      	; 0x5ee <App_GetImuGradient+0x98>
     5e6:	24 32       	cpi	r18, 0x24	; 36
     5e8:	31 05       	cpc	r19, r1
     5ea:	44 f0       	brlt	.+16     	; 0x5fc <App_GetImuGradient+0xa6>
     5ec:	0e c0       	rjmp	.+28     	; 0x60a <App_GetImuGradient+0xb4>
	{
		// 10 -> threshold
		case 10 ... 20:
			period = 1000;
     5ee:	68 ee       	ldi	r22, 0xE8	; 232
     5f0:	73 e0       	ldi	r23, 0x03	; 3
     5f2:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5f6:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     5fa:	0b c0       	rjmp	.+22     	; 0x612 <App_GetImuGradient+0xbc>
		case 21 ... 35:
			period = 400;
     5fc:	60 e9       	ldi	r22, 0x90	; 144
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     604:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     608:	04 c0       	rjmp	.+8      	; 0x612 <App_GetImuGradient+0xbc>
		default: // larger than 60
			period = 0;
     60a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     60e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
	}
	
	// take action on mouse according to angle
	switch(angle_name)
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	31 f0       	breq	.+12     	; 0x622 <App_GetImuGradient+0xcc>
     616:	83 30       	cpi	r24, 0x03	; 3
     618:	49 f1       	breq	.+82     	; 0x66c <App_GetImuGradient+0x116>
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	09 f0       	breq	.+2      	; 0x620 <App_GetImuGradient+0xca>
     61e:	4b c0       	rjmp	.+150    	; 0x6b6 <App_GetImuGradient+0x160>
     620:	37 c0       	rjmp	.+110    	; 0x690 <App_GetImuGradient+0x13a>
	{
		// head is turned around X-axis
		case ROLL:
			// positive angle > threshold?
			if(absolute_gradient[angle_name-1] >= THRESHOLD_X && RIGHT_CLICK_FLAG)
     622:	2a 30       	cpi	r18, 0x0A	; 10
     624:	31 05       	cpc	r19, r1
     626:	a4 f0       	brlt	.+40     	; 0x650 <App_GetImuGradient+0xfa>
     628:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <RIGHT_CLICK_FLAG>
     62c:	88 23       	and	r24, r24
     62e:	81 f0       	breq	.+32     	; 0x650 <App_GetImuGradient+0xfa>
			{ 
				// disable flag to stop sending this signal multiple times
				RIGHT_CLICK_FLAG = DISABLED;
     630:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <RIGHT_CLICK_FLAG>
				// small angle (<25) -> single right click
				if (absolute_gradient[angle_name] < 25)
     634:	44 0f       	add	r20, r20
     636:	55 1f       	adc	r21, r21
     638:	e1 e0       	ldi	r30, 0x01	; 1
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	ec 0f       	add	r30, r28
     63e:	fd 1f       	adc	r31, r29
     640:	e4 0f       	add	r30, r20
     642:	f5 1f       	adc	r31, r21
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	49 97       	sbiw	r24, 0x19	; 25
     64a:	bc f5       	brge	.+110    	; 0x6ba <App_GetImuGradient+0x164>
				{
					return RIGHT_CLICK;
     64c:	85 e0       	ldi	r24, 0x05	; 5
     64e:	3e c0       	rjmp	.+124    	; 0x6cc <App_GetImuGradient+0x176>
				}
				// larger angle -> double right click
				 return DOUBLE_RIGHT_CLICK;
			}
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[angle_name-1]) >= THRESHOLD_X && LEFT_CLICK_FLAG)
     650:	31 95       	neg	r19
     652:	21 95       	neg	r18
     654:	31 09       	sbc	r19, r1
     656:	2a 30       	cpi	r18, 0x0A	; 10
     658:	31 05       	cpc	r19, r1
     65a:	8c f1       	brlt	.+98     	; 0x6be <App_GetImuGradient+0x168>
     65c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <LEFT_CLICK_FLAG>
     660:	88 23       	and	r24, r24
     662:	79 f1       	breq	.+94     	; 0x6c2 <App_GetImuGradient+0x16c>
			{
				// disable flag to stop sending this signal multiple times
				 LEFT_CLICK_FLAG = DISABLED;
     664:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <LEFT_CLICK_FLAG>
				 return LEFT_CLICK; 
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	30 c0       	rjmp	.+96     	; 0x6cc <App_GetImuGradient+0x176>
			}
			break;
		// head is turned around Y-axis
		case PITCH:
		// enable flags so the signal can be sent again
			if(absolute_gradient[angle_name-1] >= THRESHOLD_Y){ RIGHT_CLICK_FLAG = ENABLED; RIGHT_CLICK_FLAG = ENABLED; return UP; }
     66c:	2a 30       	cpi	r18, 0x0A	; 10
     66e:	31 05       	cpc	r19, r1
     670:	2c f0       	brlt	.+10     	; 0x67c <App_GetImuGradient+0x126>
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <RIGHT_CLICK_FLAG>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	28 c0       	rjmp	.+80     	; 0x6cc <App_GetImuGradient+0x176>
			else if ( (-1*absolute_gradient[angle_name-1]) >= THRESHOLD_Y ){ RIGHT_CLICK_FLAG = ENABLED; RIGHT_CLICK_FLAG = ENABLED; return DOWN; }
     67c:	31 95       	neg	r19
     67e:	21 95       	neg	r18
     680:	31 09       	sbc	r19, r1
     682:	2a 30       	cpi	r18, 0x0A	; 10
     684:	31 05       	cpc	r19, r1
     686:	fc f0       	brlt	.+62     	; 0x6c6 <App_GetImuGradient+0x170>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <RIGHT_CLICK_FLAG>
     68e:	1e c0       	rjmp	.+60     	; 0x6cc <App_GetImuGradient+0x176>
			break;
		// head is turned around Z-axis
		case YAW:
		// enable flags so the signal can be sent again
			if(absolute_gradient[angle_name-1] >= THRESHOLD_Z){RIGHT_CLICK_FLAG = ENABLED; RIGHT_CLICK_FLAG = ENABLED; return RIGHT; }
     690:	2a 30       	cpi	r18, 0x0A	; 10
     692:	31 05       	cpc	r19, r1
     694:	2c f0       	brlt	.+10     	; 0x6a0 <App_GetImuGradient+0x14a>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <RIGHT_CLICK_FLAG>
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	16 c0       	rjmp	.+44     	; 0x6cc <App_GetImuGradient+0x176>
			else if ( (-1*absolute_gradient[angle_name-1]) >= THRESHOLD_Z ){RIGHT_CLICK_FLAG = ENABLED; RIGHT_CLICK_FLAG = ENABLED; return LEFT; }
     6a0:	31 95       	neg	r19
     6a2:	21 95       	neg	r18
     6a4:	31 09       	sbc	r19, r1
     6a6:	2a 30       	cpi	r18, 0x0A	; 10
     6a8:	31 05       	cpc	r19, r1
     6aa:	7c f0       	brlt	.+30     	; 0x6ca <App_GetImuGradient+0x174>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <RIGHT_CLICK_FLAG>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0b c0       	rjmp	.+22     	; 0x6cc <App_GetImuGradient+0x176>
			break;
	}
	//-- no head motion 
	return NOTHING;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	09 c0       	rjmp	.+18     	; 0x6cc <App_GetImuGradient+0x176>
				if (absolute_gradient[angle_name] < 25)
				{
					return RIGHT_CLICK;
				}
				// larger angle -> double right click
				 return DOUBLE_RIGHT_CLICK;
     6ba:	86 e0       	ldi	r24, 0x06	; 6
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <App_GetImuGradient+0x176>
			if(absolute_gradient[angle_name-1] >= THRESHOLD_Z){RIGHT_CLICK_FLAG = ENABLED; RIGHT_CLICK_FLAG = ENABLED; return RIGHT; }
			else if ( (-1*absolute_gradient[angle_name-1]) >= THRESHOLD_Z ){RIGHT_CLICK_FLAG = ENABLED; RIGHT_CLICK_FLAG = ENABLED; return LEFT; }
			break;
	}
	//-- no head motion 
	return NOTHING;
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <App_GetImuGradient+0x176>
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <App_GetImuGradient+0x176>
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <App_GetImuGradient+0x176>
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
}
     6cc:	26 96       	adiw	r28, 0x06	; 6
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <BNO055_WriteByte>:
	  BNO055_SetMagOffsets(bias.MAG_OFFSET);
	  BNO055_SetMagRadius(bias.MAG_RADIUS);
	  BNO055_SetAccRadius(bias.ACCEL_RADIUS);
	  BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, NDOF);
	  
}
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	c8 2f       	mov	r28, r24
     6e6:	16 2f       	mov	r17, r22
     6e8:	d4 2f       	mov	r29, r20
     6ea:	0e 94 64 06 	call	0xcc8	; 0xcc8 <I2C_Master_Start>
     6ee:	81 2f       	mov	r24, r17
     6f0:	0e 94 8c 06 	call	0xd18	; 0xd18 <I2C_Master_Write>
     6f4:	8d 2f       	mov	r24, r29
     6f6:	0e 94 8c 06 	call	0xd18	; 0xd18 <I2C_Master_Write>
     6fa:	8c 2f       	mov	r24, r28
     6fc:	0e 94 a2 06 	call	0xd44	; 0xd44 <I2C_Repeated_Start>
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	08 95       	ret

00000708 <BNO055_ReadByte>:
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	c8 2f       	mov	r28, r24
     70e:	d6 2f       	mov	r29, r22
     710:	0e 94 64 06 	call	0xcc8	; 0xcc8 <I2C_Master_Start>
     714:	8d 2f       	mov	r24, r29
     716:	0e 94 8c 06 	call	0xd18	; 0xd18 <I2C_Master_Write>
     71a:	8c 2f       	mov	r24, r28
     71c:	0e 94 a2 06 	call	0xd44	; 0xd44 <I2C_Repeated_Start>
     720:	0e 94 ca 06 	call	0xd94	; 0xd94 <I2C_Read_Ack>
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <BNO055_ReadBytes>:
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	c8 2f       	mov	r28, r24
     738:	16 2f       	mov	r17, r22
     73a:	d4 2f       	mov	r29, r20
     73c:	79 01       	movw	r14, r18
     73e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <I2C_Master_Start>
     742:	81 2f       	mov	r24, r17
     744:	0e 94 8c 06 	call	0xd18	; 0xd18 <I2C_Master_Write>
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 a2 06 	call	0xd44	; 0xd44 <I2C_Repeated_Start>
     74e:	c0 e0       	ldi	r28, 0x00	; 0
     750:	08 c0       	rjmp	.+16     	; 0x762 <BNO055_ReadBytes+0x38>
     752:	87 01       	movw	r16, r14
     754:	0c 0f       	add	r16, r28
     756:	11 1d       	adc	r17, r1
     758:	0e 94 ca 06 	call	0xd94	; 0xd94 <I2C_Read_Ack>
     75c:	f8 01       	movw	r30, r16
     75e:	80 83       	st	Z, r24
     760:	cf 5f       	subi	r28, 0xFF	; 255
     762:	cd 17       	cp	r28, r29
     764:	b0 f3       	brcs	.-20     	; 0x752 <BNO055_ReadBytes+0x28>
     766:	c7 01       	movw	r24, r14
     768:	8d 0f       	add	r24, r29
     76a:	91 1d       	adc	r25, r1
     76c:	ec 01       	movw	r28, r24
     76e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <I2C_Read_Nack>
     772:	88 83       	st	Y, r24
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	08 95       	ret

00000782 <BNO055_GetCalibStat>:
     782:	cf 93       	push	r28
     784:	c8 2f       	mov	r28, r24
     786:	65 e3       	ldi	r22, 0x35	; 53
     788:	88 e2       	ldi	r24, 0x28	; 40
     78a:	0e 94 84 03 	call	0x708	; 0x708 <BNO055_ReadByte>
     78e:	c1 11       	cpse	r28, r1
     790:	05 c0       	rjmp	.+10     	; 0x79c <BNO055_GetCalibStat+0x1a>
     792:	82 95       	swap	r24
     794:	86 95       	lsr	r24
     796:	86 95       	lsr	r24
     798:	83 70       	andi	r24, 0x03	; 3
     79a:	11 c0       	rjmp	.+34     	; 0x7be <BNO055_GetCalibStat+0x3c>
     79c:	c1 30       	cpi	r28, 0x01	; 1
     79e:	21 f4       	brne	.+8      	; 0x7a8 <BNO055_GetCalibStat+0x26>
     7a0:	80 73       	andi	r24, 0x30	; 48
     7a2:	82 95       	swap	r24
     7a4:	8f 70       	andi	r24, 0x0F	; 15
     7a6:	0b c0       	rjmp	.+22     	; 0x7be <BNO055_GetCalibStat+0x3c>
     7a8:	c2 30       	cpi	r28, 0x02	; 2
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <BNO055_GetCalibStat+0x32>
     7ac:	8c 70       	andi	r24, 0x0C	; 12
     7ae:	86 95       	lsr	r24
     7b0:	86 95       	lsr	r24
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <BNO055_GetCalibStat+0x3c>
     7b4:	c3 30       	cpi	r28, 0x03	; 3
     7b6:	11 f4       	brne	.+4      	; 0x7bc <BNO055_GetCalibStat+0x3a>
     7b8:	83 70       	andi	r24, 0x03	; 3
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <BNO055_GetCalibStat+0x3c>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <BNO055_ReadEulerAngles>:
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <BNO055_ReadEulerAngles+0xa>
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <BNO055_ReadEulerAngles+0xc>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <BNO055_ReadEulerAngles+0xe>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	8c 01       	movw	r16, r24
     7d6:	9e 01       	movw	r18, r28
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	46 e0       	ldi	r20, 0x06	; 6
     7de:	6a e1       	ldi	r22, 0x1A	; 26
     7e0:	88 e2       	ldi	r24, 0x28	; 40
     7e2:	0e 94 95 03 	call	0x72a	; 0x72a <BNO055_ReadBytes>
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	98 2f       	mov	r25, r24
     7ec:	88 27       	eor	r24, r24
     7ee:	29 81       	ldd	r18, Y+1	; 0x01
     7f0:	82 2b       	or	r24, r18
     7f2:	f8 01       	movw	r30, r16
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
     7f8:	8c 81       	ldd	r24, Y+4	; 0x04
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	98 2f       	mov	r25, r24
     7fe:	88 27       	eor	r24, r24
     800:	2b 81       	ldd	r18, Y+3	; 0x03
     802:	82 2b       	or	r24, r18
     804:	93 83       	std	Z+3, r25	; 0x03
     806:	82 83       	std	Z+2, r24	; 0x02
     808:	8e 81       	ldd	r24, Y+6	; 0x06
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	98 2f       	mov	r25, r24
     80e:	88 27       	eor	r24, r24
     810:	2d 81       	ldd	r18, Y+5	; 0x05
     812:	82 2b       	or	r24, r18
     814:	95 83       	std	Z+5, r25	; 0x05
     816:	84 83       	std	Z+4, r24	; 0x04
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <BNO055_SelfTest>:
*Function to Test the sensors see if they fail in hardware or not
*return EN_FAIL_t of the failed sensor (see BNO055.h for definition)
*		return 
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
     82e:	66 e3       	ldi	r22, 0x36	; 54
     830:	88 e2       	ldi	r24, 0x28	; 40
     832:	0e 94 84 03 	call	0x708	; 0x708 <BNO055_ReadByte>
	if(!(selftest & 0x01)) {
     836:	80 ff       	sbrs	r24, 0
     838:	08 c0       	rjmp	.+16     	; 0x84a <BNO055_SelfTest+0x1c>

		return ACCELOMETER_FAIL;                /*acc fails*/
	}
	if(!(selftest & 0x02)) {
     83a:	81 ff       	sbrs	r24, 1
     83c:	08 c0       	rjmp	.+16     	; 0x84e <BNO055_SelfTest+0x20>
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
	}
	if(!(selftest & 0x04)) {
     83e:	82 ff       	sbrs	r24, 2
     840:	08 c0       	rjmp	.+16     	; 0x852 <BNO055_SelfTest+0x24>
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
	}
	if(!(selftest & 0x08)) {
     842:	83 fd       	sbrc	r24, 3
     844:	08 c0       	rjmp	.+16     	; 0x856 <BNO055_SelfTest+0x28>
		return SYSTEM_FAIL;              /*system fails*/
     846:	88 e0       	ldi	r24, 0x08	; 8
     848:	08 95       	ret
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
	if(!(selftest & 0x01)) {

		return ACCELOMETER_FAIL;                /*acc fails*/
     84a:	85 e0       	ldi	r24, 0x05	; 5
     84c:	08 95       	ret
	}
	if(!(selftest & 0x02)) {
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	08 95       	ret
	}
	if(!(selftest & 0x04)) {
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
     852:	87 e0       	ldi	r24, 0x07	; 7
     854:	08 95       	ret
	}
	if(!(selftest & 0x08)) {
		return SYSTEM_FAIL;              /*system fails*/
	}

	return BNO055_SUCCESS;
     856:	89 e0       	ldi	r24, 0x09	; 9
}
     858:	08 95       	ret

0000085a <BNO055_Init>:
*to speed up calibration process you can use GetOffsets and Get Radius functions and SetCalibProfile
*Functions to store calibrated offsets after every boot 
*
*/
EN_FAIL_t BNO055_Init()
{	
     85a:	cf 93       	push	r28
	I2C_Init(OPERATION_FREQ,100000);					/*initialize i2c with frequency 100Khz*/
     85c:	40 ea       	ldi	r20, 0xA0	; 160
     85e:	56 e8       	ldi	r21, 0x86	; 134
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	84 e0       	ldi	r24, 0x04	; 4
     866:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <I2C_Init>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, CONFIGMODE );
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	6d e3       	ldi	r22, 0x3D	; 61
     86e:	88 e2       	ldi	r24, 0x28	; 40
     870:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Select page 1 to configure sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_1);
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	67 e0       	ldi	r22, 0x07	; 7
     878:	88 e2       	ldi	r24, 0x28	; 40
     87a:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Configure ACC
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_ACC_CONFIG, ACC_CONFIGS );
     87e:	48 e0       	ldi	r20, 0x08	; 8
     880:	68 e0       	ldi	r22, 0x08	; 8
     882:	88 e2       	ldi	r24, 0x28	; 40
     884:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Configure GYR
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_0, GYRO_BW_RANGE );
     888:	43 e2       	ldi	r20, 0x23	; 35
     88a:	6a e0       	ldi	r22, 0x0A	; 10
     88c:	88 e2       	ldi	r24, 0x28	; 40
     88e:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_1, GYRO_POWER_MODE);
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	6b e0       	ldi	r22, 0x0B	; 11
     896:	88 e2       	ldi	r24, 0x28	; 40
     898:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Configure MAG
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_MAG_CONFIG, MAG_CONFIGS );
     89c:	4b e0       	ldi	r20, 0x0B	; 11
     89e:	69 e0       	ldi	r22, 0x09	; 9
     8a0:	88 e2       	ldi	r24, 0x28	; 40
     8a2:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Select page 0 to read sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_0);
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	67 e0       	ldi	r22, 0x07	; 7
     8aa:	88 e2       	ldi	r24, 0x28	; 40
     8ac:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Select BNO055 gyro temperature source
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_TEMP_SOURCE, 0x01 );
     8b0:	41 e0       	ldi	r20, 0x01	; 1
     8b2:	60 e4       	ldi	r22, 0x40	; 64
     8b4:	88 e2       	ldi	r24, 0x28	; 40
     8b6:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Select BNO055 sensor units (temperature in degrees C, rate in dps, accel in mg)
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_UNIT_SEL, SYS_UNITS );
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	6b e3       	ldi	r22, 0x3B	; 59
     8be:	88 e2       	ldi	r24, 0x28	; 40
     8c0:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Select BNO055 system power mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PWR_MODE, PWR_MODE );
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	6e e3       	ldi	r22, 0x3E	; 62
     8c8:	88 e2       	ldi	r24, 0x28	; 40
     8ca:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	// Select BNO055 system operation mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, OP_MODE  );
     8ce:	4c e0       	ldi	r20, 0x0C	; 12
     8d0:	6d e3       	ldi	r22, 0x3D	; 61
     8d2:	88 e2       	ldi	r24, 0x28	; 40
     8d4:	0e 94 6f 03 	call	0x6de	; 0x6de <BNO055_WriteByte>
	
	if (BNO055_SelfTest() != BNO055_SUCCESS){							/*if self test didn't pass on all sensors*/
     8d8:	0e 94 17 04 	call	0x82e	; 0x82e <BNO055_SelfTest>
     8dc:	c8 2f       	mov	r28, r24
     8de:	89 30       	cpi	r24, 0x09	; 9
     8e0:	21 f0       	breq	.+8      	; 0x8ea <__stack+0x8b>
		return BNO055_SelfTest();
     8e2:	0e 94 17 04 	call	0x82e	; 0x82e <BNO055_SelfTest>
     8e6:	c8 2f       	mov	r28, r24
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0xa9>
	}
	while (1){
		if (BNO055_GetCalibStat(SYSTEM) > LOW_CALIBRATED && BNO055_GetCalibStat(GYROSCOPE) > LOW_CALIBRATED){
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 c1 03 	call	0x782	; 0x782 <BNO055_GetCalibStat>
     8f0:	82 30       	cpi	r24, 0x02	; 2
     8f2:	d8 f3       	brcs	.-10     	; 0x8ea <__stack+0x8b>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	0e 94 c1 03 	call	0x782	; 0x782 <BNO055_GetCalibStat>
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	b0 f3       	brcs	.-20     	; 0x8ea <__stack+0x8b>
			if(BNO055_GetCalibStat(MAGNETOMETER) > LOW_CALIBRATED )
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	0e 94 c1 03 	call	0x782	; 0x782 <BNO055_GetCalibStat>
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	88 f3       	brcs	.-30     	; 0x8ea <__stack+0x8b>
				break;
		}
	}
	return BNO055_SUCCESS;
}
     908:	8c 2f       	mov	r24, r28
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <Delay_ms_independent>:
		time_us--;
	}
}

void Delay_ms_independent(u16_t time_ms)
{
     90e:	8f 92       	push	r8
     910:	9f 92       	push	r9
     912:	af 92       	push	r10
     914:	bf 92       	push	r11
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
	u32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
     920:	9c 01       	movw	r18, r24
     922:	a8 ee       	ldi	r26, 0xE8	; 232
     924:	b3 e0       	ldi	r27, 0x03	; 3
     926:	0e 94 17 0c 	call	0x182e	; 0x182e <__umulhisi3>
     92a:	2b ea       	ldi	r18, 0xAB	; 171
     92c:	3a ea       	ldi	r19, 0xAA	; 170
     92e:	4a ea       	ldi	r20, 0xAA	; 170
     930:	5a ea       	ldi	r21, 0xAA	; 170
     932:	0e 94 26 0c 	call	0x184c	; 0x184c <__umulsidi3>
     936:	00 e2       	ldi	r16, 0x20	; 32
     938:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__lshrdi3>
     93c:	82 2e       	mov	r8, r18
     93e:	93 2e       	mov	r9, r19
     940:	a4 2e       	mov	r10, r20
     942:	b5 2e       	mov	r11, r21
     944:	b6 94       	lsr	r11
     946:	a7 94       	ror	r10
     948:	97 94       	ror	r9
     94a:	87 94       	ror	r8
	while (num_of_ticks)
     94c:	05 c0       	rjmp	.+10     	; 0x958 <Delay_ms_independent+0x4a>
	{
		num_of_ticks--;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	88 1a       	sub	r8, r24
     952:	91 08       	sbc	r9, r1
     954:	a1 08       	sbc	r10, r1
     956:	b1 08       	sbc	r11, r1

void Delay_ms_independent(u16_t time_ms)
{
	u32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
	while (num_of_ticks)
     958:	81 14       	cp	r8, r1
     95a:	91 04       	cpc	r9, r1
     95c:	a1 04       	cpc	r10, r1
     95e:	b1 04       	cpc	r11, r1
     960:	b1 f7       	brne	.-20     	; 0x94e <Delay_ms_independent+0x40>
	{
		num_of_ticks--;
	}
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	bf 90       	pop	r11
     96e:	af 90       	pop	r10
     970:	9f 90       	pop	r9
     972:	8f 90       	pop	r8
     974:	08 95       	ret

00000976 <LED_Init>:
#include "LED_interface.h"


void LED_Init(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPinDir(copy_u8Port ,copy_u8Pin, OUT );	
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	0e 94 84 05 	call	0xb08	; 0xb08 <DIO_setPinDir>
     97c:	08 95       	ret

0000097e <LED_TurnOn>:
}


void LED_TurnOn(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPin( copy_u8Port , copy_u8Pin);
     97e:	0e 94 c3 05 	call	0xb86	; 0xb86 <DIO_setPin>
     982:	08 95       	ret

00000984 <LED_TurnOff>:
}


void LED_TurnOff(u8_t copy_u8Port , u8_t copy_u8Pin)
{
     DIO_clearPin(copy_u8Port , copy_u8Pin);
     984:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_clearPin>
     988:	08 95       	ret

0000098a <advanceCircleByFixedAngle>:
void advanceCircleByFixedAngle(void)
{
	char    d;

	#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
	reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
     98a:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__data_end>
     98e:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__data_end+0x1>
     992:	14 16       	cp	r1, r20
     994:	15 06       	cpc	r1, r21
     996:	1c f4       	brge	.+6      	; 0x99e <advanceCircleByFixedAngle+0x14>
     998:	20 e2       	ldi	r18, 0x20	; 32
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <advanceCircleByFixedAngle+0x18>
     99e:	20 ee       	ldi	r18, 0xE0	; 224
     9a0:	3f ef       	ldi	r19, 0xFF	; 255
     9a2:	24 0f       	add	r18, r20
     9a4:	35 1f       	adc	r19, r21
     9a6:	02 2e       	mov	r0, r18
     9a8:	23 2f       	mov	r18, r19
     9aa:	00 0c       	add	r0, r0
     9ac:	22 1f       	adc	r18, r18
     9ae:	33 0b       	sbc	r19, r19
     9b0:	00 0c       	add	r0, r0
     9b2:	22 1f       	adc	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <reportBuffer+0x1>
	sinus += d;
     9ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <sinus>
     9be:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <sinus+0x1>
     9c2:	82 0f       	add	r24, r18
     9c4:	91 1d       	adc	r25, r1
     9c6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <sinus+0x1>
     9ca:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sinus>
	reportBuffer.dy = d = DIVIDE_BY_64(sinus);
     9ce:	18 16       	cp	r1, r24
     9d0:	19 06       	cpc	r1, r25
     9d2:	1c f4       	brge	.+6      	; 0x9da <advanceCircleByFixedAngle+0x50>
     9d4:	20 e2       	ldi	r18, 0x20	; 32
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <advanceCircleByFixedAngle+0x54>
     9da:	20 ee       	ldi	r18, 0xE0	; 224
     9dc:	3f ef       	ldi	r19, 0xFF	; 255
     9de:	82 0f       	add	r24, r18
     9e0:	93 1f       	adc	r25, r19
     9e2:	08 2e       	mov	r0, r24
     9e4:	89 2f       	mov	r24, r25
     9e6:	00 0c       	add	r0, r0
     9e8:	88 1f       	adc	r24, r24
     9ea:	99 0b       	sbc	r25, r25
     9ec:	00 0c       	add	r0, r0
     9ee:	88 1f       	adc	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <reportBuffer+0x2>
	cosinus -= d;
     9f6:	48 1b       	sub	r20, r24
     9f8:	51 09       	sbc	r21, r1
     9fa:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <__data_end+0x1>
     9fe:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__data_end>
     a02:	08 95       	ret

00000a04 <usbFunctionSetup>:
}

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     a04:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     a06:	90 81       	ld	r25, Z
     a08:	90 76       	andi	r25, 0x60	; 96
     a0a:	90 32       	cpi	r25, 0x20	; 32
     a0c:	e1 f4       	brne	.+56     	; 0xa46 <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     a0e:	81 81       	ldd	r24, Z+1	; 0x01
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	41 f4       	brne	.+16     	; 0xa24 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
     a14:	8a e7       	ldi	r24, 0x7A	; 122
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     a1c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
            return sizeof(reportBuffer);
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	41 f4       	brne	.+16     	; 0xa38 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
     a28:	89 e7       	ldi	r24, 0x79	; 121
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     a30:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
            return 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     a38:	8a 30       	cpi	r24, 0x0A	; 10
     a3a:	39 f4       	brne	.+14     	; 0xa4a <usbFunctionSetup+0x46>
            idleRate = rq->wValue.bytes[1];
     a3c:	83 81       	ldd	r24, Z+3	; 0x03
     a3e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
     a4a:	80 e0       	ldi	r24, 0x00	; 0
}
     a4c:	08 95       	ret

00000a4e <Mouse_init>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     a4e:	9e e0       	ldi	r25, 0x0E	; 14
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	a8 95       	wdr
     a58:	81 bd       	out	0x21, r24	; 33
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	91 bd       	out	0x21, r25	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
     a5e:	0e 94 2e 08 	call	0x105c	; 0x105c <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
     a62:	81 b3       	in	r24, 0x11	; 17
     a64:	80 61       	ori	r24, 0x10	; 16
     a66:	81 bb       	out	0x11, r24	; 17
	
	 i = 0;
     a68:	80 e0       	ldi	r24, 0x00	; 0
	 while(--i){             /* fake USB disconnect for > 250 ms */
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <Mouse_init+0x2c>
	   wdt_reset();
     a6c:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	e7 eb       	ldi	r30, 0xB7	; 183
     a70:	fb e0       	ldi	r31, 0x0B	; 11
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <Mouse_init+0x24>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <Mouse_init+0x2a>
     a78:	00 00       	nop
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
	
	 i = 0;
	 while(--i){             /* fake USB disconnect for > 250 ms */
     a7a:	81 50       	subi	r24, 0x01	; 1
     a7c:	b9 f7       	brne	.-18     	; 0xa6c <Mouse_init+0x1e>
	   wdt_reset();
	  _delay_ms(1);
	  }
	 usbDeviceConnect();
     a7e:	81 b3       	in	r24, 0x11	; 17
     a80:	8f 7e       	andi	r24, 0xEF	; 239
     a82:	81 bb       	out	0x11, r24	; 17
	 sei();
     a84:	78 94       	sei
     a86:	08 95       	ret

00000a88 <Mouse_MoveLeft>:
	 DBG1(0x01, 0, 0);       /* debug output: main loop starts */
	
}
void Mouse_MoveLeft(void) {
	reportBuffer.dx = -1 ;
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <reportBuffer+0x1>
     a8e:	08 95       	ret

00000a90 <Mouse_MoveRight>:
}
void Mouse_MoveRight(void) {
	reportBuffer.dx = 1 ; 
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <reportBuffer+0x1>
     a96:	08 95       	ret

00000a98 <Mouse_MoveUp>:
}
void Mouse_MoveUp(void) {
	reportBuffer.dy = -1 ; 
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <reportBuffer+0x2>
     a9e:	08 95       	ret

00000aa0 <Mouse_MoveDown>:
}
void Mouse_MoveDown(void) {
	reportBuffer.dy = 1 ;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <reportBuffer+0x2>
     aa6:	08 95       	ret

00000aa8 <Mouse_RightClick>:
}
void Mouse_RightClick(void) {
	reportBuffer.buttonMask = 1 ; 
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <reportBuffer>
     aae:	08 95       	ret

00000ab0 <Mouse_LeftClick>:
}
void Mouse_LeftClick(void) {
	reportBuffer.buttonMask = 2 ;
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <reportBuffer>
     ab6:	08 95       	ret

00000ab8 <Touch_Init>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*EX :	 ST_TouchConfig_t TouchConfig = {PORTA,PIN0};
		 Touch_Init(TouchConfig);
**/
void Touch_Init(ST_TouchConfig_t config){
	DIO_setPinDir(config.TOUCH_PORT,config.TOUCH_PIN,IN);
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	69 2f       	mov	r22, r25
     abc:	0e 94 84 05 	call	0xb08	; 0xb08 <DIO_setPinDir>
     ac0:	08 95       	ret

00000ac2 <Touch_Read>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*Return 1 if pressed , 0 otherwise
*
*/
u8_t Touch_Read(ST_TouchConfig_t config){
	return DIO_getPin(config.TOUCH_PORT,config.TOUCH_PIN);
     ac2:	69 2f       	mov	r22, r25
     ac4:	0e 94 de 05 	call	0xbbc	; 0xbbc <DIO_getPin>
     ac8:	08 95       	ret

00000aca <main>:

int main()
{
	u8_t key = OPENED;
	/* Init application */
	App_Init();
     aca:	0e 94 29 02 	call	0x452	; 0x452 <App_Init>
#define OPENED  1
#define CLOSED  0

int main()
{
	u8_t key = OPENED;
     ace:	c1 e0       	ldi	r28, 0x01	; 1
	
	while(1)
	{
		// Ensure usb is always up
		DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
		wdt_reset();
     ad0:	a8 95       	wdr
		usbPoll();
     ad2:	0e 94 32 07 	call	0xe64	; 0xe64 <usbPoll>
		if(usbInterruptIsReady())
     ad6:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <usbTxStatus1>
     ada:	84 ff       	sbrs	r24, 4
     adc:	07 c0       	rjmp	.+14     	; 0xaec <main+0x22>
		{
		/* called after every poll of the interrupt endpoint */
	    advanceCircleByFixedAngle();
     ade:	0e 94 c5 04 	call	0x98a	; 0x98a <advanceCircleByFixedAngle>
	    DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
	    usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	8a e7       	ldi	r24, 0x7A	; 122
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <usbSetInterrupt>
		}
		//------------------------------------------
		// START LOGIC
		/* Check touch sensor state */
		u8_t state = App_GetTouchSensorState();
     aec:	0e 94 64 02 	call	0x4c8	; 0x4c8 <App_GetTouchSensorState>
		
		if(state == CONTACT)
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	71 f7       	brne	.-36     	; 0xad0 <main+0x6>
		{
			// enter this block once to get the reference point
			if(key == OPENED)
     af4:	c1 30       	cpi	r28, 0x01	; 1
     af6:	19 f4       	brne	.+6      	; 0xafe <main+0x34>
			{
				// Get reference point from imu
				App_GetImuCalibPoint();
     af8:	0e 94 80 02 	call	0x500	; 0x500 <App_GetImuCalibPoint>
				key = CLOSED;
     afc:	c0 e0       	ldi	r28, 0x00	; 0
			
			}
			
			// Get current gradient of imu (required mouse motion direction)
			u8_t motion_direction = App_GetImuGradient();
     afe:	0e 94 ab 02 	call	0x556	; 0x556 <App_GetImuGradient>
			// move mouse
			App_OrderMouse(motion_direction);
     b02:	0e 94 40 02 	call	0x480	; 0x480 <App_OrderMouse>
     b06:	e4 cf       	rjmp	.-56     	; 0xad0 <main+0x6>

00000b08 <DIO_setPinDir>:
* this example set the first 4 bits to 0xF HIGH and the last 4 bits to 0x0 LOW
* void return.
*/
void DIO_writePort(EN_PORTS_t port,u8_t bin_pins)
{
	REG(port)=bin_pins;
     b08:	41 30       	cpi	r20, 0x01	; 1
     b0a:	69 f4       	brne	.+26     	; 0xb26 <DIO_setPinDir+0x1e>
     b0c:	e8 2f       	mov	r30, r24
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	22 91       	ld	r18, -Z
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_setPinDir+0x14>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	6a 95       	dec	r22
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_setPinDir+0x10>
     b20:	82 2b       	or	r24, r18
     b22:	80 83       	st	Z, r24
     b24:	08 95       	ret
     b26:	41 11       	cpse	r20, r1
     b28:	16 c0       	rjmp	.+44     	; 0xb56 <DIO_setPinDir+0x4e>
     b2a:	e8 2f       	mov	r30, r24
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	df 01       	movw	r26, r30
     b30:	2e 91       	ld	r18, -X
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <DIO_setPinDir+0x34>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	6a 95       	dec	r22
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <DIO_setPinDir+0x30>
     b40:	98 2f       	mov	r25, r24
     b42:	90 95       	com	r25
     b44:	92 23       	and	r25, r18
     b46:	9c 93       	st	X, r25
     b48:	90 b7       	in	r25, 0x30	; 48
     b4a:	94 60       	ori	r25, 0x04	; 4
     b4c:	90 bf       	out	0x30, r25	; 48
     b4e:	90 81       	ld	r25, Z
     b50:	89 2b       	or	r24, r25
     b52:	80 83       	st	Z, r24
     b54:	08 95       	ret
     b56:	42 30       	cpi	r20, 0x02	; 2
     b58:	a9 f4       	brne	.+42     	; 0xb84 <DIO_setPinDir+0x7c>
     b5a:	e8 2f       	mov	r30, r24
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	df 01       	movw	r26, r30
     b60:	2e 91       	ld	r18, -X
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_setPinDir+0x64>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	6a 95       	dec	r22
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_setPinDir+0x60>
     b70:	98 2f       	mov	r25, r24
     b72:	90 95       	com	r25
     b74:	92 23       	and	r25, r18
     b76:	9c 93       	st	X, r25
     b78:	90 b7       	in	r25, 0x30	; 48
     b7a:	9b 7f       	andi	r25, 0xFB	; 251
     b7c:	90 bf       	out	0x30, r25	; 48
     b7e:	90 81       	ld	r25, Z
     b80:	89 2b       	or	r24, r25
     b82:	80 83       	st	Z, r24
     b84:	08 95       	ret

00000b86 <DIO_setPin>:
     b86:	e8 2f       	mov	r30, r24
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_setPin+0x10>
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	6a 95       	dec	r22
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <DIO_setPin+0xc>
     b9a:	28 2b       	or	r18, r24
     b9c:	20 83       	st	Z, r18
     b9e:	08 95       	ret

00000ba0 <DIO_clearPin>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
     ba0:	e8 2f       	mov	r30, r24
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <DIO_clearPin+0x10>
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	6a 95       	dec	r22
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <DIO_clearPin+0xc>
     bb4:	20 95       	com	r18
     bb6:	28 23       	and	r18, r24
     bb8:	20 83       	st	Z, r18
     bba:	08 95       	ret

00000bbc <DIO_getPin>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return u8_t that holds the input value
*/	
u8_t DIO_getPin(EN_PORTS_t port,EN_PINS_t pin)
{
	return GETBIT(REG(port-0x02),(u8_t)pin);
     bbc:	e8 2f       	mov	r30, r24
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	32 97       	sbiw	r30, 0x02	; 2
     bc2:	80 81       	ld	r24, Z
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_getPin+0x10>
     bc8:	95 95       	asr	r25
     bca:	87 95       	ror	r24
     bcc:	6a 95       	dec	r22
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_getPin+0xc>
}
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	08 95       	ret

00000bd4 <I2C_Init>:
			I2C_Stop();
			continue;
		}
		break;						
	}
}
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	cf 93       	push	r28
     be6:	9a 01       	movw	r18, r20
     be8:	ab 01       	movw	r20, r22
     bea:	68 2f       	mov	r22, r24
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__divmodsi4>
     bf6:	69 01       	movw	r12, r18
     bf8:	7a 01       	movw	r14, r20
     bfa:	80 e1       	ldi	r24, 0x10	; 16
     bfc:	c8 1a       	sub	r12, r24
     bfe:	d1 08       	sbc	r13, r1
     c00:	e1 08       	sbc	r14, r1
     c02:	f1 08       	sbc	r15, r1
     c04:	c7 01       	movw	r24, r14
     c06:	b6 01       	movw	r22, r12
     c08:	2e ef       	ldi	r18, 0xFE	; 254
     c0a:	31 e0       	ldi	r19, 0x01	; 1
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__divmodsi4>
     c14:	ca 01       	movw	r24, r20
     c16:	b9 01       	movw	r22, r18
     c18:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatsisf>
     c1c:	28 e1       	ldi	r18, 0x18	; 24
     c1e:	32 e7       	ldi	r19, 0x72	; 114
     c20:	41 eb       	ldi	r20, 0xB1	; 177
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
     c28:	4b 01       	movw	r8, r22
     c2a:	5c 01       	movw	r10, r24
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	a9 01       	movw	r20, r18
     c32:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     c36:	88 23       	and	r24, r24
     c38:	d4 f1       	brlt	.+116    	; 0xcae <I2C_Init+0xda>
     c3a:	c0 e0       	ldi	r28, 0x00	; 0
     c3c:	12 c0       	rjmp	.+36     	; 0xc62 <I2C_Init+0x8e>
     c3e:	6c 2f       	mov	r22, r28
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	c5 01       	movw	r24, r10
     c50:	b4 01       	movw	r22, r8
     c52:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     c56:	18 16       	cp	r1, r24
     c58:	1c f0       	brlt	.+6      	; 0xc60 <I2C_Init+0x8c>
     c5a:	c1 b9       	out	0x01, r28	; 1
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <I2C_Init+0x94>
     c60:	cf 5f       	subi	r28, 0xFF	; 255
     c62:	c5 30       	cpi	r28, 0x05	; 5
     c64:	60 f3       	brcs	.-40     	; 0xc3e <I2C_Init+0x6a>
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	19 f5       	brne	.+70     	; 0xcb2 <I2C_Init+0xde>
     c6c:	6c 2f       	mov	r22, r28
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	90 e4       	ldi	r25, 0x40	; 64
     c84:	0e 94 6d 0a 	call	0x14da	; 0x14da <pow>
     c88:	9b 01       	movw	r18, r22
     c8a:	ac 01       	movw	r20, r24
     c8c:	0e 94 3c 08 	call	0x1078	; 0x1078 <__addsf3>
     c90:	4b 01       	movw	r8, r22
     c92:	5c 01       	movw	r10, r24
     c94:	c7 01       	movw	r24, r14
     c96:	b6 01       	movw	r22, r12
     c98:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatsisf>
     c9c:	a5 01       	movw	r20, r10
     c9e:	94 01       	movw	r18, r8
     ca0:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     ca4:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
     ca8:	60 b9       	out	0x00, r22	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <I2C_Init+0xe0>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <I2C_Init+0xe0>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	cf 91       	pop	r28
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	08 95       	ret

00000cc8 <I2C_Master_Start>:
     cc8:	96 b7       	in	r25, 0x36	; 54
     cca:	90 62       	ori	r25, 0x20	; 32
     ccc:	96 bf       	out	0x36, r25	; 54
     cce:	96 b7       	in	r25, 0x36	; 54
     cd0:	94 60       	ori	r25, 0x04	; 4
     cd2:	96 bf       	out	0x36, r25	; 54
     cd4:	96 b7       	in	r25, 0x36	; 54
     cd6:	90 68       	ori	r25, 0x80	; 128
     cd8:	96 bf       	out	0x36, r25	; 54
     cda:	06 b6       	in	r0, 0x36	; 54
     cdc:	07 fe       	sbrs	r0, 7
     cde:	fd cf       	rjmp	.-6      	; 0xcda <I2C_Master_Start+0x12>
     ce0:	91 b1       	in	r25, 0x01	; 1
     ce2:	98 7f       	andi	r25, 0xF8	; 248
     ce4:	98 30       	cpi	r25, 0x08	; 8
     ce6:	91 f4       	brne	.+36     	; 0xd0c <I2C_Master_Start+0x44>
     ce8:	83 b9       	out	0x03, r24	; 3
     cea:	86 b7       	in	r24, 0x36	; 54
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	86 bf       	out	0x36, r24	; 54
     cf0:	86 b7       	in	r24, 0x36	; 54
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	86 bf       	out	0x36, r24	; 54
     cf6:	06 b6       	in	r0, 0x36	; 54
     cf8:	07 fe       	sbrs	r0, 7
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <I2C_Master_Start+0x2e>
     cfc:	81 b1       	in	r24, 0x01	; 1
     cfe:	88 7f       	andi	r24, 0xF8	; 248
     d00:	88 31       	cpi	r24, 0x18	; 24
     d02:	31 f0       	breq	.+12     	; 0xd10 <I2C_Master_Start+0x48>
     d04:	80 32       	cpi	r24, 0x20	; 32
     d06:	31 f4       	brne	.+12     	; 0xd14 <I2C_Master_Start+0x4c>
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	08 95       	ret
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	08 95       	ret
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	08 95       	ret

00000d18 <I2C_Master_Write>:
     d18:	83 b9       	out	0x03, r24	; 3
     d1a:	86 b7       	in	r24, 0x36	; 54
     d1c:	84 60       	ori	r24, 0x04	; 4
     d1e:	86 bf       	out	0x36, r24	; 54
     d20:	86 b7       	in	r24, 0x36	; 54
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	86 bf       	out	0x36, r24	; 54
     d26:	06 b6       	in	r0, 0x36	; 54
     d28:	07 fe       	sbrs	r0, 7
     d2a:	fd cf       	rjmp	.-6      	; 0xd26 <I2C_Master_Write+0xe>
     d2c:	81 b1       	in	r24, 0x01	; 1
     d2e:	88 7f       	andi	r24, 0xF8	; 248
     d30:	88 32       	cpi	r24, 0x28	; 40
     d32:	21 f0       	breq	.+8      	; 0xd3c <I2C_Master_Write+0x24>
     d34:	80 33       	cpi	r24, 0x30	; 48
     d36:	21 f4       	brne	.+8      	; 0xd40 <I2C_Master_Write+0x28>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	08 95       	ret
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	08 95       	ret

00000d44 <I2C_Repeated_Start>:
     d44:	96 b7       	in	r25, 0x36	; 54
     d46:	94 60       	ori	r25, 0x04	; 4
     d48:	96 bf       	out	0x36, r25	; 54
     d4a:	96 b7       	in	r25, 0x36	; 54
     d4c:	90 68       	ori	r25, 0x80	; 128
     d4e:	96 bf       	out	0x36, r25	; 54
     d50:	96 b7       	in	r25, 0x36	; 54
     d52:	90 62       	ori	r25, 0x20	; 32
     d54:	96 bf       	out	0x36, r25	; 54
     d56:	06 b6       	in	r0, 0x36	; 54
     d58:	07 fe       	sbrs	r0, 7
     d5a:	fd cf       	rjmp	.-6      	; 0xd56 <I2C_Repeated_Start+0x12>
     d5c:	91 b1       	in	r25, 0x01	; 1
     d5e:	98 7f       	andi	r25, 0xF8	; 248
     d60:	90 31       	cpi	r25, 0x10	; 16
     d62:	91 f4       	brne	.+36     	; 0xd88 <I2C_Repeated_Start+0x44>
     d64:	83 b9       	out	0x03, r24	; 3
     d66:	86 b7       	in	r24, 0x36	; 54
     d68:	84 60       	ori	r24, 0x04	; 4
     d6a:	86 bf       	out	0x36, r24	; 54
     d6c:	86 b7       	in	r24, 0x36	; 54
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	86 bf       	out	0x36, r24	; 54
     d72:	06 b6       	in	r0, 0x36	; 54
     d74:	07 fe       	sbrs	r0, 7
     d76:	fd cf       	rjmp	.-6      	; 0xd72 <I2C_Repeated_Start+0x2e>
     d78:	81 b1       	in	r24, 0x01	; 1
     d7a:	88 7f       	andi	r24, 0xF8	; 248
     d7c:	80 34       	cpi	r24, 0x40	; 64
     d7e:	31 f0       	breq	.+12     	; 0xd8c <I2C_Repeated_Start+0x48>
     d80:	88 34       	cpi	r24, 0x48	; 72
     d82:	31 f4       	brne	.+12     	; 0xd90 <I2C_Repeated_Start+0x4c>
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	08 95       	ret
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	08 95       	ret
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	08 95       	ret

00000d94 <I2C_Read_Ack>:
	SETBIT(I2C_CONTROL_REG,TWSTO);
	while(GETBIT(I2C_CONTROL_REG,TWSTO));								
}
s8_t I2C_Read_Ack()											
{
	ENABLE_I2C;
     d94:	86 b7       	in	r24, 0x36	; 54
     d96:	84 60       	ori	r24, 0x04	; 4
     d98:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     d9a:	86 b7       	in	r24, 0x36	; 54
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	86 bf       	out	0x36, r24	; 54
	GENERATE_ACK;
     da0:	86 b7       	in	r24, 0x36	; 54
     da2:	80 64       	ori	r24, 0x40	; 64
     da4:	86 bf       	out	0x36, r24	; 54
		
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     da6:	06 b6       	in	r0, 0x36	; 54
     da8:	07 fe       	sbrs	r0, 7
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <I2C_Read_Ack+0x12>
	return TWDR_REG;											
     dac:	83 b1       	in	r24, 0x03	; 3
}
     dae:	08 95       	ret

00000db0 <I2C_Read_Nack>:

s8_t I2C_Read_Nack()										
{
	ENABLE_I2C;
     db0:	86 b7       	in	r24, 0x36	; 54
     db2:	84 60       	ori	r24, 0x04	; 4
     db4:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     db6:	86 b7       	in	r24, 0x36	; 54
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	86 bf       	out	0x36, r24	; 54
	
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     dbc:	06 b6       	in	r0, 0x36	; 54
     dbe:	07 fe       	sbrs	r0, 7
     dc0:	fd cf       	rjmp	.-6      	; 0xdbc <I2C_Read_Nack+0xc>
	return TWDR_REG;											
     dc2:	83 b1       	in	r24, 0x03	; 3
}
     dc4:	08 95       	ret

00000dc6 <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     dc6:	dc 01       	movw	r26, r24
     dc8:	86 2f       	mov	r24, r22
    if(len > 0){    /* don't bother app with 0 sized reads */
     dca:	66 23       	and	r22, r22
     dcc:	e1 f0       	breq	.+56     	; 0xe06 <usbDeviceRead+0x40>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     dce:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <usbMsgPtr>
     dd2:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     dd6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <usbMsgFlags>
     dda:	96 ff       	sbrs	r25, 6
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <usbDeviceRead+0x2a>
     dde:	96 2f       	mov	r25, r22
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     de0:	24 91       	lpm	r18, Z
                    *data++ = c;
     de2:	2c 93       	st	X, r18
                    r++;
     de4:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     de6:	91 50       	subi	r25, 0x01	; 1
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
                    *data++ = c;
     de8:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     dea:	91 11       	cpse	r25, r1
     dec:	f9 cf       	rjmp	.-14     	; 0xde0 <usbDeviceRead+0x1a>
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <usbDeviceRead+0x38>
     df0:	96 2f       	mov	r25, r22
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     df2:	21 91       	ld	r18, Z+
     df4:	2c 93       	st	X, r18
                    r++;
                }while(--i);
     df6:	91 50       	subi	r25, 0x01	; 1
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     df8:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     dfa:	91 11       	cpse	r25, r1
     dfc:	fa cf       	rjmp	.-12     	; 0xdf2 <usbDeviceRead+0x2c>
            }
            usbMsgPtr = r;
     dfe:	f0 93 99 00 	sts	0x0099, r31	; 0x800099 <usbMsgPtr+0x1>
     e02:	e0 93 98 00 	sts	0x0098, r30	; 0x800098 <usbMsgPtr>
        }
    }
    return len;
}
     e06:	08 95       	ret

00000e08 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	dc 01       	movw	r26, r24
     e10:	c6 2f       	mov	r28, r22
     e12:	8a 01       	movw	r16, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     e14:	fa 01       	movw	r30, r20
     e16:	80 81       	ld	r24, Z
     e18:	84 ff       	sbrs	r24, 4
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <usbGenericSetInterrupt+0x1e>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	88 e8       	ldi	r24, 0x88	; 136
     e20:	89 27       	eor	r24, r25
     e22:	81 83       	std	Z+1, r24	; 0x01
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <usbGenericSetInterrupt+0x24>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     e26:	8a e5       	ldi	r24, 0x5A	; 90
     e28:	fa 01       	movw	r30, r20
     e2a:	80 83       	st	Z, r24
    }
    p = txStatus->buffer + 1;
     e2c:	a8 01       	movw	r20, r16
     e2e:	4e 5f       	subi	r20, 0xFE	; 254
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
    i = len;
     e32:	9c 2f       	mov	r25, r28
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
     e34:	fa 01       	movw	r30, r20
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     e36:	2c 91       	ld	r18, X
     e38:	20 83       	st	Z, r18
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     e3a:	91 50       	subi	r25, 0x01	; 1
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	31 96       	adiw	r30, 0x01	; 1
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     e40:	91 11       	cpse	r25, r1
     e42:	f9 cf       	rjmp	.-14     	; 0xe36 <usbGenericSetInterrupt+0x2e>
    usbCrc16Append(&txStatus->buffer[1], len);
     e44:	6c 2f       	mov	r22, r28
     e46:	ca 01       	movw	r24, r20
     e48:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     e4c:	cc 5f       	subi	r28, 0xFC	; 252
     e4e:	f8 01       	movw	r30, r16
     e50:	c0 83       	st	Z, r28
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
     e5a:	49 e8       	ldi	r20, 0x89	; 137
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	0e 94 04 07 	call	0xe08	; 0xe08 <usbGenericSetInterrupt>
     e62:	08 95       	ret

00000e64 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     e68:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <usbRxLen>
     e6c:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
     e6e:	0a f4       	brpl	.+2      	; 0xe72 <usbPoll+0xe>
     e70:	b7 c0       	rjmp	.+366    	; 0xfe0 <usbPoll+0x17c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     e72:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <usbInputBufOffset>
     e76:	2c e0       	ldi	r18, 0x0C	; 12
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	29 1b       	sub	r18, r25
     e7c:	31 09       	sbc	r19, r1
     e7e:	e9 01       	movw	r28, r18
     e80:	c2 56       	subi	r28, 0x62	; 98
     e82:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     e84:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <usbRxToken>
     e88:	9d 32       	cpi	r25, 0x2D	; 45
     e8a:	09 f0       	breq	.+2      	; 0xe8e <usbPoll+0x2a>
     e8c:	a7 c0       	rjmp	.+334    	; 0xfdc <usbPoll+0x178>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     e8e:	88 30       	cpi	r24, 0x08	; 8
     e90:	09 f0       	breq	.+2      	; 0xe94 <usbPoll+0x30>
     e92:	a4 c0       	rjmp	.+328    	; 0xfdc <usbPoll+0x178>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     e94:	83 ec       	ldi	r24, 0xC3	; 195
     e96:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     e9a:	8a e5       	ldi	r24, 0x5A	; 90
     e9c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <usbTxLen>
        usbMsgFlags = 0;
     ea0:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     ea4:	88 81       	ld	r24, Y
     ea6:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
     eaa:	ce 01       	movw	r24, r28
     eac:	0e 94 02 05 	call	0xa04	; 0xa04 <usbFunctionSetup>
     eb0:	8c c0       	rjmp	.+280    	; 0xfca <usbPoll+0x166>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     eb4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     eba:	81 11       	cpse	r24, r1
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <usbPoll+0x66>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     ebe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     ec2:	27 e8       	ldi	r18, 0x87	; 135
     ec4:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	7c c0       	rjmp	.+248    	; 0xfc2 <usbPoll+0x15e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     eca:	85 30       	cpi	r24, 0x05	; 5
     ecc:	31 f4       	brne	.+12     	; 0xeda <usbPoll+0x76>
        usbNewDeviceAddr = value;
     ece:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     ed2:	27 e8       	ldi	r18, 0x87	; 135
     ed4:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	74 c0       	rjmp	.+232    	; 0xfc2 <usbPoll+0x15e>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     eda:	86 30       	cpi	r24, 0x06	; 6
     edc:	09 f0       	breq	.+2      	; 0xee0 <usbPoll+0x7c>
     ede:	51 c0       	rjmp	.+162    	; 0xf82 <usbPoll+0x11e>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	41 f4       	brne	.+16     	; 0xef6 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     ee6:	8a e3       	ldi	r24, 0x3A	; 58
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     eee:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     ef2:	82 e1       	ldi	r24, 0x12	; 18
     ef4:	42 c0       	rjmp	.+132    	; 0xf7a <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	41 f4       	brne	.+16     	; 0xf0a <usbPoll+0xa6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     efa:	88 e1       	ldi	r24, 0x18	; 24
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     f02:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     f06:	82 e2       	ldi	r24, 0x22	; 34
     f08:	38 c0       	rjmp	.+112    	; 0xf7a <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	f9 f4       	brne	.+62     	; 0xf4c <usbPoll+0xe8>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     f10:	81 11       	cpse	r24, r1
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     f14:	8a e6       	ldi	r24, 0x6A	; 106
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     f1c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     f20:	84 e0       	ldi	r24, 0x04	; 4
     f22:	2b c0       	rjmp	.+86     	; 0xf7a <usbPoll+0x116>
        SWITCH_CASE(1)
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	41 f4       	brne	.+16     	; 0xf38 <usbPoll+0xd4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     f28:	88 e5       	ldi	r24, 0x58	; 88
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     f30:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     f34:	82 e1       	ldi	r24, 0x12	; 18
     f36:	21 c0       	rjmp	.+66     	; 0xf7a <usbPoll+0x116>
        SWITCH_CASE(2)
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	e1 f4       	brne	.+56     	; 0xf74 <usbPoll+0x110>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     f3c:	8c e4       	ldi	r24, 0x4C	; 76
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     f44:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     f48:	8c e0       	ldi	r24, 0x0C	; 12
     f4a:	17 c0       	rjmp	.+46     	; 0xf7a <usbPoll+0x116>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     f4c:	81 32       	cpi	r24, 0x21	; 33
     f4e:	41 f4       	brne	.+16     	; 0xf60 <usbPoll+0xfc>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     f50:	8a e2       	ldi	r24, 0x2A	; 42
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     f58:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     f5c:	89 e0       	ldi	r24, 0x09	; 9
     f5e:	0d c0       	rjmp	.+26     	; 0xf7a <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     f60:	82 32       	cpi	r24, 0x22	; 34
     f62:	51 f4       	brne	.+20     	; 0xf78 <usbPoll+0x114>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     f64:	84 ee       	ldi	r24, 0xE4	; 228
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbMsgPtr+0x1>
     f6c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <usbMsgPtr>
     f70:	84 e3       	ldi	r24, 0x34	; 52
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <usbPoll+0x116>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <usbPoll+0x116>
     f78:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     f7a:	90 e4       	ldi	r25, 0x40	; 64
     f7c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <usbMsgFlags>
     f80:	24 c0       	rjmp	.+72     	; 0xfca <usbPoll+0x166>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	99 f0       	breq	.+38     	; 0xfac <usbPoll+0x148>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     f86:	89 30       	cpi	r24, 0x09	; 9
     f88:	31 f4       	brne	.+12     	; 0xf96 <usbPoll+0x132>
        usbConfiguration = value;
     f8a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     f8e:	27 e8       	ldi	r18, 0x87	; 135
     f90:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	16 c0       	rjmp	.+44     	; 0xfc2 <usbPoll+0x15e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     f96:	8a 30       	cpi	r24, 0x0A	; 10
     f98:	69 f0       	breq	.+26     	; 0xfb4 <usbPoll+0x150>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     f9a:	8b 30       	cpi	r24, 0x0B	; 11
     f9c:	79 f4       	brne	.+30     	; 0xfbc <usbPoll+0x158>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     f9e:	8b e4       	ldi	r24, 0x4B	; 75
     fa0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     fa4:	27 e8       	ldi	r18, 0x87	; 135
     fa6:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0b c0       	rjmp	.+22     	; 0xfc2 <usbPoll+0x15e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     fac:	2d e9       	ldi	r18, 0x9D	; 157
     fae:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     fb4:	27 e8       	ldi	r18, 0x87	; 135
     fb6:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     fbc:	27 e8       	ldi	r18, 0x87	; 135
     fbe:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     fc0:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     fc2:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <usbMsgPtr+0x1>
     fc6:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	91 11       	cpse	r25, r1
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <usbPoll+0x174>
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	98 17       	cp	r25, r24
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <usbPoll+0x174>
                replyLen = rq->wLength.bytes[0];
     fd6:	89 2f       	mov	r24, r25
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     fd8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     fdc:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     fe0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <usbTxLen>
     fe4:	84 ff       	sbrs	r24, 4
     fe6:	2b c0       	rjmp	.+86     	; 0x103e <usbPoll+0x1da>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     fe8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <usbMsgLen>
     fec:	8f 3f       	cpi	r24, 0xFF	; 255
     fee:	39 f1       	breq	.+78     	; 0x103e <usbPoll+0x1da>
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
     ff0:	89 30       	cpi	r24, 0x09	; 9
     ff2:	10 f4       	brcc	.+4      	; 0xff8 <usbPoll+0x194>
static inline void usbBuildTxBlock(void)
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
     ff4:	68 2f       	mov	r22, r24
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <usbPoll+0x196>
    if(wantLen > 8)
        wantLen = 8;
     ff8:	68 e0       	ldi	r22, 0x08	; 8
    usbMsgLen -= wantLen;
     ffa:	86 1b       	sub	r24, r22
     ffc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    1000:	ee e7       	ldi	r30, 0x7E	; 126
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	90 81       	ld	r25, Z
    1006:	88 e8       	ldi	r24, 0x88	; 136
    1008:	89 27       	eor	r24, r25
    100a:	80 83       	st	Z, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    100c:	8f e7       	ldi	r24, 0x7F	; 127
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <usbDeviceRead>
    1014:	c8 2f       	mov	r28, r24
    if(len <= 8){           /* valid data packet */
    1016:	89 30       	cpi	r24, 0x09	; 9
    1018:	60 f4       	brcc	.+24     	; 0x1032 <usbPoll+0x1ce>
        usbCrc16Append(&usbTxBuf[1], len);
    101a:	68 2f       	mov	r22, r24
    101c:	8f e7       	ldi	r24, 0x7F	; 127
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1024:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    1026:	cc 30       	cpi	r28, 0x0C	; 12
    1028:	40 f4       	brcc	.+16     	; 0x103a <usbPoll+0x1d6>
            usbMsgLen = USB_NO_MSG;
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
    1030:	04 c0       	rjmp	.+8      	; 0x103a <usbPoll+0x1d6>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    1038:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    103a:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    103e:	94 e1       	ldi	r25, 0x14	; 20
    1040:	04 c0       	rjmp	.+8      	; 0x104a <usbPoll+0x1e6>
        uchar usbLineStatus = USBIN & USBMASK;
    1042:	80 b3       	in	r24, 0x10	; 16
    1044:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
    1046:	39 f4       	brne	.+14     	; 0x1056 <usbPoll+0x1f2>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    1048:	91 50       	subi	r25, 0x01	; 1
    104a:	91 11       	cpse	r25, r1
    104c:	fa cf       	rjmp	.-12     	; 0x1042 <usbPoll+0x1de>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    104e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    1052:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    105c:	85 b7       	in	r24, 0x35	; 53
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    1062:	8b b7       	in	r24, 0x3b	; 59
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1068:	e9 e8       	ldi	r30, 0x89	; 137
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8b e4       	ldi	r24, 0x4B	; 75
    106e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    1070:	8a e5       	ldi	r24, 0x5A	; 90
    1072:	80 83       	st	Z, r24
    1074:	08 95       	ret

00001076 <__subsf3>:
    1076:	50 58       	subi	r21, 0x80	; 128

00001078 <__addsf3>:
    1078:	bb 27       	eor	r27, r27
    107a:	aa 27       	eor	r26, r26
    107c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__addsf3x>
    1080:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1084:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    1088:	38 f0       	brcs	.+14     	; 0x1098 <__addsf3+0x20>
    108a:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    108e:	20 f0       	brcs	.+8      	; 0x1098 <__addsf3+0x20>
    1090:	39 f4       	brne	.+14     	; 0x10a0 <__addsf3+0x28>
    1092:	9f 3f       	cpi	r25, 0xFF	; 255
    1094:	19 f4       	brne	.+6      	; 0x109c <__addsf3+0x24>
    1096:	26 f4       	brtc	.+8      	; 0x10a0 <__addsf3+0x28>
    1098:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    109c:	0e f4       	brtc	.+2      	; 0x10a0 <__addsf3+0x28>
    109e:	e0 95       	com	r30
    10a0:	e7 fb       	bst	r30, 7
    10a2:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>

000010a6 <__addsf3x>:
    10a6:	e9 2f       	mov	r30, r25
    10a8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    10ac:	58 f3       	brcs	.-42     	; 0x1084 <__addsf3+0xc>
    10ae:	ba 17       	cp	r27, r26
    10b0:	62 07       	cpc	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	95 07       	cpc	r25, r21
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__addsf3x+0x1c>
    10ba:	79 f4       	brne	.+30     	; 0x10da <__addsf3x+0x34>
    10bc:	a6 f5       	brtc	.+104    	; 0x1126 <__addsf3x+0x80>
    10be:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    10c2:	0e f4       	brtc	.+2      	; 0x10c6 <__addsf3x+0x20>
    10c4:	e0 95       	com	r30
    10c6:	0b 2e       	mov	r0, r27
    10c8:	ba 2f       	mov	r27, r26
    10ca:	a0 2d       	mov	r26, r0
    10cc:	0b 01       	movw	r0, r22
    10ce:	b9 01       	movw	r22, r18
    10d0:	90 01       	movw	r18, r0
    10d2:	0c 01       	movw	r0, r24
    10d4:	ca 01       	movw	r24, r20
    10d6:	a0 01       	movw	r20, r0
    10d8:	11 24       	eor	r1, r1
    10da:	ff 27       	eor	r31, r31
    10dc:	59 1b       	sub	r21, r25
    10de:	99 f0       	breq	.+38     	; 0x1106 <__addsf3x+0x60>
    10e0:	59 3f       	cpi	r21, 0xF9	; 249
    10e2:	50 f4       	brcc	.+20     	; 0x10f8 <__addsf3x+0x52>
    10e4:	50 3e       	cpi	r21, 0xE0	; 224
    10e6:	68 f1       	brcs	.+90     	; 0x1142 <__addsf3x+0x9c>
    10e8:	1a 16       	cp	r1, r26
    10ea:	f0 40       	sbci	r31, 0x00	; 0
    10ec:	a2 2f       	mov	r26, r18
    10ee:	23 2f       	mov	r18, r19
    10f0:	34 2f       	mov	r19, r20
    10f2:	44 27       	eor	r20, r20
    10f4:	58 5f       	subi	r21, 0xF8	; 248
    10f6:	f3 cf       	rjmp	.-26     	; 0x10de <__addsf3x+0x38>
    10f8:	46 95       	lsr	r20
    10fa:	37 95       	ror	r19
    10fc:	27 95       	ror	r18
    10fe:	a7 95       	ror	r26
    1100:	f0 40       	sbci	r31, 0x00	; 0
    1102:	53 95       	inc	r21
    1104:	c9 f7       	brne	.-14     	; 0x10f8 <__addsf3x+0x52>
    1106:	7e f4       	brtc	.+30     	; 0x1126 <__addsf3x+0x80>
    1108:	1f 16       	cp	r1, r31
    110a:	ba 0b       	sbc	r27, r26
    110c:	62 0b       	sbc	r22, r18
    110e:	73 0b       	sbc	r23, r19
    1110:	84 0b       	sbc	r24, r20
    1112:	ba f0       	brmi	.+46     	; 0x1142 <__addsf3x+0x9c>
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	a1 f0       	breq	.+40     	; 0x1140 <__addsf3x+0x9a>
    1118:	ff 0f       	add	r31, r31
    111a:	bb 1f       	adc	r27, r27
    111c:	66 1f       	adc	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	c2 f7       	brpl	.-16     	; 0x1114 <__addsf3x+0x6e>
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <__addsf3x+0x9c>
    1126:	ba 0f       	add	r27, r26
    1128:	62 1f       	adc	r22, r18
    112a:	73 1f       	adc	r23, r19
    112c:	84 1f       	adc	r24, r20
    112e:	48 f4       	brcc	.+18     	; 0x1142 <__addsf3x+0x9c>
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f7 95       	ror	r31
    113a:	9e 3f       	cpi	r25, 0xFE	; 254
    113c:	08 f0       	brcs	.+2      	; 0x1140 <__addsf3x+0x9a>
    113e:	b0 cf       	rjmp	.-160    	; 0x10a0 <__addsf3+0x28>
    1140:	93 95       	inc	r25
    1142:	88 0f       	add	r24, r24
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__addsf3x+0xa2>
    1146:	99 27       	eor	r25, r25
    1148:	ee 0f       	add	r30, r30
    114a:	97 95       	ror	r25
    114c:	87 95       	ror	r24
    114e:	08 95       	ret

00001150 <__cmpsf2>:
    1150:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_cmp>
    1154:	08 f4       	brcc	.+2      	; 0x1158 <__cmpsf2+0x8>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 95       	ret

0000115a <__divsf3>:
    115a:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divsf3x>
    115e:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1162:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    1166:	58 f0       	brcs	.+22     	; 0x117e <__divsf3+0x24>
    1168:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    116c:	40 f0       	brcs	.+16     	; 0x117e <__divsf3+0x24>
    116e:	29 f4       	brne	.+10     	; 0x117a <__divsf3+0x20>
    1170:	5f 3f       	cpi	r21, 0xFF	; 255
    1172:	29 f0       	breq	.+10     	; 0x117e <__divsf3+0x24>
    1174:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    1178:	51 11       	cpse	r21, r1
    117a:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    117e:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>

00001182 <__divsf3x>:
    1182:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    1186:	68 f3       	brcs	.-38     	; 0x1162 <__divsf3+0x8>

00001188 <__divsf3_pse>:
    1188:	99 23       	and	r25, r25
    118a:	b1 f3       	breq	.-20     	; 0x1178 <__divsf3+0x1e>
    118c:	55 23       	and	r21, r21
    118e:	91 f3       	breq	.-28     	; 0x1174 <__divsf3+0x1a>
    1190:	95 1b       	sub	r25, r21
    1192:	55 0b       	sbc	r21, r21
    1194:	bb 27       	eor	r27, r27
    1196:	aa 27       	eor	r26, r26
    1198:	62 17       	cp	r22, r18
    119a:	73 07       	cpc	r23, r19
    119c:	84 07       	cpc	r24, r20
    119e:	38 f0       	brcs	.+14     	; 0x11ae <__divsf3_pse+0x26>
    11a0:	9f 5f       	subi	r25, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	44 1f       	adc	r20, r20
    11aa:	aa 1f       	adc	r26, r26
    11ac:	a9 f3       	breq	.-22     	; 0x1198 <__divsf3_pse+0x10>
    11ae:	35 d0       	rcall	.+106    	; 0x121a <__divsf3_pse+0x92>
    11b0:	0e 2e       	mov	r0, r30
    11b2:	3a f0       	brmi	.+14     	; 0x11c2 <__divsf3_pse+0x3a>
    11b4:	e0 e8       	ldi	r30, 0x80	; 128
    11b6:	32 d0       	rcall	.+100    	; 0x121c <__divsf3_pse+0x94>
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	e6 95       	lsr	r30
    11be:	00 1c       	adc	r0, r0
    11c0:	ca f7       	brpl	.-14     	; 0x11b4 <__divsf3_pse+0x2c>
    11c2:	2b d0       	rcall	.+86     	; 0x121a <__divsf3_pse+0x92>
    11c4:	fe 2f       	mov	r31, r30
    11c6:	29 d0       	rcall	.+82     	; 0x121a <__divsf3_pse+0x92>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	bb 1f       	adc	r27, r27
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	48 07       	cpc	r20, r24
    11d6:	ab 07       	cpc	r26, r27
    11d8:	b0 e8       	ldi	r27, 0x80	; 128
    11da:	09 f0       	breq	.+2      	; 0x11de <__divsf3_pse+0x56>
    11dc:	bb 0b       	sbc	r27, r27
    11de:	80 2d       	mov	r24, r0
    11e0:	bf 01       	movw	r22, r30
    11e2:	ff 27       	eor	r31, r31
    11e4:	93 58       	subi	r25, 0x83	; 131
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	3a f0       	brmi	.+14     	; 0x11f8 <__divsf3_pse+0x70>
    11ea:	9e 3f       	cpi	r25, 0xFE	; 254
    11ec:	51 05       	cpc	r21, r1
    11ee:	78 f0       	brcs	.+30     	; 0x120e <__divsf3_pse+0x86>
    11f0:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    11f4:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	e4 f3       	brlt	.-8      	; 0x11f4 <__divsf3_pse+0x6c>
    11fc:	98 3e       	cpi	r25, 0xE8	; 232
    11fe:	d4 f3       	brlt	.-12     	; 0x11f4 <__divsf3_pse+0x6c>
    1200:	86 95       	lsr	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	9f 5f       	subi	r25, 0xFF	; 255
    120c:	c9 f7       	brne	.-14     	; 0x1200 <__divsf3_pse+0x78>
    120e:	88 0f       	add	r24, r24
    1210:	91 1d       	adc	r25, r1
    1212:	96 95       	lsr	r25
    1214:	87 95       	ror	r24
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret
    121a:	e1 e0       	ldi	r30, 0x01	; 1
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	bb 1f       	adc	r27, r27
    1224:	62 17       	cp	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	84 07       	cpc	r24, r20
    122a:	ba 07       	cpc	r27, r26
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__divsf3_pse+0xae>
    122e:	62 1b       	sub	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	ba 0b       	sbc	r27, r26
    1236:	ee 1f       	adc	r30, r30
    1238:	88 f7       	brcc	.-30     	; 0x121c <__divsf3_pse+0x94>
    123a:	e0 95       	com	r30
    123c:	08 95       	ret

0000123e <__fixunssfsi>:
    123e:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    1242:	88 f0       	brcs	.+34     	; 0x1266 <__fixunssfsi+0x28>
    1244:	9f 57       	subi	r25, 0x7F	; 127
    1246:	98 f0       	brcs	.+38     	; 0x126e <__fixunssfsi+0x30>
    1248:	b9 2f       	mov	r27, r25
    124a:	99 27       	eor	r25, r25
    124c:	b7 51       	subi	r27, 0x17	; 23
    124e:	b0 f0       	brcs	.+44     	; 0x127c <__fixunssfsi+0x3e>
    1250:	e1 f0       	breq	.+56     	; 0x128a <__fixunssfsi+0x4c>
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	1a f0       	brmi	.+6      	; 0x1262 <__fixunssfsi+0x24>
    125c:	ba 95       	dec	r27
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__fixunssfsi+0x14>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <__fixunssfsi+0x4c>
    1262:	b1 30       	cpi	r27, 0x01	; 1
    1264:	91 f0       	breq	.+36     	; 0x128a <__fixunssfsi+0x4c>
    1266:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_zero>
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	08 95       	ret
    126e:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    1272:	67 2f       	mov	r22, r23
    1274:	78 2f       	mov	r23, r24
    1276:	88 27       	eor	r24, r24
    1278:	b8 5f       	subi	r27, 0xF8	; 248
    127a:	39 f0       	breq	.+14     	; 0x128a <__fixunssfsi+0x4c>
    127c:	b9 3f       	cpi	r27, 0xF9	; 249
    127e:	cc f3       	brlt	.-14     	; 0x1272 <__fixunssfsi+0x34>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b3 95       	inc	r27
    1288:	d9 f7       	brne	.-10     	; 0x1280 <__fixunssfsi+0x42>
    128a:	3e f4       	brtc	.+14     	; 0x129a <__fixunssfsi+0x5c>
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	08 95       	ret

0000129c <__floatunsisf>:
    129c:	e8 94       	clt
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <__floatsisf+0x12>

000012a0 <__floatsisf>:
    12a0:	97 fb       	bst	r25, 7
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__floatsisf+0x12>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	99 23       	and	r25, r25
    12b4:	a9 f0       	breq	.+42     	; 0x12e0 <__floatsisf+0x40>
    12b6:	f9 2f       	mov	r31, r25
    12b8:	96 e9       	ldi	r25, 0x96	; 150
    12ba:	bb 27       	eor	r27, r27
    12bc:	93 95       	inc	r25
    12be:	f6 95       	lsr	r31
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f1 11       	cpse	r31, r1
    12ca:	f8 cf       	rjmp	.-16     	; 0x12bc <__floatsisf+0x1c>
    12cc:	fa f4       	brpl	.+62     	; 0x130c <__floatsisf+0x6c>
    12ce:	bb 0f       	add	r27, r27
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <__floatsisf+0x36>
    12d2:	60 ff       	sbrs	r22, 0
    12d4:	1b c0       	rjmp	.+54     	; 0x130c <__floatsisf+0x6c>
    12d6:	6f 5f       	subi	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	16 c0       	rjmp	.+44     	; 0x130c <__floatsisf+0x6c>
    12e0:	88 23       	and	r24, r24
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <__floatsisf+0x48>
    12e4:	96 e9       	ldi	r25, 0x96	; 150
    12e6:	11 c0       	rjmp	.+34     	; 0x130a <__floatsisf+0x6a>
    12e8:	77 23       	and	r23, r23
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <__floatsisf+0x54>
    12ec:	9e e8       	ldi	r25, 0x8E	; 142
    12ee:	87 2f       	mov	r24, r23
    12f0:	76 2f       	mov	r23, r22
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <__floatsisf+0x5e>
    12f4:	66 23       	and	r22, r22
    12f6:	71 f0       	breq	.+28     	; 0x1314 <__floatsisf+0x74>
    12f8:	96 e8       	ldi	r25, 0x86	; 134
    12fa:	86 2f       	mov	r24, r22
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	2a f0       	brmi	.+10     	; 0x130c <__floatsisf+0x6c>
    1302:	9a 95       	dec	r25
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	da f7       	brpl	.-10     	; 0x1302 <__floatsisf+0x62>
    130c:	88 0f       	add	r24, r24
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret

00001316 <__fp_cmp>:
    1316:	99 0f       	add	r25, r25
    1318:	00 08       	sbc	r0, r0
    131a:	55 0f       	add	r21, r21
    131c:	aa 0b       	sbc	r26, r26
    131e:	e0 e8       	ldi	r30, 0x80	; 128
    1320:	fe ef       	ldi	r31, 0xFE	; 254
    1322:	16 16       	cp	r1, r22
    1324:	17 06       	cpc	r1, r23
    1326:	e8 07       	cpc	r30, r24
    1328:	f9 07       	cpc	r31, r25
    132a:	c0 f0       	brcs	.+48     	; 0x135c <__fp_cmp+0x46>
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	e4 07       	cpc	r30, r20
    1332:	f5 07       	cpc	r31, r21
    1334:	98 f0       	brcs	.+38     	; 0x135c <__fp_cmp+0x46>
    1336:	62 1b       	sub	r22, r18
    1338:	73 0b       	sbc	r23, r19
    133a:	84 0b       	sbc	r24, r20
    133c:	95 0b       	sbc	r25, r21
    133e:	39 f4       	brne	.+14     	; 0x134e <__fp_cmp+0x38>
    1340:	0a 26       	eor	r0, r26
    1342:	61 f0       	breq	.+24     	; 0x135c <__fp_cmp+0x46>
    1344:	23 2b       	or	r18, r19
    1346:	24 2b       	or	r18, r20
    1348:	25 2b       	or	r18, r21
    134a:	21 f4       	brne	.+8      	; 0x1354 <__fp_cmp+0x3e>
    134c:	08 95       	ret
    134e:	0a 26       	eor	r0, r26
    1350:	09 f4       	brne	.+2      	; 0x1354 <__fp_cmp+0x3e>
    1352:	a1 40       	sbci	r26, 0x01	; 1
    1354:	a6 95       	lsr	r26
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	81 1d       	adc	r24, r1
    135a:	81 1d       	adc	r24, r1
    135c:	08 95       	ret

0000135e <__fp_inf>:
    135e:	97 f9       	bld	r25, 7
    1360:	9f 67       	ori	r25, 0x7F	; 127
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	08 95       	ret

0000136a <__fp_nan>:
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	80 ec       	ldi	r24, 0xC0	; 192
    136e:	08 95       	ret

00001370 <__fp_pscA>:
    1370:	00 24       	eor	r0, r0
    1372:	0a 94       	dec	r0
    1374:	16 16       	cp	r1, r22
    1376:	17 06       	cpc	r1, r23
    1378:	18 06       	cpc	r1, r24
    137a:	09 06       	cpc	r0, r25
    137c:	08 95       	ret

0000137e <__fp_pscB>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	05 06       	cpc	r0, r21
    138a:	08 95       	ret

0000138c <__fp_round>:
    138c:	09 2e       	mov	r0, r25
    138e:	03 94       	inc	r0
    1390:	00 0c       	add	r0, r0
    1392:	11 f4       	brne	.+4      	; 0x1398 <__fp_round+0xc>
    1394:	88 23       	and	r24, r24
    1396:	52 f0       	brmi	.+20     	; 0x13ac <__fp_round+0x20>
    1398:	bb 0f       	add	r27, r27
    139a:	40 f4       	brcc	.+16     	; 0x13ac <__fp_round+0x20>
    139c:	bf 2b       	or	r27, r31
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__fp_round+0x18>
    13a0:	60 ff       	sbrs	r22, 0
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <__fp_round+0x20>
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__fp_split3>:
    13ae:	57 fd       	sbrc	r21, 7
    13b0:	90 58       	subi	r25, 0x80	; 128
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	59 f0       	breq	.+22     	; 0x13ce <__fp_splitA+0x10>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__fp_splitA+0x1a>
    13bc:	47 95       	ror	r20

000013be <__fp_splitA>:
    13be:	88 0f       	add	r24, r24
    13c0:	97 fb       	bst	r25, 7
    13c2:	99 1f       	adc	r25, r25
    13c4:	61 f0       	breq	.+24     	; 0x13de <__fp_splitA+0x20>
    13c6:	9f 3f       	cpi	r25, 0xFF	; 255
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <__fp_splitA+0x2a>
    13ca:	87 95       	ror	r24
    13cc:	08 95       	ret
    13ce:	12 16       	cp	r1, r18
    13d0:	13 06       	cpc	r1, r19
    13d2:	14 06       	cpc	r1, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	f2 cf       	rjmp	.-28     	; 0x13bc <__fp_split3+0xe>
    13d8:	46 95       	lsr	r20
    13da:	f1 df       	rcall	.-30     	; 0x13be <__fp_splitA>
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <__fp_splitA+0x30>
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	f1 cf       	rjmp	.-30     	; 0x13ca <__fp_splitA+0xc>
    13e8:	86 95       	lsr	r24
    13ea:	71 05       	cpc	r23, r1
    13ec:	61 05       	cpc	r22, r1
    13ee:	08 94       	sec
    13f0:	08 95       	ret

000013f2 <__fp_zero>:
    13f2:	e8 94       	clt

000013f4 <__fp_szero>:
    13f4:	bb 27       	eor	r27, r27
    13f6:	66 27       	eor	r22, r22
    13f8:	77 27       	eor	r23, r23
    13fa:	cb 01       	movw	r24, r22
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <__mulsf3>:
    1400:	0e 94 13 0a 	call	0x1426	; 0x1426 <__mulsf3x>
    1404:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1408:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    140c:	38 f0       	brcs	.+14     	; 0x141c <__mulsf3+0x1c>
    140e:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    1412:	20 f0       	brcs	.+8      	; 0x141c <__mulsf3+0x1c>
    1414:	95 23       	and	r25, r21
    1416:	11 f0       	breq	.+4      	; 0x141c <__mulsf3+0x1c>
    1418:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    141c:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    1420:	11 24       	eor	r1, r1
    1422:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>

00001426 <__mulsf3x>:
    1426:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    142a:	70 f3       	brcs	.-36     	; 0x1408 <__mulsf3+0x8>

0000142c <__mulsf3_pse>:
    142c:	95 9f       	mul	r25, r21
    142e:	c1 f3       	breq	.-16     	; 0x1420 <__mulsf3+0x20>
    1430:	95 0f       	add	r25, r21
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	55 1f       	adc	r21, r21
    1436:	62 9f       	mul	r22, r18
    1438:	f0 01       	movw	r30, r0
    143a:	72 9f       	mul	r23, r18
    143c:	bb 27       	eor	r27, r27
    143e:	f0 0d       	add	r31, r0
    1440:	b1 1d       	adc	r27, r1
    1442:	63 9f       	mul	r22, r19
    1444:	aa 27       	eor	r26, r26
    1446:	f0 0d       	add	r31, r0
    1448:	b1 1d       	adc	r27, r1
    144a:	aa 1f       	adc	r26, r26
    144c:	64 9f       	mul	r22, r20
    144e:	66 27       	eor	r22, r22
    1450:	b0 0d       	add	r27, r0
    1452:	a1 1d       	adc	r26, r1
    1454:	66 1f       	adc	r22, r22
    1456:	82 9f       	mul	r24, r18
    1458:	22 27       	eor	r18, r18
    145a:	b0 0d       	add	r27, r0
    145c:	a1 1d       	adc	r26, r1
    145e:	62 1f       	adc	r22, r18
    1460:	73 9f       	mul	r23, r19
    1462:	b0 0d       	add	r27, r0
    1464:	a1 1d       	adc	r26, r1
    1466:	62 1f       	adc	r22, r18
    1468:	83 9f       	mul	r24, r19
    146a:	a0 0d       	add	r26, r0
    146c:	61 1d       	adc	r22, r1
    146e:	22 1f       	adc	r18, r18
    1470:	74 9f       	mul	r23, r20
    1472:	33 27       	eor	r19, r19
    1474:	a0 0d       	add	r26, r0
    1476:	61 1d       	adc	r22, r1
    1478:	23 1f       	adc	r18, r19
    147a:	84 9f       	mul	r24, r20
    147c:	60 0d       	add	r22, r0
    147e:	21 1d       	adc	r18, r1
    1480:	82 2f       	mov	r24, r18
    1482:	76 2f       	mov	r23, r22
    1484:	6a 2f       	mov	r22, r26
    1486:	11 24       	eor	r1, r1
    1488:	9f 57       	subi	r25, 0x7F	; 127
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	9a f0       	brmi	.+38     	; 0x14b4 <__mulsf3_pse+0x88>
    148e:	f1 f0       	breq	.+60     	; 0x14cc <__mulsf3_pse+0xa0>
    1490:	88 23       	and	r24, r24
    1492:	4a f0       	brmi	.+18     	; 0x14a6 <__mulsf3_pse+0x7a>
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	bb 1f       	adc	r27, r27
    149a:	66 1f       	adc	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	91 50       	subi	r25, 0x01	; 1
    14a2:	50 40       	sbci	r21, 0x00	; 0
    14a4:	a9 f7       	brne	.-22     	; 0x1490 <__mulsf3_pse+0x64>
    14a6:	9e 3f       	cpi	r25, 0xFE	; 254
    14a8:	51 05       	cpc	r21, r1
    14aa:	80 f0       	brcs	.+32     	; 0x14cc <__mulsf3_pse+0xa0>
    14ac:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    14b0:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    14b4:	5f 3f       	cpi	r21, 0xFF	; 255
    14b6:	e4 f3       	brlt	.-8      	; 0x14b0 <__mulsf3_pse+0x84>
    14b8:	98 3e       	cpi	r25, 0xE8	; 232
    14ba:	d4 f3       	brlt	.-12     	; 0x14b0 <__mulsf3_pse+0x84>
    14bc:	86 95       	lsr	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	b7 95       	ror	r27
    14c4:	f7 95       	ror	r31
    14c6:	e7 95       	ror	r30
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	c1 f7       	brne	.-16     	; 0x14bc <__mulsf3_pse+0x90>
    14cc:	fe 2b       	or	r31, r30
    14ce:	88 0f       	add	r24, r24
    14d0:	91 1d       	adc	r25, r1
    14d2:	96 95       	lsr	r25
    14d4:	87 95       	ror	r24
    14d6:	97 f9       	bld	r25, 7
    14d8:	08 95       	ret

000014da <pow>:
    14da:	fa 01       	movw	r30, r20
    14dc:	ee 0f       	add	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	30 96       	adiw	r30, 0x00	; 0
    14e2:	21 05       	cpc	r18, r1
    14e4:	31 05       	cpc	r19, r1
    14e6:	a1 f1       	breq	.+104    	; 0x1550 <pow+0x76>
    14e8:	61 15       	cp	r22, r1
    14ea:	71 05       	cpc	r23, r1
    14ec:	61 f4       	brne	.+24     	; 0x1506 <pow+0x2c>
    14ee:	80 38       	cpi	r24, 0x80	; 128
    14f0:	bf e3       	ldi	r27, 0x3F	; 63
    14f2:	9b 07       	cpc	r25, r27
    14f4:	49 f1       	breq	.+82     	; 0x1548 <pow+0x6e>
    14f6:	68 94       	set
    14f8:	90 38       	cpi	r25, 0x80	; 128
    14fa:	81 05       	cpc	r24, r1
    14fc:	61 f0       	breq	.+24     	; 0x1516 <pow+0x3c>
    14fe:	80 38       	cpi	r24, 0x80	; 128
    1500:	bf ef       	ldi	r27, 0xFF	; 255
    1502:	9b 07       	cpc	r25, r27
    1504:	41 f0       	breq	.+16     	; 0x1516 <pow+0x3c>
    1506:	99 23       	and	r25, r25
    1508:	4a f5       	brpl	.+82     	; 0x155c <pow+0x82>
    150a:	ff 3f       	cpi	r31, 0xFF	; 255
    150c:	e1 05       	cpc	r30, r1
    150e:	31 05       	cpc	r19, r1
    1510:	21 05       	cpc	r18, r1
    1512:	19 f1       	breq	.+70     	; 0x155a <pow+0x80>
    1514:	e8 94       	clt
    1516:	08 94       	sec
    1518:	e7 95       	ror	r30
    151a:	d9 01       	movw	r26, r18
    151c:	aa 23       	and	r26, r26
    151e:	29 f4       	brne	.+10     	; 0x152a <pow+0x50>
    1520:	ab 2f       	mov	r26, r27
    1522:	be 2f       	mov	r27, r30
    1524:	f8 5f       	subi	r31, 0xF8	; 248
    1526:	d0 f3       	brcs	.-12     	; 0x151c <pow+0x42>
    1528:	10 c0       	rjmp	.+32     	; 0x154a <pow+0x70>
    152a:	ff 5f       	subi	r31, 0xFF	; 255
    152c:	70 f4       	brcc	.+28     	; 0x154a <pow+0x70>
    152e:	a6 95       	lsr	r26
    1530:	e0 f7       	brcc	.-8      	; 0x152a <pow+0x50>
    1532:	f7 39       	cpi	r31, 0x97	; 151
    1534:	50 f0       	brcs	.+20     	; 0x154a <pow+0x70>
    1536:	19 f0       	breq	.+6      	; 0x153e <pow+0x64>
    1538:	ff 3a       	cpi	r31, 0xAF	; 175
    153a:	38 f4       	brcc	.+14     	; 0x154a <pow+0x70>
    153c:	9f 77       	andi	r25, 0x7F	; 127
    153e:	9f 93       	push	r25
    1540:	0d d0       	rcall	.+26     	; 0x155c <pow+0x82>
    1542:	0f 90       	pop	r0
    1544:	07 fc       	sbrc	r0, 7
    1546:	90 58       	subi	r25, 0x80	; 128
    1548:	08 95       	ret
    154a:	46 f0       	brts	.+16     	; 0x155c <pow+0x82>
    154c:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	80 e8       	ldi	r24, 0x80	; 128
    1556:	9f e3       	ldi	r25, 0x3F	; 63
    1558:	08 95       	ret
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	9f 77       	andi	r25, 0x7F	; 127
    155e:	5f 93       	push	r21
    1560:	4f 93       	push	r20
    1562:	3f 93       	push	r19
    1564:	2f 93       	push	r18
    1566:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <log>
    156a:	2f 91       	pop	r18
    156c:	3f 91       	pop	r19
    156e:	4f 91       	pop	r20
    1570:	5f 91       	pop	r21
    1572:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    1576:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <exp>
    157a:	29 f4       	brne	.+10     	; 0x1586 <pow+0xac>
    157c:	16 f0       	brts	.+4      	; 0x1582 <pow+0xa8>
    157e:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    1582:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    1586:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>

0000158a <exp>:
    158a:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    158e:	a8 f3       	brcs	.-22     	; 0x157a <pow+0xa0>
    1590:	96 38       	cpi	r25, 0x86	; 134
    1592:	a0 f7       	brcc	.-24     	; 0x157c <pow+0xa2>
    1594:	07 f8       	bld	r0, 7
    1596:	0f 92       	push	r0
    1598:	e8 94       	clt
    159a:	2b e3       	ldi	r18, 0x3B	; 59
    159c:	3a ea       	ldi	r19, 0xAA	; 170
    159e:	48 eb       	ldi	r20, 0xB8	; 184
    15a0:	5f e7       	ldi	r21, 0x7F	; 127
    15a2:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3_pse>
    15a6:	0f 92       	push	r0
    15a8:	0f 92       	push	r0
    15aa:	0f 92       	push	r0
    15ac:	4d b7       	in	r20, 0x3d	; 61
    15ae:	5e b7       	in	r21, 0x3e	; 62
    15b0:	0f 92       	push	r0
    15b2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <modf>
    15b6:	e2 e6       	ldi	r30, 0x62	; 98
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_powser>
    15be:	4f 91       	pop	r20
    15c0:	5f 91       	pop	r21
    15c2:	ef 91       	pop	r30
    15c4:	ff 91       	pop	r31
    15c6:	e5 95       	asr	r30
    15c8:	ee 1f       	adc	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	49 f0       	breq	.+18     	; 0x15e0 <exp+0x56>
    15ce:	fe 57       	subi	r31, 0x7E	; 126
    15d0:	e0 68       	ori	r30, 0x80	; 128
    15d2:	44 27       	eor	r20, r20
    15d4:	ee 0f       	add	r30, r30
    15d6:	44 1f       	adc	r20, r20
    15d8:	fa 95       	dec	r31
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <exp+0x4a>
    15dc:	41 95       	neg	r20
    15de:	55 0b       	sbc	r21, r21
    15e0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ldexp>
    15e4:	0f 90       	pop	r0
    15e6:	07 fe       	sbrs	r0, 7
    15e8:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <inverse>
    15ec:	08 95       	ret

000015ee <__fp_powser>:
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	1f 93       	push	r17
    15f4:	0f 93       	push	r16
    15f6:	ff 92       	push	r15
    15f8:	ef 92       	push	r14
    15fa:	df 92       	push	r13
    15fc:	7b 01       	movw	r14, r22
    15fe:	8c 01       	movw	r16, r24
    1600:	68 94       	set
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <__fp_powser+0x22>
    1604:	da 2e       	mov	r13, r26
    1606:	ef 01       	movw	r28, r30
    1608:	0e 94 13 0a 	call	0x1426	; 0x1426 <__mulsf3x>
    160c:	fe 01       	movw	r30, r28
    160e:	e8 94       	clt
    1610:	a5 91       	lpm	r26, Z+
    1612:	25 91       	lpm	r18, Z+
    1614:	35 91       	lpm	r19, Z+
    1616:	45 91       	lpm	r20, Z+
    1618:	55 91       	lpm	r21, Z+
    161a:	a6 f3       	brts	.-24     	; 0x1604 <__fp_powser+0x16>
    161c:	ef 01       	movw	r28, r30
    161e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__addsf3x>
    1622:	fe 01       	movw	r30, r28
    1624:	97 01       	movw	r18, r14
    1626:	a8 01       	movw	r20, r16
    1628:	da 94       	dec	r13
    162a:	69 f7       	brne	.-38     	; 0x1606 <__fp_powser+0x18>
    162c:	df 90       	pop	r13
    162e:	ef 90       	pop	r14
    1630:	ff 90       	pop	r15
    1632:	0f 91       	pop	r16
    1634:	1f 91       	pop	r17
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <inverse>:
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e8       	ldi	r24, 0x80	; 128
    1646:	9f e3       	ldi	r25, 0x3F	; 63
    1648:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__divsf3>
    164c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    1650:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_mpack>

00001654 <ldexp>:
    1654:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    1658:	d8 f3       	brcs	.-10     	; 0x1650 <inverse+0x14>
    165a:	99 23       	and	r25, r25
    165c:	c9 f3       	breq	.-14     	; 0x1650 <inverse+0x14>
    165e:	94 0f       	add	r25, r20
    1660:	51 1d       	adc	r21, r1
    1662:	a3 f3       	brvs	.-24     	; 0x164c <inverse+0x10>
    1664:	91 50       	subi	r25, 0x01	; 1
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	94 f0       	brlt	.+36     	; 0x168e <ldexp+0x3a>
    166a:	59 f0       	breq	.+22     	; 0x1682 <ldexp+0x2e>
    166c:	88 23       	and	r24, r24
    166e:	32 f0       	brmi	.+12     	; 0x167c <ldexp+0x28>
    1670:	66 0f       	add	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	91 50       	subi	r25, 0x01	; 1
    1678:	50 40       	sbci	r21, 0x00	; 0
    167a:	c1 f7       	brne	.-16     	; 0x166c <ldexp+0x18>
    167c:	9e 3f       	cpi	r25, 0xFE	; 254
    167e:	51 05       	cpc	r21, r1
    1680:	2c f7       	brge	.-54     	; 0x164c <inverse+0x10>
    1682:	88 0f       	add	r24, r24
    1684:	91 1d       	adc	r25, r1
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	97 f9       	bld	r25, 7
    168c:	08 95       	ret
    168e:	5f 3f       	cpi	r21, 0xFF	; 255
    1690:	ac f0       	brlt	.+42     	; 0x16bc <ldexp+0x68>
    1692:	98 3e       	cpi	r25, 0xE8	; 232
    1694:	9c f0       	brlt	.+38     	; 0x16bc <ldexp+0x68>
    1696:	bb 27       	eor	r27, r27
    1698:	86 95       	lsr	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	08 f4       	brcc	.+2      	; 0x16a4 <ldexp+0x50>
    16a2:	b1 60       	ori	r27, 0x01	; 1
    16a4:	93 95       	inc	r25
    16a6:	c1 f7       	brne	.-16     	; 0x1698 <ldexp+0x44>
    16a8:	bb 0f       	add	r27, r27
    16aa:	58 f7       	brcc	.-42     	; 0x1682 <ldexp+0x2e>
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <ldexp+0x5e>
    16ae:	60 ff       	sbrs	r22, 0
    16b0:	e8 cf       	rjmp	.-48     	; 0x1682 <ldexp+0x2e>
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	e3 cf       	rjmp	.-58     	; 0x1682 <ldexp+0x2e>
    16bc:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    16c0:	16 f0       	brts	.+4      	; 0x16c6 <ldexp+0x72>
    16c2:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_mpack>
    16c6:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    16ca:	68 94       	set
    16cc:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>

000016d0 <log>:
    16d0:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    16d4:	a8 f3       	brcs	.-22     	; 0x16c0 <ldexp+0x6c>
    16d6:	99 23       	and	r25, r25
    16d8:	c1 f3       	breq	.-16     	; 0x16ca <ldexp+0x76>
    16da:	ae f3       	brts	.-22     	; 0x16c6 <ldexp+0x72>
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	1f 93       	push	r17
    16e2:	0f 93       	push	r16
    16e4:	ff 92       	push	r15
    16e6:	c9 2f       	mov	r28, r25
    16e8:	dd 27       	eor	r29, r29
    16ea:	88 23       	and	r24, r24
    16ec:	2a f0       	brmi	.+10     	; 0x16f8 <log+0x28>
    16ee:	21 97       	sbiw	r28, 0x01	; 1
    16f0:	66 0f       	add	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	da f7       	brpl	.-10     	; 0x16ee <log+0x1e>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f eb       	ldi	r21, 0xBF	; 191
    1700:	9f e3       	ldi	r25, 0x3F	; 63
    1702:	88 39       	cpi	r24, 0x98	; 152
    1704:	20 f0       	brcs	.+8      	; 0x170e <log+0x3e>
    1706:	80 3e       	cpi	r24, 0xE0	; 224
    1708:	38 f0       	brcs	.+14     	; 0x1718 <log+0x48>
    170a:	21 96       	adiw	r28, 0x01	; 1
    170c:	8f 77       	andi	r24, 0x7F	; 127
    170e:	0e 94 3c 08 	call	0x1078	; 0x1078 <__addsf3>
    1712:	ea e8       	ldi	r30, 0x8A	; 138
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <log+0x50>
    1718:	0e 94 3c 08 	call	0x1078	; 0x1078 <__addsf3>
    171c:	e7 eb       	ldi	r30, 0xB7	; 183
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_powser>
    1724:	8b 01       	movw	r16, r22
    1726:	be 01       	movw	r22, r28
    1728:	ec 01       	movw	r28, r24
    172a:	fb 2e       	mov	r15, r27
    172c:	6f 57       	subi	r22, 0x7F	; 127
    172e:	71 09       	sbc	r23, r1
    1730:	75 95       	asr	r23
    1732:	77 1f       	adc	r23, r23
    1734:	88 0b       	sbc	r24, r24
    1736:	99 0b       	sbc	r25, r25
    1738:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatsisf>
    173c:	28 e1       	ldi	r18, 0x18	; 24
    173e:	32 e7       	ldi	r19, 0x72	; 114
    1740:	41 e3       	ldi	r20, 0x31	; 49
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 13 0a 	call	0x1426	; 0x1426 <__mulsf3x>
    1748:	af 2d       	mov	r26, r15
    174a:	98 01       	movw	r18, r16
    174c:	ae 01       	movw	r20, r28
    174e:	ff 90       	pop	r15
    1750:	0f 91       	pop	r16
    1752:	1f 91       	pop	r17
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__addsf3x>
    175c:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>

00001760 <modf>:
    1760:	fa 01       	movw	r30, r20
    1762:	dc 01       	movw	r26, r24
    1764:	aa 0f       	add	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	9b 01       	movw	r18, r22
    176a:	ac 01       	movw	r20, r24
    176c:	bf 57       	subi	r27, 0x7F	; 127
    176e:	28 f4       	brcc	.+10     	; 0x177a <modf+0x1a>
    1770:	22 27       	eor	r18, r18
    1772:	33 27       	eor	r19, r19
    1774:	44 27       	eor	r20, r20
    1776:	50 78       	andi	r21, 0x80	; 128
    1778:	20 c0       	rjmp	.+64     	; 0x17ba <modf+0x5a>
    177a:	b7 51       	subi	r27, 0x17	; 23
    177c:	90 f4       	brcc	.+36     	; 0x17a2 <modf+0x42>
    177e:	ab 2f       	mov	r26, r27
    1780:	00 24       	eor	r0, r0
    1782:	46 95       	lsr	r20
    1784:	37 95       	ror	r19
    1786:	27 95       	ror	r18
    1788:	01 1c       	adc	r0, r1
    178a:	a3 95       	inc	r26
    178c:	d2 f3       	brmi	.-12     	; 0x1782 <modf+0x22>
    178e:	00 20       	and	r0, r0
    1790:	71 f0       	breq	.+28     	; 0x17ae <modf+0x4e>
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	44 1f       	adc	r20, r20
    1798:	b3 95       	inc	r27
    179a:	da f3       	brmi	.-10     	; 0x1792 <modf+0x32>
    179c:	0e d0       	rcall	.+28     	; 0x17ba <modf+0x5a>
    179e:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__subsf3>
    17a2:	61 30       	cpi	r22, 0x01	; 1
    17a4:	71 05       	cpc	r23, r1
    17a6:	a0 e8       	ldi	r26, 0x80	; 128
    17a8:	8a 07       	cpc	r24, r26
    17aa:	b9 46       	sbci	r27, 0x69	; 105
    17ac:	30 f4       	brcc	.+12     	; 0x17ba <modf+0x5a>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	66 27       	eor	r22, r22
    17b4:	77 27       	eor	r23, r23
    17b6:	88 27       	eor	r24, r24
    17b8:	90 78       	andi	r25, 0x80	; 128
    17ba:	30 96       	adiw	r30, 0x00	; 0
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <modf+0x66>
    17be:	20 83       	st	Z, r18
    17c0:	31 83       	std	Z+1, r19	; 0x01
    17c2:	42 83       	std	Z+2, r20	; 0x02
    17c4:	53 83       	std	Z+3, r21	; 0x03
    17c6:	08 95       	ret

000017c8 <__fp_mpack>:
    17c8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ca:	31 f0       	breq	.+12     	; 0x17d8 <__fp_mpack_finite+0xc>

000017cc <__fp_mpack_finite>:
    17cc:	91 50       	subi	r25, 0x01	; 1
    17ce:	20 f4       	brcc	.+8      	; 0x17d8 <__fp_mpack_finite+0xc>
    17d0:	87 95       	ror	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	b7 95       	ror	r27
    17d8:	88 0f       	add	r24, r24
    17da:	91 1d       	adc	r25, r1
    17dc:	96 95       	lsr	r25
    17de:	87 95       	ror	r24
    17e0:	97 f9       	bld	r25, 7
    17e2:	08 95       	ret

000017e4 <__divmodsi4>:
    17e4:	05 2e       	mov	r0, r21
    17e6:	97 fb       	bst	r25, 7
    17e8:	1e f4       	brtc	.+6      	; 0x17f0 <__divmodsi4+0xc>
    17ea:	00 94       	com	r0
    17ec:	0e 94 09 0c 	call	0x1812	; 0x1812 <__negsi2>
    17f0:	57 fd       	sbrc	r21, 7
    17f2:	07 d0       	rcall	.+14     	; 0x1802 <__divmodsi4_neg2>
    17f4:	0e 94 6f 0c 	call	0x18de	; 0x18de <__udivmodsi4>
    17f8:	07 fc       	sbrc	r0, 7
    17fa:	03 d0       	rcall	.+6      	; 0x1802 <__divmodsi4_neg2>
    17fc:	4e f4       	brtc	.+18     	; 0x1810 <__divmodsi4_exit>
    17fe:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__negsi2>

00001802 <__divmodsi4_neg2>:
    1802:	50 95       	com	r21
    1804:	40 95       	com	r20
    1806:	30 95       	com	r19
    1808:	21 95       	neg	r18
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	4f 4f       	sbci	r20, 0xFF	; 255
    180e:	5f 4f       	sbci	r21, 0xFF	; 255

00001810 <__divmodsi4_exit>:
    1810:	08 95       	ret

00001812 <__negsi2>:
    1812:	90 95       	com	r25
    1814:	80 95       	com	r24
    1816:	70 95       	com	r23
    1818:	61 95       	neg	r22
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	8f 4f       	sbci	r24, 0xFF	; 255
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	08 95       	ret

00001822 <__tablejump2__>:
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	05 90       	lpm	r0, Z+
    1828:	f4 91       	lpm	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	09 94       	ijmp

0000182e <__umulhisi3>:
    182e:	a2 9f       	mul	r26, r18
    1830:	b0 01       	movw	r22, r0
    1832:	b3 9f       	mul	r27, r19
    1834:	c0 01       	movw	r24, r0
    1836:	a3 9f       	mul	r26, r19
    1838:	70 0d       	add	r23, r0
    183a:	81 1d       	adc	r24, r1
    183c:	11 24       	eor	r1, r1
    183e:	91 1d       	adc	r25, r1
    1840:	b2 9f       	mul	r27, r18
    1842:	70 0d       	add	r23, r0
    1844:	81 1d       	adc	r24, r1
    1846:	11 24       	eor	r1, r1
    1848:	91 1d       	adc	r25, r1
    184a:	08 95       	ret

0000184c <__umulsidi3>:
    184c:	e8 94       	clt

0000184e <__umulsidi3_helper>:
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	fc 01       	movw	r30, r24
    1854:	db 01       	movw	r26, r22
    1856:	0e 94 17 0c 	call	0x182e	; 0x182e <__umulhisi3>
    185a:	7f 93       	push	r23
    185c:	6f 93       	push	r22
    185e:	e9 01       	movw	r28, r18
    1860:	9a 01       	movw	r18, r20
    1862:	ac 01       	movw	r20, r24
    1864:	bf 93       	push	r27
    1866:	af 93       	push	r26
    1868:	3f 93       	push	r19
    186a:	2f 93       	push	r18
    186c:	df 01       	movw	r26, r30
    186e:	0e 94 17 0c 	call	0x182e	; 0x182e <__umulhisi3>
    1872:	26 f4       	brtc	.+8      	; 0x187c <__umulsidi3_helper+0x2e>
    1874:	6c 1b       	sub	r22, r28
    1876:	7d 0b       	sbc	r23, r29
    1878:	82 0b       	sbc	r24, r18
    187a:	93 0b       	sbc	r25, r19
    187c:	9e 01       	movw	r18, r28
    187e:	eb 01       	movw	r28, r22
    1880:	fc 01       	movw	r30, r24
    1882:	0e 94 91 0c 	call	0x1922	; 0x1922 <__muldi3_6>
    1886:	af 91       	pop	r26
    1888:	bf 91       	pop	r27
    188a:	2f 91       	pop	r18
    188c:	3f 91       	pop	r19
    188e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__muldi3_6>
    1892:	be 01       	movw	r22, r28
    1894:	cf 01       	movw	r24, r30
    1896:	f9 01       	movw	r30, r18
    1898:	2f 91       	pop	r18
    189a:	3f 91       	pop	r19
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <__ashrdi3>:
    18a2:	97 fb       	bst	r25, 7
    18a4:	10 f8       	bld	r1, 0

000018a6 <__lshrdi3>:
    18a6:	16 94       	lsr	r1
    18a8:	00 08       	sbc	r0, r0
    18aa:	0f 93       	push	r16
    18ac:	08 30       	cpi	r16, 0x08	; 8
    18ae:	98 f0       	brcs	.+38     	; 0x18d6 <__lshrdi3+0x30>
    18b0:	08 50       	subi	r16, 0x08	; 8
    18b2:	23 2f       	mov	r18, r19
    18b4:	34 2f       	mov	r19, r20
    18b6:	45 2f       	mov	r20, r21
    18b8:	56 2f       	mov	r21, r22
    18ba:	67 2f       	mov	r22, r23
    18bc:	78 2f       	mov	r23, r24
    18be:	89 2f       	mov	r24, r25
    18c0:	90 2d       	mov	r25, r0
    18c2:	f4 cf       	rjmp	.-24     	; 0x18ac <__lshrdi3+0x6>
    18c4:	05 94       	asr	r0
    18c6:	97 95       	ror	r25
    18c8:	87 95       	ror	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	57 95       	ror	r21
    18d0:	47 95       	ror	r20
    18d2:	37 95       	ror	r19
    18d4:	27 95       	ror	r18
    18d6:	0a 95       	dec	r16
    18d8:	aa f7       	brpl	.-22     	; 0x18c4 <__lshrdi3+0x1e>
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <__udivmodsi4>:
    18de:	a1 e2       	ldi	r26, 0x21	; 33
    18e0:	1a 2e       	mov	r1, r26
    18e2:	aa 1b       	sub	r26, r26
    18e4:	bb 1b       	sub	r27, r27
    18e6:	fd 01       	movw	r30, r26
    18e8:	0d c0       	rjmp	.+26     	; 0x1904 <__udivmodsi4_ep>

000018ea <__udivmodsi4_loop>:
    18ea:	aa 1f       	adc	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	ee 1f       	adc	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	a2 17       	cp	r26, r18
    18f4:	b3 07       	cpc	r27, r19
    18f6:	e4 07       	cpc	r30, r20
    18f8:	f5 07       	cpc	r31, r21
    18fa:	20 f0       	brcs	.+8      	; 0x1904 <__udivmodsi4_ep>
    18fc:	a2 1b       	sub	r26, r18
    18fe:	b3 0b       	sbc	r27, r19
    1900:	e4 0b       	sbc	r30, r20
    1902:	f5 0b       	sbc	r31, r21

00001904 <__udivmodsi4_ep>:
    1904:	66 1f       	adc	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	1a 94       	dec	r1
    190e:	69 f7       	brne	.-38     	; 0x18ea <__udivmodsi4_loop>
    1910:	60 95       	com	r22
    1912:	70 95       	com	r23
    1914:	80 95       	com	r24
    1916:	90 95       	com	r25
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	bd 01       	movw	r22, r26
    191e:	cf 01       	movw	r24, r30
    1920:	08 95       	ret

00001922 <__muldi3_6>:
    1922:	0e 94 17 0c 	call	0x182e	; 0x182e <__umulhisi3>
    1926:	46 0f       	add	r20, r22
    1928:	57 1f       	adc	r21, r23
    192a:	c8 1f       	adc	r28, r24
    192c:	d9 1f       	adc	r29, r25
    192e:	08 f4       	brcc	.+2      	; 0x1932 <__muldi3_6+0x10>
    1930:	31 96       	adiw	r30, 0x01	; 1
    1932:	08 95       	ret

00001934 <_exit>:
    1934:	f8 94       	cli

00001936 <__stop_program>:
    1936:	ff cf       	rjmp	.-2      	; 0x1936 <__stop_program>
