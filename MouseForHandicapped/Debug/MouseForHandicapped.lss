
MouseForHandicapped.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001aa6  00001b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  0080006a  0080006a  00001b44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00001bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003893  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a2  00000000  00000000  0000579b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000252b  00000000  00000000  00006b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  00009068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012c1  00000000  00000000  000097e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002020  00000000  00000000  0000aaa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000cac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	38 02       	muls	r19, r24
      56:	3b 02       	muls	r19, r27
      58:	32 02       	muls	r19, r18
      5a:	35 02       	muls	r19, r21
      5c:	3e 02       	muls	r19, r30
      5e:	41 02       	muls	r20, r17
      60:	44 02       	muls	r20, r20
      62:	07 63       	ori	r16, 0x37	; 55
      64:	42 36       	cpi	r20, 0x62	; 98
      66:	b7 9b       	sbis	0x16, 7	; 22
      68:	d8 a7       	std	Y+40, r29	; 0x28
      6a:	1a 39       	cpi	r17, 0x9A	; 154
      6c:	68 56       	subi	r22, 0x68	; 104
      6e:	18 ae       	std	Y+56, r1	; 0x38
      70:	ba ab       	std	Y+50, r27	; 0x32
      72:	55 8c       	ldd	r5, Z+29	; 0x1d
      74:	1d 3c       	cpi	r17, 0xCD	; 205
      76:	b7 cc       	rjmp	.-1682   	; 0xfffff9e6 <__eeprom_end+0xff7ef9e6>
      78:	57 63       	ori	r21, 0x37	; 55
      7a:	bd 6d       	ori	r27, 0xDD	; 221
      7c:	ed fd       	.word	0xfded	; ????
      7e:	75 3e       	cpi	r23, 0xE5	; 229
      80:	f6 17       	cp	r31, r22
      82:	72 31       	cpi	r23, 0x12	; 18
      84:	bf 00       	.word	0x00bf	; ????
      86:	00 00       	nop
      88:	80 3f       	cpi	r24, 0xF0	; 240
      8a:	08 00       	.word	0x0008	; ????
      8c:	00 00       	nop
      8e:	be 92       	st	-X, r11
      90:	24 49       	sbci	r18, 0x94	; 148
      92:	12 3e       	cpi	r17, 0xE2	; 226
      94:	ab aa       	std	Y+51, r10	; 0x33
      96:	aa 2a       	or	r10, r26
      98:	be cd       	rjmp	.-1156   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
      9a:	cc cc       	rjmp	.-1640   	; 0xfffffa34 <__eeprom_end+0xff7efa34>
      9c:	4c 3e       	cpi	r20, 0xEC	; 236
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	be ab       	std	Y+54, r27	; 0x36
      a4:	aa aa       	std	Y+50, r10	; 0x32
      a6:	aa 3e       	cpi	r26, 0xEA	; 234
      a8:	00 00       	nop
      aa:	00 00       	nop
      ac:	bf 00       	.word	0x00bf	; ????
      ae:	00 00       	nop
      b0:	80 3f       	cpi	r24, 0xF0	; 240
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	41 78       	andi	r20, 0x81	; 129
      ba:	d3 bb       	out	0x13, r29	; 19
      bc:	43 87       	std	Z+11, r20	; 0x0b
      be:	d1 13       	cpse	r29, r17
      c0:	3d 19       	sub	r19, r13
      c2:	0e 3c       	cpi	r16, 0xCE	; 206
      c4:	c3 bd       	out	0x23, r28	; 35
      c6:	42 82       	std	Z+2, r4	; 0x02
      c8:	ad 2b       	or	r26, r29
      ca:	3e 68       	ori	r19, 0x8E	; 142
      cc:	ec 82       	std	Y+4, r14	; 0x04
      ce:	76 be       	out	0x36, r7	; 54
      d0:	d9 8f       	std	Y+25, r29	; 0x19
      d2:	e1 a9       	ldd	r30, Z+49	; 0x31
      d4:	3e 4c       	sbci	r19, 0xCE	; 206
      d6:	80 ef       	ldi	r24, 0xF0	; 240
      d8:	ff be       	out	0x3f, r15	; 63
      da:	01 c4       	rjmp	.+2050   	; 0x8de <BNO055_ReadBytes+0x32>
      dc:	ff 7f       	andi	r31, 0xFF	; 255
      de:	3f 00       	.word	0x003f	; ????
      e0:	00 00       	nop
	...

000000e4 <__trampolines_end>:
      e4:	05 01       	movw	r0, r10
      e6:	09 02       	muls	r16, r25
      e8:	a1 01       	movw	r20, r2
      ea:	09 01       	movw	r0, r18
      ec:	a1 00       	.word	0x00a1	; ????
      ee:	05 09       	sbc	r16, r5
      f0:	19 01       	movw	r2, r18
      f2:	29 03       	fmul	r18, r17
      f4:	15 00       	.word	0x0015	; ????
      f6:	25 01       	movw	r4, r10
      f8:	95 03       	fmuls	r17, r21
      fa:	75 01       	movw	r14, r10
      fc:	81 02       	muls	r24, r17
      fe:	95 01       	movw	r18, r10
     100:	75 05       	cpc	r23, r5
     102:	81 03       	fmuls	r16, r17
     104:	05 01       	movw	r0, r10
     106:	09 30       	cpi	r16, 0x09	; 9
     108:	09 31       	cpi	r16, 0x19	; 25
     10a:	09 38       	cpi	r16, 0x89	; 137
     10c:	15 81       	ldd	r17, Z+5	; 0x05
     10e:	25 7f       	andi	r18, 0xF5	; 245
     110:	75 08       	sbc	r7, r5
     112:	95 03       	fmuls	r17, r21
     114:	81 06       	cpc	r8, r17
     116:	c0 c0       	rjmp	.+384    	; 0x298 <rxbit2+0x2>

00000118 <usbDescriptorConfiguration>:
     118:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
     128:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
     138:	00 64                                               .d

0000013a <usbDescriptorDevice>:
     13a:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
     14a:	00 01                                               ..

0000014c <usbDescriptorStringDevice>:
     14c:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

00000158 <usbDescriptorStringVendor>:
     158:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
     168:	74 00                                               t.

0000016a <usbDescriptorString0>:
     16a:	04 03 09 04                                         ....

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf e5       	ldi	r28, 0x5F	; 95
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	a0 e6       	ldi	r26, 0x60	; 96
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e6 ea       	ldi	r30, 0xA6	; 166
     182:	fa e1       	ldi	r31, 0x1A	; 26
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	aa 36       	cpi	r26, 0x6A	; 106
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	aa e6       	ldi	r26, 0x6A	; 106
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a6 3b       	cpi	r26, 0xB6	; 182
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 26 06 	call	0xc4c	; 0xc4c <main>
     1a4:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     1ac:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     1ae:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     1b0:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     1b4:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     1b6:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     1b8:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     1ba:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <usbCrcLoopEntry>

000001be <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     1be:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     1c0:	82 27       	eor	r24, r18

000001c2 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     1c2:	97 95       	ror	r25
    ror     resCrcL
     1c4:	87 95       	ror	r24
    brcs    usbCrcNoXor
     1c6:	10 f0       	brcs	.+4      	; 0x1cc <usbCrcNoXor>
    eor     resCrcL, polyL
     1c8:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     1ca:	95 27       	eor	r25, r21

000001cc <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     1cc:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     1ce:	c8 f3       	brcs	.-14     	; 0x1c2 <usbCrcBitLoop>

000001d0 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     1d0:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     1d2:	a8 f3       	brcs	.-22     	; 0x1be <usbCrcByteLoop>

000001d4 <usbCrcReady>:
usbCrcReady:
    ret
     1d4:	08 95       	ret

000001d6 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     1d6:	ea df       	rcall	.-44     	; 0x1ac <usbCrc16>
    st      ptr+, resCrcL
     1d8:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     1da:	9d 93       	st	X+, r25
    ret
     1dc:	08 95       	ret

000001de <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     1de:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     1e0:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     1e2:	cf 93       	push	r28

000001e4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     1e4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     1e6:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
     1e8:	e9 f7       	brne	.-6      	; 0x1e4 <waitForJ>

000001ea <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     1ea:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1ee:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1f2:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1f6:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <foundK>
    sbis    USBIN, USBMINUS
     1fa:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     1fe:	a3 c0       	rjmp	.+326    	; 0x346 <sofError>

00000200 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     200:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     202:	c0 91 99 00 	lds	r28, 0x0099	; 0x800099 <usbInputBufOffset>
    clr     YH                  ;1 [5]
     206:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     208:	c0 56       	subi	r28, 0x60	; 96
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     20a:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     20c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
     20e:	02 c0       	rjmp	.+4      	; 0x214 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
     210:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
     212:	eb cf       	rjmp	.-42     	; 0x1ea <waitForK>

00000214 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     214:	2f 93       	push	r18
    push    x1              ;2 [12]
     216:	0f 93       	push	r16
    push    x2              ;2 [14]
     218:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     21a:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
     21c:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     21e:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
     220:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     222:	4f 93       	push	r20
    push    cnt             ;2 [24]
     224:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     226:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
     228:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     22a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     22c:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
     22e:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     230:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     232:	31 c0       	rjmp	.+98     	; 0x296 <rxbit2>

00000234 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     234:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     236:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     238:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
     23a:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     23c:	28 c0       	rjmp	.+80     	; 0x28e <didUnstuff0>

0000023e <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     23e:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     240:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     242:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     244:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     246:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
     248:	29 c0       	rjmp	.+82     	; 0x29c <didUnstuff1>

0000024a <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     24a:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     24c:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     24e:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     250:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     252:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
     254:	2b c0       	rjmp	.+86     	; 0x2ac <didUnstuff2>

00000256 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     256:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
     258:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     25a:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     25c:	2a c0       	rjmp	.+84     	; 0x2b2 <didUnstuff3>

0000025e <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     25e:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     260:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
     262:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     264:	2c c0       	rjmp	.+88     	; 0x2be <didUnstuff4>

00000266 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     266:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     268:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
     26a:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     26c:	2f c0       	rjmp	.+94     	; 0x2cc <didUnstuff5>

0000026e <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     26e:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     270:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
     272:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     274:	32 c0       	rjmp	.+100    	; 0x2da <didUnstuff6>

00000276 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     276:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     278:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
     27a:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     27c:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     27e:	00 00       	nop
    eor     x2, x1      ;1 [6]
     280:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     282:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
     284:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     286:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
     288:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
     28a:	c9 f1       	breq	.+114    	; 0x2fe <se0>
    andi    shift, 0xf9 ;1 [12]
     28c:	29 7f       	andi	r18, 0xF9	; 249

0000028e <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     28e:	91 f2       	breq	.-92     	; 0x234 <unstuff0>
    eor     x1, x2      ;1 [14]
     290:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     292:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
     294:	21 f9       	bld	r18, 1

00000296 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     296:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
     298:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     29a:	89 f2       	breq	.-94     	; 0x23e <unstuff1>

0000029c <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     29c:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     29e:	58 f1       	brcs	.+86     	; 0x2f6 <overflow>
    eor     x2, x1      ;1 [22]
     2a0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     2a2:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
     2a4:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     2a6:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
     2a8:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     2aa:	79 f2       	breq	.-98     	; 0x24a <unstuff2>

000002ac <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     2ac:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     2ae:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
     2b0:	23 f9       	bld	r18, 3

000002b2 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     2b2:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     2b4:	81 f2       	breq	.-96     	; 0x256 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     2b6:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
     2b8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     2ba:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
     2bc:	24 f9       	bld	r18, 4

000002be <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     2be:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     2c0:	71 f2       	breq	.-100    	; 0x25e <unstuff4>
    nop2                ;2 [40]
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     2c4:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
     2c6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     2c8:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
     2ca:	25 f9       	bld	r18, 5

000002cc <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     2cc:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     2ce:	59 f2       	breq	.-106    	; 0x266 <unstuff5>
    nop2                ;2 [48]
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     2d2:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
     2d4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     2d6:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
     2d8:	26 f9       	bld	r18, 6

000002da <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     2da:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     2dc:	40 f2       	brcs	.-112    	; 0x26e <unstuff6>
    nop2                ;2 [56]
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     2e0:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
     2e2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     2e4:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
     2e6:	27 f9       	bld	r18, 7

000002e8 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     2e8:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     2ea:	28 f6       	brcc	.-118    	; 0x276 <rxLoop>

000002ec <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     2ec:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     2ee:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     2f0:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
     2f2:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     2f4:	f9 cf       	rjmp	.-14     	; 0x2e8 <didUnstuff7>

000002f6 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     2f6:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     2f8:	1a bf       	out	0x3a, r17	; 58

000002fa <ignorePacket>:
ignorePacket:
    clr     token
     2fa:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     2fc:	19 c0       	rjmp	.+50     	; 0x330 <handleSetupOrOut>

000002fe <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     2fe:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     300:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     302:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     304:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     306:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     308:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     30a:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     30c:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     30e:	f9 f0       	breq	.+62     	; 0x34e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     310:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     312:	e9 f0       	breq	.+58     	; 0x34e <handleData>
    lds     shift, usbDeviceAddr;[17]
     314:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     318:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     31a:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     31c:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     31e:	ed cf       	rjmp	.-38     	; 0x2fa <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     320:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     322:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     324:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     326:	41 f1       	breq	.+80     	; 0x378 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     328:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     32a:	11 f0       	breq	.+4      	; 0x330 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     32c:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     32e:	29 f7       	brne	.-54     	; 0x2fa <ignorePacket>

00000330 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     330:	00 93 9e 00 	sts	0x009E, r16	; 0x80009e <usbCurrentTok>

00000334 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     334:	3f 91       	pop	r19
     336:	4f 91       	pop	r20
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	2f 91       	pop	r18
     33e:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
     340:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     342:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     344:	4f cf       	rjmp	.-354    	; 0x1e4 <waitForJ>

00000346 <sofError>:
sofError:
    POP_RETI                    ;macro call
     346:	cf 91       	pop	r28
     348:	cf bf       	out	0x3f, r28	; 63
     34a:	cf 91       	pop	r28
    reti
     34c:	18 95       	reti

0000034e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     34e:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <usbCurrentTok>
    tst     shift               ;[20]
     352:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     354:	79 f3       	breq	.-34     	; 0x334 <doReturn>
    lds     x2, usbRxLen        ;[22]
     356:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <usbRxLen>
    tst     x2                  ;[24]
     35a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     35c:	69 f5       	brne	.+90     	; 0x3b8 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     35e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     360:	6a f1       	brmi	.+90     	; 0x3bc <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     362:	30 93 9c 00 	sts	0x009C, r19	; 0x80009c <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     366:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     36a:	10 91 99 00 	lds	r17, 0x0099	; 0x800099 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     36e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     370:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     372:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     376:	22 c0       	rjmp	.+68     	; 0x3bc <sendAckAndReti>

00000378 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     378:	00 91 9c 00 	lds	r16, 0x009C	; 0x80009c <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     37c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     37e:	e4 f4       	brge	.+56     	; 0x3b8 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     380:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     382:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     384:	49 f4       	brne	.+18     	; 0x398 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     386:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     38a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     38c:	19 c0       	rjmp	.+50     	; 0x3c0 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     38e:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     392:	c0 e8       	ldi	r28, 0x80	; 128
    ldi     YH, hi8(usbTxBuf)   ;[44]
     394:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <usbSendAndReti>

00000398 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     398:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     39c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     39e:	10 c0       	rjmp	.+32     	; 0x3c0 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     3a0:	00 93 8b 00 	sts	0x008B, r16	; 0x80008b <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     3a4:	cc e8       	ldi	r28, 0x8C	; 140
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <usbSendAndReti>

000003aa <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
     3aa:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
     3ac:	a8 f4       	brcc	.+42     	; 0x3d8 <doExorN1>
    subi    x4, 1               ;[-3]
     3ae:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
     3b0:	a9 f4       	brne	.+42     	; 0x3dc <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
     3b2:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
     3b4:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <stuffN1Delay>

000003b8 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     3b8:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <usbSendX3>

000003bc <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     3bc:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <usbSendX3>

000003c0 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     3c0:	43 2f       	mov	r20, r19

000003c2 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     3c2:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     3c6:	32 e0       	ldi	r19, 0x02	; 2

000003c8 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
     3c8:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
     3ca:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     3cc:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
     3ce:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
     3d0:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
     3d2:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
     3d4:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
     3d6:	5f 93       	push	r21

000003d8 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
     3d8:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
     3da:	56 e0       	ldi	r21, 0x06	; 6

000003dc <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
     3dc:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
     3de:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
     3e0:	20 f4       	brcc	.+8      	; 0x3ea <doExorN2>
    subi    x4, 1               ;[03]
     3e2:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
     3e4:	21 f4       	brne	.+8      	; 0x3ee <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
     3e6:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
     3e8:	f9 cf       	rjmp	.-14     	; 0x3dc <commonN1>

000003ea <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
     3ea:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
     3ec:	56 e0       	ldi	r21, 0x06	; 6

000003ee <commonN2>:
commonN2:
    nop                         ;[06] [14]
     3ee:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
     3f0:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
     3f2:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
     3f4:	d0 f2       	brcs	.-76     	; 0x3aa <stuffN1Delay>

000003f6 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
     3f6:	27 95       	ror	r18
    brcc    doExor6             ;[43]
     3f8:	28 f4       	brcc	.+10     	; 0x404 <doExor6>
    subi    x4, 1               ;[44]
     3fa:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
     3fc:	29 f4       	brne	.+10     	; 0x408 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
     3fe:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
     400:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
     402:	f9 cf       	rjmp	.-14     	; 0x3f6 <stuff6Delay>

00000404 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
     404:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
     406:	56 e0       	ldi	r21, 0x06	; 6

00000408 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
     408:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
     40a:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
     40c:	20 f4       	brcc	.+8      	; 0x416 <doExor7>
    subi    x4, 1               ;[50]
     40e:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
     410:	21 f4       	brne	.+8      	; 0x41a <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
     412:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
     414:	f9 cf       	rjmp	.-14     	; 0x408 <common6>

00000416 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
     416:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
     418:	56 e0       	ldi	r21, 0x06	; 6

0000041a <common7>:
common7:
    ld      shift, y+           ;[53]
     41a:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
     41c:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
     41e:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
     420:	21 f6       	brne	.-120    	; 0x3aa <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     422:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
     424:	10 91 9d 00 	lds	r17, 0x009D	; 0x80009d <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
     428:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
     42a:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
     42c:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     42e:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
     430:	11 f0       	breq	.+4      	; 0x436 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
     432:	10 93 97 00 	sts	0x0097, r17	; 0x800097 <usbDeviceAddr>

00000436 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
     436:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
     438:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
     43a:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
     43c:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
     43e:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
     440:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
     442:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
     444:	5f 91       	pop	r21
    nop2                        ;[12]
     446:	00 c0       	rjmp	.+0      	; 0x448 <skipAddrAssign+0x12>
    nop2                        ;[14]
     448:	00 c0       	rjmp	.+0      	; 0x44a <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
     44a:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
     44c:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
     44e:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
     450:	71 cf       	rjmp	.-286    	; 0x334 <doReturn>

00000452 <App_OrderMouse>:
	if( sensor_S>LOW_CALIBRATED && sensor_G>LOW_CALIBRATED && sensor_A>LOW_CALIBRATED && sensor_M>LOW_CALIBRATED )
	{
		return CALIBRATED;
	}
	return NOT_CALIBRATED;
}
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	87 30       	cpi	r24, 0x07	; 7
     456:	91 05       	cpc	r25, r1
     458:	f8 f4       	brcc	.+62     	; 0x498 <App_OrderMouse+0x46>
     45a:	fc 01       	movw	r30, r24
     45c:	e6 5d       	subi	r30, 0xD6	; 214
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__tablejump2__>
     464:	0e 94 05 06 	call	0xc0a	; 0xc0a <Mouse_MoveLeft>
     468:	08 95       	ret
     46a:	0e 94 09 06 	call	0xc12	; 0xc12 <Mouse_MoveRight>
     46e:	08 95       	ret
     470:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Mouse_MoveUp>
     474:	08 95       	ret
     476:	0e 94 11 06 	call	0xc22	; 0xc22 <Mouse_MoveDown>
     47a:	08 95       	ret
     47c:	0e 94 19 06 	call	0xc32	; 0xc32 <Mouse_LeftClick>
     480:	08 95       	ret
     482:	0e 94 15 06 	call	0xc2a	; 0xc2a <Mouse_RightClick>
     486:	08 95       	ret
     488:	0e 94 19 06 	call	0xc32	; 0xc32 <Mouse_LeftClick>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 48 05 	call	0xa90	; 0xa90 <Delay_ms_independent>
     494:	0e 94 19 06 	call	0xc32	; 0xc32 <Mouse_LeftClick>
     498:	08 95       	ret

0000049a <App_GetTouchSensorState>:
     49a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a2:	0e 94 22 06 	call	0xc44	; 0xc44 <Touch_Read>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	51 f4       	brne	.+20     	; 0x4be <App_GetTouchSensorState+0x24>
     4aa:	8b b3       	in	r24, 0x1b	; 27
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	0e 94 80 05 	call	0xb00	; 0xb00 <LED_TurnOn>
     4b2:	8b b3       	in	r24, 0x1b	; 27
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	0e 94 83 05 	call	0xb06	; 0xb06 <LED_TurnOff>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret
     4be:	8b b3       	in	r24, 0x1b	; 27
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	0e 94 83 05 	call	0xb06	; 0xb06 <LED_TurnOff>
     4c6:	8b b3       	in	r24, 0x1b	; 27
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	0e 94 80 05 	call	0xb00	; 0xb00 <LED_TurnOn>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <App_SetReference>:
     4d2:	cf 93       	push	r28
     4d4:	0e 94 4d 02 	call	0x49a	; 0x49a <App_GetTouchSensorState>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	71 f4       	brne	.+28     	; 0x4f8 <App_SetReference+0x26>
     4dc:	80 ed       	ldi	r24, 0xD0	; 208
     4de:	97 e0       	ldi	r25, 0x07	; 7
     4e0:	0e 94 48 05 	call	0xa90	; 0xa90 <Delay_ms_independent>
     4e4:	0e 94 4d 02 	call	0x49a	; 0x49a <App_GetTouchSensorState>
     4e8:	c8 2f       	mov	r28, r24
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	39 f4       	brne	.+14     	; 0x4fc <App_SetReference+0x2a>
     4ee:	80 e7       	ldi	r24, 0x70	; 112
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 a2 04 	call	0x944	; 0x944 <BNO055_ReadEulerAngles>
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <App_SetReference+0x2c>
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <App_SetReference+0x2c>
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	8c 2f       	mov	r24, r28
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <App_Init>:
     504:	8b b3       	in	r24, 0x1b	; 27
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_Init>
     50c:	8b b3       	in	r24, 0x1b	; 27
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 80 05 	call	0xb00	; 0xb00 <LED_TurnOn>
     514:	8b b3       	in	r24, 0x1b	; 27
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_Init>
     51c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <BNO055_Init>
     520:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Mouse_init>
     524:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     528:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     52c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Touch_Init>
     530:	0e 94 69 02 	call	0x4d2	; 0x4d2 <App_SetReference>
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	e1 f7       	brne	.-8      	; 0x530 <App_Init+0x2c>
     538:	08 95       	ret

0000053a <App_GetLargestAngle>:
 * Ex: index = App_GetLargestAngle(54,21,100); -> index=3
 */
u8_t App_GetLargestAngle(s16_t value1,s16_t value2,s16_t value3)
{ // yaw roll pitch
	
	if (value1 > 180) value1-=360;
     53a:	85 3b       	cpi	r24, 0xB5	; 181
     53c:	91 05       	cpc	r25, r1
     53e:	14 f0       	brlt	.+4      	; 0x544 <App_GetLargestAngle+0xa>
     540:	88 56       	subi	r24, 0x68	; 104
     542:	91 40       	sbci	r25, 0x01	; 1
	if (value2 > 180) value2-=360;
     544:	65 3b       	cpi	r22, 0xB5	; 181
     546:	71 05       	cpc	r23, r1
     548:	14 f0       	brlt	.+4      	; 0x54e <App_GetLargestAngle+0x14>
     54a:	68 56       	subi	r22, 0x68	; 104
     54c:	71 40       	sbci	r23, 0x01	; 1
	if (value3 > 180) value3-=360;
     54e:	45 3b       	cpi	r20, 0xB5	; 181
     550:	51 05       	cpc	r21, r1
     552:	14 f0       	brlt	.+4      	; 0x558 <App_GetLargestAngle+0x1e>
     554:	48 56       	subi	r20, 0x68	; 104
     556:	51 40       	sbci	r21, 0x01	; 1
	
	value1 = abs(value1);
     558:	9c 01       	movw	r18, r24
     55a:	99 23       	and	r25, r25
     55c:	24 f4       	brge	.+8      	; 0x566 <App_GetLargestAngle+0x2c>
     55e:	22 27       	eor	r18, r18
     560:	33 27       	eor	r19, r19
     562:	28 1b       	sub	r18, r24
     564:	39 0b       	sbc	r19, r25
	value2 = abs(value2);
     566:	cb 01       	movw	r24, r22
     568:	99 23       	and	r25, r25
     56a:	24 f4       	brge	.+8      	; 0x574 <App_GetLargestAngle+0x3a>
     56c:	88 27       	eor	r24, r24
     56e:	99 27       	eor	r25, r25
     570:	86 1b       	sub	r24, r22
     572:	97 0b       	sbc	r25, r23
	value3 = abs(value3);
     574:	ba 01       	movw	r22, r20
     576:	55 23       	and	r21, r21
     578:	24 f4       	brge	.+8      	; 0x582 <App_GetLargestAngle+0x48>
     57a:	66 27       	eor	r22, r22
     57c:	77 27       	eor	r23, r23
     57e:	64 1b       	sub	r22, r20
     580:	75 0b       	sbc	r23, r21
	
	if(value1 > value2)
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	2c f4       	brge	.+10     	; 0x592 <App_GetLargestAngle+0x58>
	{
		if(value1 > value3)   { return 1; }
     588:	62 17       	cp	r22, r18
     58a:	73 07       	cpc	r23, r19
     58c:	3c f4       	brge	.+14     	; 0x59c <App_GetLargestAngle+0x62>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	08 95       	ret
		else          { return 3; }
	}
	else
	{
		if(value2 > value3)   { return 2; }
     592:	68 17       	cp	r22, r24
     594:	79 07       	cpc	r23, r25
     596:	24 f4       	brge	.+8      	; 0x5a0 <App_GetLargestAngle+0x66>
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	08 95       	ret
	value3 = abs(value3);
	
	if(value1 > value2)
	{
		if(value1 > value3)   { return 1; }
		else          { return 3; }
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	08 95       	ret
	}
	else
	{
		if(value2 > value3)   { return 2; }
		else          { return 3; }
     5a0:	83 e0       	ldi	r24, 0x03	; 3
	}
     5a2:	08 95       	ret

000005a4 <App_GetImuGradient>:
 * Args: None
 * Return: u8_t gradient_Direction -> (LEFT, RIGHT, UP, DOWN)
 * Ex: u8_t direction = App_GetImuGradient();
 */
u8_t App_GetImuGradient(void)
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <App_GetImuGradient+0x6>
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <App_GetImuGradient+0x8>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <App_GetImuGradient+0xa>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	s16_t absolute_gradient[3]; // current_reading - reference_point
	//-- get current imu reading
	BNO055_ReadEulerAngles(current_reading);
     5b2:	8a e6       	ldi	r24, 0x6A	; 106
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 a2 04 	call	0x944	; 0x944 <BNO055_ReadEulerAngles>
	//-- compare this reading to calibration point to know imu (head) gradient
	absolute_gradient[0] = current_reading[0] - reference_angles[0];
     5ba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     5be:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
     5c2:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <reference_angles>
     5c6:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <reference_angles+0x1>
     5ca:	82 1b       	sub	r24, r18
     5cc:	93 0b       	sbc	r25, r19
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	89 83       	std	Y+1, r24	; 0x01
	if (absolute_gradient[0] < 0 ){
     5d2:	99 23       	and	r25, r25
     5d4:	24 f4       	brge	.+8      	; 0x5de <App_GetImuGradient+0x3a>
		absolute_gradient[0] +=360;
     5d6:	88 59       	subi	r24, 0x98	; 152
     5d8:	9e 4f       	sbci	r25, 0xFE	; 254
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
	}
	absolute_gradient[1] = current_reading[1] - reference_angles[1];
     5de:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end+0x2>
     5e2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x3>
     5e6:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <reference_angles+0x2>
     5ea:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <reference_angles+0x3>
     5ee:	82 1b       	sub	r24, r18
     5f0:	93 0b       	sbc	r25, r19
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
	if (absolute_gradient[1] < 0 ){
     5f6:	99 23       	and	r25, r25
     5f8:	24 f4       	brge	.+8      	; 0x602 <App_GetImuGradient+0x5e>
		absolute_gradient[1] +=360;
     5fa:	88 59       	subi	r24, 0x98	; 152
     5fc:	9e 4f       	sbci	r25, 0xFE	; 254
     5fe:	9c 83       	std	Y+4, r25	; 0x04
     600:	8b 83       	std	Y+3, r24	; 0x03
	}
	absolute_gradient[2] = current_reading[2] - reference_angles[2];
     602:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x4>
     606:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x5>
     60a:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <reference_angles+0x4>
     60e:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <reference_angles+0x5>
     612:	82 1b       	sub	r24, r18
     614:	93 0b       	sbc	r25, r19
     616:	9e 83       	std	Y+6, r25	; 0x06
     618:	8d 83       	std	Y+5, r24	; 0x05
	if (absolute_gradient[2] < 0 ){
     61a:	99 23       	and	r25, r25
     61c:	24 f4       	brge	.+8      	; 0x626 <App_GetImuGradient+0x82>
		absolute_gradient[2] +=360;
     61e:	88 59       	subi	r24, 0x98	; 152
     620:	9e 4f       	sbci	r25, 0xFE	; 254
     622:	9e 83       	std	Y+6, r25	; 0x06
     624:	8d 83       	std	Y+5, r24	; 0x05
	}
	//-- decide depending on calculations to which direction mouse should move
	// get the largest angle of them (sign isn't considered)
	u8_t angle_name = App_GetLargestAngle(absolute_gradient[0],absolute_gradient[1],absolute_gradient[2]);
     626:	4d 81       	ldd	r20, Y+5	; 0x05
     628:	5e 81       	ldd	r21, Y+6	; 0x06
     62a:	6b 81       	ldd	r22, Y+3	; 0x03
     62c:	7c 81       	ldd	r23, Y+4	; 0x04
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	0e 94 9d 02 	call	0x53a	; 0x53a <App_GetLargestAngle>
	
	// change period to set cursor speed
	switch (absolute_gradient[angle_name-1])
     636:	e8 2f       	mov	r30, r24
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	2c 0f       	add	r18, r28
     646:	3d 1f       	adc	r19, r29
     648:	e2 0f       	add	r30, r18
     64a:	f3 1f       	adc	r31, r19
     64c:	20 81       	ld	r18, Z
     64e:	31 81       	ldd	r19, Z+1	; 0x01
     650:	2b 35       	cpi	r18, 0x5B	; 91
     652:	31 05       	cpc	r19, r1
     654:	6c f4       	brge	.+26     	; 0x670 <App_GetImuGradient+0xcc>
     656:	2c 34       	cpi	r18, 0x4C	; 76
     658:	31 05       	cpc	r19, r1
     65a:	a4 f5       	brge	.+104    	; 0x6c4 <App_GetImuGradient+0x120>
     65c:	23 33       	cpi	r18, 0x33	; 51
     65e:	31 05       	cpc	r19, r1
     660:	54 f5       	brge	.+84     	; 0x6b6 <App_GetImuGradient+0x112>
     662:	24 32       	cpi	r18, 0x24	; 36
     664:	31 05       	cpc	r19, r1
     666:	04 f5       	brge	.+64     	; 0x6a8 <App_GetImuGradient+0x104>
     668:	24 31       	cpi	r18, 0x14	; 20
     66a:	31 05       	cpc	r19, r1
     66c:	8c f1       	brlt	.+98     	; 0x6d0 <App_GetImuGradient+0x12c>
     66e:	15 c0       	rjmp	.+42     	; 0x69a <App_GetImuGradient+0xf6>
     670:	26 33       	cpi	r18, 0x36	; 54
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	39 07       	cpc	r19, r25
     676:	4c f4       	brge	.+18     	; 0x68a <App_GetImuGradient+0xe6>
     678:	2d 31       	cpi	r18, 0x1D	; 29
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	39 07       	cpc	r19, r25
     67e:	dc f4       	brge	.+54     	; 0x6b6 <App_GetImuGradient+0x112>
     680:	2e 30       	cpi	r18, 0x0E	; 14
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	39 07       	cpc	r19, r25
     686:	f4 f4       	brge	.+60     	; 0x6c4 <App_GetImuGradient+0x120>
     688:	23 c0       	rjmp	.+70     	; 0x6d0 <App_GetImuGradient+0x12c>
     68a:	25 34       	cpi	r18, 0x45	; 69
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	39 07       	cpc	r19, r25
     690:	5c f0       	brlt	.+22     	; 0x6a8 <App_GetImuGradient+0x104>
     692:	25 35       	cpi	r18, 0x55	; 85
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	39 07       	cpc	r19, r25
     698:	dc f4       	brge	.+54     	; 0x6d0 <App_GetImuGradient+0x12c>
	{
		// 20 -> threshold
		case 20 ... 35:
		case 325 ... 340:
		cursor_speed = 1;
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <cursor_speed+0x1>
     6a2:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <cursor_speed>
		break;
     6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <App_GetImuGradient+0x12c>
		case 36 ... 50:
		case 310 ... 324:
		cursor_speed = 3;
     6a8:	43 e0       	ldi	r20, 0x03	; 3
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <cursor_speed+0x1>
     6b0:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <cursor_speed>
		break;
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <App_GetImuGradient+0x12c>
		case 51 ... 75: // larger than 60
		case 285 ... 309:
		cursor_speed = 5;
     6b6:	45 e0       	ldi	r20, 0x05	; 5
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <cursor_speed+0x1>
     6be:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <cursor_speed>
		break;
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <App_GetImuGradient+0x12c>
		case 76 ... 90: // larger than 60
		case 270 ... 284:
		cursor_speed = 7;
     6c4:	47 e0       	ldi	r20, 0x07	; 7
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <cursor_speed+0x1>
     6cc:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <cursor_speed>
		break;
	}
	if (absolute_gradient[angle_name-1] < THRESHOLD || absolute_gradient[angle_name-1] > 360 - THRESHOLD){
     6d0:	24 51       	subi	r18, 0x14	; 20
     6d2:	31 09       	sbc	r19, r1
     6d4:	21 34       	cpi	r18, 0x41	; 65
     6d6:	31 40       	sbci	r19, 0x01	; 1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <App_GetImuGradient+0x138>
		angle_name = STOP;
     6da:	88 e0       	ldi	r24, 0x08	; 8
	}
	// take action on mouse according to angle
	switch(angle_name)
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	a1 f0       	breq	.+40     	; 0x708 <App_GetImuGradient+0x164>
     6e0:	20 f4       	brcc	.+8      	; 0x6ea <App_GetImuGradient+0x146>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <App_GetImuGradient+0x144>
     6e6:	80 c0       	rjmp	.+256    	; 0x7e8 <App_GetImuGradient+0x244>
     6e8:	a9 c0       	rjmp	.+338    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     6ea:	83 30       	cpi	r24, 0x03	; 3
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <App_GetImuGradient+0x14c>
     6ee:	53 c0       	rjmp	.+166    	; 0x796 <App_GetImuGradient+0x1f2>
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <App_GetImuGradient+0x152>
     6f4:	a3 c0       	rjmp	.+326    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	{
		case STOP:
		//-- no head motion
		RIGHT_CLICK_FLAG = ENABLED;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
		LEFT_CLICK_FLAG = ENABLED;
     6fc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
		DL_FLAG = ENABLED;
     700:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
		return NOTHING;
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	a3 c0       	rjmp	.+326    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		break;
		// head is turned around X-axis (RIGHT_CLICK, LEFT_CLICK, DOUBLE_LEFT_CLICK)
		case ROLL:
		// angle > threshold?
		// angle range [20:180]
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180 && RIGHT_CLICK_FLAG)
     708:	e8 2f       	mov	r30, r24
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	2c 0f       	add	r18, r28
     718:	3d 1f       	adc	r19, r29
     71a:	e2 0f       	add	r30, r18
     71c:	f3 1f       	adc	r31, r19
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	9c 01       	movw	r18, r24
     724:	24 51       	subi	r18, 0x14	; 20
     726:	31 09       	sbc	r19, r1
     728:	20 3a       	cpi	r18, 0xA0	; 160
     72a:	31 05       	cpc	r19, r1
     72c:	68 f4       	brcc	.+26     	; 0x748 <App_GetImuGradient+0x1a4>
     72e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <RIGHT_CLICK_FLAG>
     732:	22 23       	and	r18, r18
     734:	49 f0       	breq	.+18     	; 0x748 <App_GetImuGradient+0x1a4>
		{
			// disable flag to stop sending this signal multiple times
			RIGHT_CLICK_FLAG = DISABLED;
     736:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <RIGHT_CLICK_FLAG>
			// enable left click
			LEFT_CLICK_FLAG = ENABLED;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
			// enable double left flag
			DL_FLAG = ENABLED;
     740:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
			return RIGHT_CLICK;
     744:	85 e0       	ldi	r24, 0x05	; 5
     746:	83 c0       	rjmp	.+262    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			
		}
		
		// angle in range [320:360] -> left click
		else if ((absolute_gradient[angle_name-1] > 360-(THRESHOLD+40)) && (absolute_gradient[angle_name-1] < 360 - THRESHOLD) && LEFT_CLICK_FLAG)
     748:	9c 01       	movw	r18, r24
     74a:	2d 52       	subi	r18, 0x2D	; 45
     74c:	31 40       	sbci	r19, 0x01	; 1
     74e:	27 32       	cpi	r18, 0x27	; 39
     750:	31 05       	cpc	r19, r1
     752:	68 f4       	brcc	.+26     	; 0x76e <App_GetImuGradient+0x1ca>
     754:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <LEFT_CLICK_FLAG>
     758:	22 23       	and	r18, r18
     75a:	49 f0       	breq	.+18     	; 0x76e <App_GetImuGradient+0x1ca>
		{
			// enable right click
			RIGHT_CLICK_FLAG = ENABLED;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
			// disable flag to stop sending this signal multiple times
			LEFT_CLICK_FLAG = DISABLED;
     762:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <LEFT_CLICK_FLAG>
			// enable double left flag
			DL_FLAG = ENABLED;
     766:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
			return LEFT_CLICK;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	70 c0       	rjmp	.+224    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		}
		// angle in range [180:320] -> double left click
		else if((absolute_gradient[angle_name-1] > 180) && (absolute_gradient[angle_name-1] < 300) && DL_FLAG )
     76e:	85 5b       	subi	r24, 0xB5	; 181
     770:	91 09       	sbc	r25, r1
     772:	87 37       	cpi	r24, 0x77	; 119
     774:	91 05       	cpc	r25, r1
     776:	08 f0       	brcs	.+2      	; 0x77a <App_GetImuGradient+0x1d6>
     778:	63 c0       	rjmp	.+198    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     77a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <DL_FLAG>
     77e:	88 23       	and	r24, r24
     780:	09 f4       	brne	.+2      	; 0x784 <App_GetImuGradient+0x1e0>
     782:	60 c0       	rjmp	.+192    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{
			DL_FLAG = DISABLED;
     784:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <DL_FLAG>
			LEFT_CLICK_FLAG = DISABLED;
     788:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <LEFT_CLICK_FLAG>
			RIGHT_CLICK_FLAG = ENABLED;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
			return DOUBLE_LEFT_CLICK;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	5c c0       	rjmp	.+184    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		break;
		// head is turned around Y-axis (UP, DOWN)
		case PITCH:
		// enable flags so the signal can be sent again
		// angle range [20:180]
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
     796:	e8 2f       	mov	r30, r24
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	8c 0f       	add	r24, r28
     7a6:	9d 1f       	adc	r25, r29
     7a8:	e8 0f       	add	r30, r24
     7aa:	f9 1f       	adc	r31, r25
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	9c 01       	movw	r18, r24
     7b2:	24 51       	subi	r18, 0x14	; 20
     7b4:	31 09       	sbc	r19, r1
     7b6:	20 3a       	cpi	r18, 0xA0	; 160
     7b8:	31 05       	cpc	r19, r1
     7ba:	48 f4       	brcc	.+18     	; 0x7ce <App_GetImuGradient+0x22a>
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return UP; }
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     7c2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     7c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	40 c0       	rjmp	.+128    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		// angle range [180:360]
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
     7ce:	85 5b       	subi	r24, 0xB5	; 181
     7d0:	91 09       	sbc	r25, r1
     7d2:	8f 39       	cpi	r24, 0x9F	; 159
     7d4:	91 05       	cpc	r25, r1
     7d6:	c0 f5       	brcc	.+112    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return DOWN; }
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     7de:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     7e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     7e6:	33 c0       	rjmp	.+102    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		return NOTHING;
		break;
		// head is turned around Z-axis (Left, Right)
		case YAW:
		// enable flags so the signal can be sent again
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
     7e8:	e8 2f       	mov	r30, r24
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	2c 0f       	add	r18, r28
     7f8:	3d 1f       	adc	r19, r29
     7fa:	e2 0f       	add	r30, r18
     7fc:	f3 1f       	adc	r31, r19
     7fe:	80 81       	ld	r24, Z
     800:	91 81       	ldd	r25, Z+1	; 0x01
     802:	9c 01       	movw	r18, r24
     804:	24 51       	subi	r18, 0x14	; 20
     806:	31 09       	sbc	r19, r1
     808:	20 3a       	cpi	r18, 0xA0	; 160
     80a:	31 05       	cpc	r19, r1
     80c:	48 f4       	brcc	.+18     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return RIGHT; }
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     814:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     818:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	17 c0       	rjmp	.+46     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
     820:	85 5b       	subi	r24, 0xB5	; 181
     822:	91 09       	sbc	r25, r1
     824:	8f 39       	cpi	r24, 0x9F	; 159
     826:	91 05       	cpc	r25, r1
     828:	88 f4       	brcc	.+34     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return LEFT; }
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     830:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     834:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		return NOTHING;
		break;

	}
	//-- no head motion
	return NOTHING;
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	07 c0       	rjmp	.+14     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			DL_FLAG = DISABLED;
			LEFT_CLICK_FLAG = DISABLED;
			RIGHT_CLICK_FLAG = ENABLED;
			return DOUBLE_LEFT_CLICK;
		}
		return NOTHING;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	05 c0       	rjmp	.+10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	03 c0       	rjmp	.+6      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return UP; }
		// angle range [180:360]
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return DOWN; }
		return NOTHING;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	01 c0       	rjmp	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		// enable flags so the signal can be sent again
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return RIGHT; }
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return LEFT; }
		return NOTHING;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
		break;

	}
	//-- no head motion
	return NOTHING;
}
     84e:	26 96       	adiw	r28, 0x06	; 6
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <BNO055_WriteByte>:
	  BNO055_SetMagOffsets(bias.MAG_OFFSET);
	  BNO055_SetMagRadius(bias.MAG_RADIUS);
	  BNO055_SetAccRadius(bias.ACCEL_RADIUS);
	  BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, NDOF);
	  
}
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	c8 2f       	mov	r28, r24
     868:	16 2f       	mov	r17, r22
     86a:	d4 2f       	mov	r29, r20
     86c:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_Master_Start>
     870:	81 2f       	mov	r24, r17
     872:	0e 94 43 07 	call	0xe86	; 0xe86 <I2C_Master_Write>
     876:	8d 2f       	mov	r24, r29
     878:	0e 94 43 07 	call	0xe86	; 0xe86 <I2C_Master_Write>
     87c:	8c 2f       	mov	r24, r28
     87e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <I2C_Repeated_Start>
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	08 95       	ret

0000088a <BNO055_ReadByte>:
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	c8 2f       	mov	r28, r24
     890:	d6 2f       	mov	r29, r22
     892:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_Master_Start>
     896:	8d 2f       	mov	r24, r29
     898:	0e 94 43 07 	call	0xe86	; 0xe86 <I2C_Master_Write>
     89c:	8c 2f       	mov	r24, r28
     89e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <I2C_Repeated_Start>
     8a2:	0e 94 81 07 	call	0xf02	; 0xf02 <I2C_Read_Ack>
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <BNO055_ReadBytes>:
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	c8 2f       	mov	r28, r24
     8ba:	16 2f       	mov	r17, r22
     8bc:	d4 2f       	mov	r29, r20
     8be:	79 01       	movw	r14, r18
     8c0:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_Master_Start>
     8c4:	81 2f       	mov	r24, r17
     8c6:	0e 94 43 07 	call	0xe86	; 0xe86 <I2C_Master_Write>
     8ca:	8c 2f       	mov	r24, r28
     8cc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <I2C_Repeated_Start>
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <BNO055_ReadBytes+0x38>
     8d4:	87 01       	movw	r16, r14
     8d6:	0c 0f       	add	r16, r28
     8d8:	11 1d       	adc	r17, r1
     8da:	0e 94 81 07 	call	0xf02	; 0xf02 <I2C_Read_Ack>
     8de:	f8 01       	movw	r30, r16
     8e0:	80 83       	st	Z, r24
     8e2:	cf 5f       	subi	r28, 0xFF	; 255
     8e4:	cd 17       	cp	r28, r29
     8e6:	b0 f3       	brcs	.-20     	; 0x8d4 <BNO055_ReadBytes+0x28>
     8e8:	c7 01       	movw	r24, r14
     8ea:	8d 0f       	add	r24, r29
     8ec:	91 1d       	adc	r25, r1
     8ee:	ec 01       	movw	r28, r24
     8f0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <I2C_Read_Nack>
     8f4:	88 83       	st	Y, r24
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	08 95       	ret

00000904 <BNO055_GetCalibStat>:
     904:	cf 93       	push	r28
     906:	c8 2f       	mov	r28, r24
     908:	65 e3       	ldi	r22, 0x35	; 53
     90a:	88 e2       	ldi	r24, 0x28	; 40
     90c:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
     910:	c1 11       	cpse	r28, r1
     912:	05 c0       	rjmp	.+10     	; 0x91e <BNO055_GetCalibStat+0x1a>
     914:	82 95       	swap	r24
     916:	86 95       	lsr	r24
     918:	86 95       	lsr	r24
     91a:	83 70       	andi	r24, 0x03	; 3
     91c:	11 c0       	rjmp	.+34     	; 0x940 <BNO055_GetCalibStat+0x3c>
     91e:	c1 30       	cpi	r28, 0x01	; 1
     920:	21 f4       	brne	.+8      	; 0x92a <BNO055_GetCalibStat+0x26>
     922:	80 73       	andi	r24, 0x30	; 48
     924:	82 95       	swap	r24
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	0b c0       	rjmp	.+22     	; 0x940 <BNO055_GetCalibStat+0x3c>
     92a:	c2 30       	cpi	r28, 0x02	; 2
     92c:	21 f4       	brne	.+8      	; 0x936 <BNO055_GetCalibStat+0x32>
     92e:	8c 70       	andi	r24, 0x0C	; 12
     930:	86 95       	lsr	r24
     932:	86 95       	lsr	r24
     934:	05 c0       	rjmp	.+10     	; 0x940 <BNO055_GetCalibStat+0x3c>
     936:	c3 30       	cpi	r28, 0x03	; 3
     938:	11 f4       	brne	.+4      	; 0x93e <BNO055_GetCalibStat+0x3a>
     93a:	83 70       	andi	r24, 0x03	; 3
     93c:	01 c0       	rjmp	.+2      	; 0x940 <BNO055_GetCalibStat+0x3c>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <BNO055_ReadEulerAngles>:
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <BNO055_ReadEulerAngles+0xa>
     94e:	00 d0       	rcall	.+0      	; 0x950 <BNO055_ReadEulerAngles+0xc>
     950:	00 d0       	rcall	.+0      	; 0x952 <BNO055_ReadEulerAngles+0xe>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	8c 01       	movw	r16, r24
     958:	9e 01       	movw	r18, r28
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	46 e0       	ldi	r20, 0x06	; 6
     960:	6a e1       	ldi	r22, 0x1A	; 26
     962:	88 e2       	ldi	r24, 0x28	; 40
     964:	0e 94 56 04 	call	0x8ac	; 0x8ac <BNO055_ReadBytes>
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	98 2f       	mov	r25, r24
     96e:	88 27       	eor	r24, r24
     970:	29 81       	ldd	r18, Y+1	; 0x01
     972:	82 2b       	or	r24, r18
     974:	f8 01       	movw	r30, r16
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
     97a:	8c 81       	ldd	r24, Y+4	; 0x04
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	98 2f       	mov	r25, r24
     980:	88 27       	eor	r24, r24
     982:	2b 81       	ldd	r18, Y+3	; 0x03
     984:	82 2b       	or	r24, r18
     986:	93 83       	std	Z+3, r25	; 0x03
     988:	82 83       	std	Z+2, r24	; 0x02
     98a:	8e 81       	ldd	r24, Y+6	; 0x06
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	98 2f       	mov	r25, r24
     990:	88 27       	eor	r24, r24
     992:	2d 81       	ldd	r18, Y+5	; 0x05
     994:	82 2b       	or	r24, r18
     996:	95 83       	std	Z+5, r25	; 0x05
     998:	84 83       	std	Z+4, r24	; 0x04
     99a:	26 96       	adiw	r28, 0x06	; 6
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	08 95       	ret

000009b0 <BNO055_SelfTest>:
*Function to Test the sensors see if they fail in hardware or not
*return EN_FAIL_t of the failed sensor (see BNO055.h for definition)
*		return 
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
     9b0:	66 e3       	ldi	r22, 0x36	; 54
     9b2:	88 e2       	ldi	r24, 0x28	; 40
     9b4:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
	if(!(selftest & 0x01)) {
     9b8:	80 ff       	sbrs	r24, 0
     9ba:	08 c0       	rjmp	.+16     	; 0x9cc <BNO055_SelfTest+0x1c>

		return ACCELOMETER_FAIL;                /*acc fails*/
	}
	if(!(selftest & 0x02)) {
     9bc:	81 ff       	sbrs	r24, 1
     9be:	08 c0       	rjmp	.+16     	; 0x9d0 <BNO055_SelfTest+0x20>
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
	}
	if(!(selftest & 0x04)) {
     9c0:	82 ff       	sbrs	r24, 2
     9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <BNO055_SelfTest+0x24>
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
	}
	if(!(selftest & 0x08)) {
     9c4:	83 fd       	sbrc	r24, 3
     9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <BNO055_SelfTest+0x28>
		return SYSTEM_FAIL;              /*system fails*/
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	08 95       	ret
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
	if(!(selftest & 0x01)) {

		return ACCELOMETER_FAIL;                /*acc fails*/
     9cc:	85 e0       	ldi	r24, 0x05	; 5
     9ce:	08 95       	ret
	}
	if(!(selftest & 0x02)) {
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	08 95       	ret
	}
	if(!(selftest & 0x04)) {
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
     9d4:	87 e0       	ldi	r24, 0x07	; 7
     9d6:	08 95       	ret
	}
	if(!(selftest & 0x08)) {
		return SYSTEM_FAIL;              /*system fails*/
	}

	return BNO055_SUCCESS;
     9d8:	89 e0       	ldi	r24, 0x09	; 9
}
     9da:	08 95       	ret

000009dc <BNO055_Init>:
*to speed up calibration process you can use GetOffsets and Get Radius functions and SetCalibProfile
*Functions to store calibrated offsets after every boot 
*
*/
EN_FAIL_t BNO055_Init()
{	
     9dc:	cf 93       	push	r28
	I2C_Init(OPERATION_FREQ,100000);					/*initialize i2c with frequency 100Khz*/
     9de:	40 ea       	ldi	r20, 0xA0	; 160
     9e0:	56 e8       	ldi	r21, 0x86	; 134
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	84 e0       	ldi	r24, 0x04	; 4
     9e8:	0e 94 a1 06 	call	0xd42	; 0xd42 <I2C_Init>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, CONFIGMODE );
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	6d e3       	ldi	r22, 0x3D	; 61
     9f0:	88 e2       	ldi	r24, 0x28	; 40
     9f2:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Select page 1 to configure sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_1);
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	67 e0       	ldi	r22, 0x07	; 7
     9fa:	88 e2       	ldi	r24, 0x28	; 40
     9fc:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Configure ACC
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_ACC_CONFIG, ACC_CONFIGS );
     a00:	48 e0       	ldi	r20, 0x08	; 8
     a02:	68 e0       	ldi	r22, 0x08	; 8
     a04:	88 e2       	ldi	r24, 0x28	; 40
     a06:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Configure GYR
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_0, GYRO_BW_RANGE );
     a0a:	43 e2       	ldi	r20, 0x23	; 35
     a0c:	6a e0       	ldi	r22, 0x0A	; 10
     a0e:	88 e2       	ldi	r24, 0x28	; 40
     a10:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_1, GYRO_POWER_MODE);
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	6b e0       	ldi	r22, 0x0B	; 11
     a18:	88 e2       	ldi	r24, 0x28	; 40
     a1a:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Configure MAG
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_MAG_CONFIG, MAG_CONFIGS );
     a1e:	4b e0       	ldi	r20, 0x0B	; 11
     a20:	69 e0       	ldi	r22, 0x09	; 9
     a22:	88 e2       	ldi	r24, 0x28	; 40
     a24:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Select page 0 to read sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_0);
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	88 e2       	ldi	r24, 0x28	; 40
     a2e:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Select BNO055 gyro temperature source
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_TEMP_SOURCE, 0x01 );
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	60 e4       	ldi	r22, 0x40	; 64
     a36:	88 e2       	ldi	r24, 0x28	; 40
     a38:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Select BNO055 sensor units (temperature in degrees C, rate in dps, accel in mg)
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_UNIT_SEL, SYS_UNITS );
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	6b e3       	ldi	r22, 0x3B	; 59
     a40:	88 e2       	ldi	r24, 0x28	; 40
     a42:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Select BNO055 system power mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PWR_MODE, PWR_MODE );
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	6e e3       	ldi	r22, 0x3E	; 62
     a4a:	88 e2       	ldi	r24, 0x28	; 40
     a4c:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	// Select BNO055 system operation mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, OP_MODE  );
     a50:	4c e0       	ldi	r20, 0x0C	; 12
     a52:	6d e3       	ldi	r22, 0x3D	; 61
     a54:	88 e2       	ldi	r24, 0x28	; 40
     a56:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	
	if (BNO055_SelfTest() != BNO055_SUCCESS){							/*if self test didn't pass on all sensors*/
     a5a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <BNO055_SelfTest>
     a5e:	c8 2f       	mov	r28, r24
     a60:	89 30       	cpi	r24, 0x09	; 9
     a62:	21 f0       	breq	.+8      	; 0xa6c <BNO055_Init+0x90>
		return BNO055_SelfTest();
     a64:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <BNO055_SelfTest>
     a68:	c8 2f       	mov	r28, r24
     a6a:	0f c0       	rjmp	.+30     	; 0xa8a <BNO055_Init+0xae>
	}
	while (1){
		if (BNO055_GetCalibStat(SYSTEM) > LOW_CALIBRATED && BNO055_GetCalibStat(GYROSCOPE) > LOW_CALIBRATED){
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 82 04 	call	0x904	; 0x904 <BNO055_GetCalibStat>
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	d8 f3       	brcs	.-10     	; 0xa6c <BNO055_Init+0x90>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 82 04 	call	0x904	; 0x904 <BNO055_GetCalibStat>
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	b0 f3       	brcs	.-20     	; 0xa6c <BNO055_Init+0x90>
			if(BNO055_GetCalibStat(MAGNETOMETER) > LOW_CALIBRATED )
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	0e 94 82 04 	call	0x904	; 0x904 <BNO055_GetCalibStat>
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	88 f3       	brcs	.-30     	; 0xa6c <BNO055_Init+0x90>
				break;
		}
	}
	return BNO055_SUCCESS;
}
     a8a:	8c 2f       	mov	r24, r28
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <Delay_ms_independent>:
		time_us--;
	}
}

void Delay_ms_independent(u16_t time_ms)
{
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
	u32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
     aa2:	9c 01       	movw	r18, r24
     aa4:	a8 ee       	ldi	r26, 0xE8	; 232
     aa6:	b3 e0       	ldi	r27, 0x03	; 3
     aa8:	0e 94 ce 0c 	call	0x199c	; 0x199c <__umulhisi3>
     aac:	2b ea       	ldi	r18, 0xAB	; 171
     aae:	3a ea       	ldi	r19, 0xAA	; 170
     ab0:	4a ea       	ldi	r20, 0xAA	; 170
     ab2:	5a ea       	ldi	r21, 0xAA	; 170
     ab4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__umulsidi3>
     ab8:	00 e2       	ldi	r16, 0x20	; 32
     aba:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__lshrdi3>
     abe:	82 2e       	mov	r8, r18
     ac0:	93 2e       	mov	r9, r19
     ac2:	a4 2e       	mov	r10, r20
     ac4:	b5 2e       	mov	r11, r21
     ac6:	b6 94       	lsr	r11
     ac8:	a7 94       	ror	r10
     aca:	97 94       	ror	r9
     acc:	87 94       	ror	r8
	while (num_of_ticks)
     ace:	05 c0       	rjmp	.+10     	; 0xada <Delay_ms_independent+0x4a>
	{
		num_of_ticks--;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	88 1a       	sub	r8, r24
     ad4:	91 08       	sbc	r9, r1
     ad6:	a1 08       	sbc	r10, r1
     ad8:	b1 08       	sbc	r11, r1

void Delay_ms_independent(u16_t time_ms)
{
	u32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
	while (num_of_ticks)
     ada:	81 14       	cp	r8, r1
     adc:	91 04       	cpc	r9, r1
     ade:	a1 04       	cpc	r10, r1
     ae0:	b1 04       	cpc	r11, r1
     ae2:	b1 f7       	brne	.-20     	; 0xad0 <Delay_ms_independent+0x40>
	{
		num_of_ticks--;
	}
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	08 95       	ret

00000af8 <LED_Init>:
#include "LED_interface.h"


void LED_Init(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPinDir(copy_u8Port ,copy_u8Pin, OUT );	
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_setPinDir>
     afe:	08 95       	ret

00000b00 <LED_TurnOn>:
}


void LED_TurnOn(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPin( copy_u8Port , copy_u8Pin);
     b00:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_setPin>
     b04:	08 95       	ret

00000b06 <LED_TurnOff>:
}


void LED_TurnOff(u8_t copy_u8Port , u8_t copy_u8Pin)
{
     DIO_clearPin(copy_u8Port , copy_u8Pin);
     b06:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_clearPin>
     b0a:	08 95       	ret

00000b0c <advanceCircleByFixedAngle>:
void advanceCircleByFixedAngle(void)
{
	char    d;

	#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
	reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
     b0c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <cosinus>
     b10:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <cosinus+0x1>
     b14:	14 16       	cp	r1, r20
     b16:	15 06       	cpc	r1, r21
     b18:	1c f4       	brge	.+6      	; 0xb20 <advanceCircleByFixedAngle+0x14>
     b1a:	20 e2       	ldi	r18, 0x20	; 32
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <advanceCircleByFixedAngle+0x18>
     b20:	20 ee       	ldi	r18, 0xE0	; 224
     b22:	3f ef       	ldi	r19, 0xFF	; 255
     b24:	24 0f       	add	r18, r20
     b26:	35 1f       	adc	r19, r21
     b28:	02 2e       	mov	r0, r18
     b2a:	23 2f       	mov	r18, r19
     b2c:	00 0c       	add	r0, r0
     b2e:	22 1f       	adc	r18, r18
     b30:	33 0b       	sbc	r19, r19
     b32:	00 0c       	add	r0, r0
     b34:	22 1f       	adc	r18, r18
     b36:	33 1f       	adc	r19, r19
     b38:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <reportBuffer+0x1>
	sinus += d;
     b3c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sinus>
     b40:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <sinus+0x1>
     b44:	82 0f       	add	r24, r18
     b46:	91 1d       	adc	r25, r1
     b48:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <sinus+0x1>
     b4c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sinus>
	reportBuffer.dy = d = DIVIDE_BY_64(sinus);
     b50:	18 16       	cp	r1, r24
     b52:	19 06       	cpc	r1, r25
     b54:	1c f4       	brge	.+6      	; 0xb5c <advanceCircleByFixedAngle+0x50>
     b56:	20 e2       	ldi	r18, 0x20	; 32
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <advanceCircleByFixedAngle+0x54>
     b5c:	20 ee       	ldi	r18, 0xE0	; 224
     b5e:	3f ef       	ldi	r19, 0xFF	; 255
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	08 2e       	mov	r0, r24
     b66:	89 2f       	mov	r24, r25
     b68:	00 0c       	add	r0, r0
     b6a:	88 1f       	adc	r24, r24
     b6c:	99 0b       	sbc	r25, r25
     b6e:	00 0c       	add	r0, r0
     b70:	88 1f       	adc	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <reportBuffer+0x2>
	cosinus -= d;
     b78:	48 1b       	sub	r20, r24
     b7a:	51 09       	sbc	r21, r1
     b7c:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <cosinus+0x1>
     b80:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <cosinus>
     b84:	08 95       	ret

00000b86 <usbFunctionSetup>:
}

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     b86:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     b88:	90 81       	ld	r25, Z
     b8a:	90 76       	andi	r25, 0x60	; 96
     b8c:	90 32       	cpi	r25, 0x20	; 32
     b8e:	e1 f4       	brne	.+56     	; 0xbc8 <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     b90:	81 81       	ldd	r24, Z+1	; 0x01
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	41 f4       	brne	.+16     	; 0xba6 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
     b96:	8c e7       	ldi	r24, 0x7C	; 124
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
     b9e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
            return sizeof(reportBuffer);
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	41 f4       	brne	.+16     	; 0xbba <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
     baa:	8b e7       	ldi	r24, 0x7B	; 123
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
     bb2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
            return 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     bba:	8a 30       	cpi	r24, 0x0A	; 10
     bbc:	39 f4       	brne	.+14     	; 0xbcc <usbFunctionSetup+0x46>
            idleRate = rq->wValue.bytes[1];
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret
     bcc:	80 e0       	ldi	r24, 0x00	; 0
}
     bce:	08 95       	ret

00000bd0 <Mouse_init>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     bd0:	9e e0       	ldi	r25, 0x0E	; 14
     bd2:	88 e1       	ldi	r24, 0x18	; 24
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	a8 95       	wdr
     bda:	81 bd       	out	0x21, r24	; 33
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	91 bd       	out	0x21, r25	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
     be0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
     be4:	81 b3       	in	r24, 0x11	; 17
     be6:	80 61       	ori	r24, 0x10	; 16
     be8:	81 bb       	out	0x11, r24	; 17
	
	 i = 0;
     bea:	80 e0       	ldi	r24, 0x00	; 0
	 while(--i){             /* fake USB disconnect for > 250 ms */
     bec:	07 c0       	rjmp	.+14     	; 0xbfc <Mouse_init+0x2c>
	   wdt_reset();
     bee:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf0:	e7 eb       	ldi	r30, 0xB7	; 183
     bf2:	fb e0       	ldi	r31, 0x0B	; 11
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <Mouse_init+0x24>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <Mouse_init+0x2a>
     bfa:	00 00       	nop
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
	
	 i = 0;
	 while(--i){             /* fake USB disconnect for > 250 ms */
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	b9 f7       	brne	.-18     	; 0xbee <Mouse_init+0x1e>
	   wdt_reset();
	  _delay_ms(1);
	  }
	 usbDeviceConnect();
     c00:	81 b3       	in	r24, 0x11	; 17
     c02:	8f 7e       	andi	r24, 0xEF	; 239
     c04:	81 bb       	out	0x11, r24	; 17
	 sei();
     c06:	78 94       	sei
     c08:	08 95       	ret

00000c0a <Mouse_MoveLeft>:
	 DBG1(0x01, 0, 0);       /* debug output: main loop starts */
	
}
void Mouse_MoveLeft(void) {
	reportBuffer.dx = -1 ;
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <reportBuffer+0x1>
     c10:	08 95       	ret

00000c12 <Mouse_MoveRight>:
}
void Mouse_MoveRight(void) {
	reportBuffer.dx = 1 ; 
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <reportBuffer+0x1>
     c18:	08 95       	ret

00000c1a <Mouse_MoveUp>:
}
void Mouse_MoveUp(void) {
	reportBuffer.dy = -1 ; 
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <reportBuffer+0x2>
     c20:	08 95       	ret

00000c22 <Mouse_MoveDown>:
}
void Mouse_MoveDown(void) {
	reportBuffer.dy = 1 ;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <reportBuffer+0x2>
     c28:	08 95       	ret

00000c2a <Mouse_RightClick>:
}
void Mouse_RightClick(void) {
	reportBuffer.buttonMask = 1 ; 
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <reportBuffer>
     c30:	08 95       	ret

00000c32 <Mouse_LeftClick>:
}
void Mouse_LeftClick(void) {
	reportBuffer.buttonMask = 2 ;
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <reportBuffer>
     c38:	08 95       	ret

00000c3a <Touch_Init>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*EX :	 ST_TouchConfig_t TouchConfig = {PORTA,PIN0};
		 Touch_Init(TouchConfig);
**/
void Touch_Init(ST_TouchConfig_t config){
	DIO_setPinDir(config.TOUCH_PORT,config.TOUCH_PIN,IN);
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	69 2f       	mov	r22, r25
     c3e:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_setPinDir>
     c42:	08 95       	ret

00000c44 <Touch_Read>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*Return 1 if pressed , 0 otherwise
*
*/
u8_t Touch_Read(ST_TouchConfig_t config){
	return DIO_getPin(config.TOUCH_PORT,config.TOUCH_PIN);
     c44:	69 2f       	mov	r22, r25
     c46:	0e 94 95 06 	call	0xd2a	; 0xd2a <DIO_getPin>
     c4a:	08 95       	ret

00000c4c <main>:


int main()
{
	/* Init application */
	App_Init();
     c4c:	0e 94 82 02 	call	0x504	; 0x504 <App_Init>
	
	while(1)
	{
		// Ensure usb is always up
		DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
		wdt_reset();
     c50:	a8 95       	wdr
		usbPoll();
     c52:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <usbPoll>
		if(usbInterruptIsReady())
     c56:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <usbTxStatus1>
     c5a:	84 ff       	sbrs	r24, 4
     c5c:	07 c0       	rjmp	.+14     	; 0xc6c <main+0x20>
		{
		/* called after every poll of the interrupt endpoint */
	    advanceCircleByFixedAngle();
     c5e:	0e 94 86 05 	call	0xb0c	; 0xb0c <advanceCircleByFixedAngle>
	    DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
	    usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
     c62:	64 e0       	ldi	r22, 0x04	; 4
     c64:	8c e7       	ldi	r24, 0x7C	; 124
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <usbSetInterrupt>
		}
		//------------------------------------------
		
		// Get current gradient of imu (required mouse motion direction)
		u8_t control_signal = App_GetImuGradient();
     c6c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <App_GetImuGradient>
		// move mouse
		App_OrderMouse(control_signal);
     c70:	0e 94 29 02 	call	0x452	; 0x452 <App_OrderMouse>
		
	}
     c74:	ed cf       	rjmp	.-38     	; 0xc50 <main+0x4>

00000c76 <DIO_setPinDir>:
* this example set the first 4 bits to 0xF HIGH and the last 4 bits to 0x0 LOW
* void return.
*/
void DIO_writePort(EN_PORTS_t port,u8_t bin_pins)
{
	REG(port)=bin_pins;
     c76:	41 30       	cpi	r20, 0x01	; 1
     c78:	69 f4       	brne	.+26     	; 0xc94 <DIO_setPinDir+0x1e>
     c7a:	e8 2f       	mov	r30, r24
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	22 91       	ld	r18, -Z
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_setPinDir+0x14>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	6a 95       	dec	r22
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_setPinDir+0x10>
     c8e:	82 2b       	or	r24, r18
     c90:	80 83       	st	Z, r24
     c92:	08 95       	ret
     c94:	41 11       	cpse	r20, r1
     c96:	16 c0       	rjmp	.+44     	; 0xcc4 <DIO_setPinDir+0x4e>
     c98:	e8 2f       	mov	r30, r24
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	df 01       	movw	r26, r30
     c9e:	2e 91       	ld	r18, -X
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_setPinDir+0x34>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	6a 95       	dec	r22
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_setPinDir+0x30>
     cae:	98 2f       	mov	r25, r24
     cb0:	90 95       	com	r25
     cb2:	92 23       	and	r25, r18
     cb4:	9c 93       	st	X, r25
     cb6:	90 b7       	in	r25, 0x30	; 48
     cb8:	94 60       	ori	r25, 0x04	; 4
     cba:	90 bf       	out	0x30, r25	; 48
     cbc:	90 81       	ld	r25, Z
     cbe:	89 2b       	or	r24, r25
     cc0:	80 83       	st	Z, r24
     cc2:	08 95       	ret
     cc4:	42 30       	cpi	r20, 0x02	; 2
     cc6:	a9 f4       	brne	.+42     	; 0xcf2 <DIO_setPinDir+0x7c>
     cc8:	e8 2f       	mov	r30, r24
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	df 01       	movw	r26, r30
     cce:	2e 91       	ld	r18, -X
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_setPinDir+0x64>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	6a 95       	dec	r22
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_setPinDir+0x60>
     cde:	98 2f       	mov	r25, r24
     ce0:	90 95       	com	r25
     ce2:	92 23       	and	r25, r18
     ce4:	9c 93       	st	X, r25
     ce6:	90 b7       	in	r25, 0x30	; 48
     ce8:	9b 7f       	andi	r25, 0xFB	; 251
     cea:	90 bf       	out	0x30, r25	; 48
     cec:	90 81       	ld	r25, Z
     cee:	89 2b       	or	r24, r25
     cf0:	80 83       	st	Z, r24
     cf2:	08 95       	ret

00000cf4 <DIO_setPin>:
     cf4:	e8 2f       	mov	r30, r24
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	21 e0       	ldi	r18, 0x01	; 1
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_setPin+0x10>
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	6a 95       	dec	r22
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_setPin+0xc>
     d08:	28 2b       	or	r18, r24
     d0a:	20 83       	st	Z, r18
     d0c:	08 95       	ret

00000d0e <DIO_clearPin>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
     d0e:	e8 2f       	mov	r30, r24
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_clearPin+0x10>
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	6a 95       	dec	r22
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_clearPin+0xc>
     d22:	20 95       	com	r18
     d24:	28 23       	and	r18, r24
     d26:	20 83       	st	Z, r18
     d28:	08 95       	ret

00000d2a <DIO_getPin>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return u8_t that holds the input value
*/	
u8_t DIO_getPin(EN_PORTS_t port,EN_PINS_t pin)
{
	return GETBIT(REG(port-0x02),(u8_t)pin);
     d2a:	e8 2f       	mov	r30, r24
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	32 97       	sbiw	r30, 0x02	; 2
     d30:	80 81       	ld	r24, Z
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_getPin+0x10>
     d36:	95 95       	asr	r25
     d38:	87 95       	ror	r24
     d3a:	6a 95       	dec	r22
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_getPin+0xc>
}
     d3e:	81 70       	andi	r24, 0x01	; 1
     d40:	08 95       	ret

00000d42 <I2C_Init>:
			I2C_Stop();
			continue;
		}
		break;						
	}
}
     d42:	8f 92       	push	r8
     d44:	9f 92       	push	r9
     d46:	af 92       	push	r10
     d48:	bf 92       	push	r11
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	cf 93       	push	r28
     d54:	9a 01       	movw	r18, r20
     d56:	ab 01       	movw	r20, r22
     d58:	68 2f       	mov	r22, r24
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divmodsi4>
     d64:	69 01       	movw	r12, r18
     d66:	7a 01       	movw	r14, r20
     d68:	80 e1       	ldi	r24, 0x10	; 16
     d6a:	c8 1a       	sub	r12, r24
     d6c:	d1 08       	sbc	r13, r1
     d6e:	e1 08       	sbc	r14, r1
     d70:	f1 08       	sbc	r15, r1
     d72:	c7 01       	movw	r24, r14
     d74:	b6 01       	movw	r22, r12
     d76:	2e ef       	ldi	r18, 0xFE	; 254
     d78:	31 e0       	ldi	r19, 0x01	; 1
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divmodsi4>
     d82:	ca 01       	movw	r24, r20
     d84:	b9 01       	movw	r22, r18
     d86:	0e 94 07 0a 	call	0x140e	; 0x140e <__floatsisf>
     d8a:	28 e1       	ldi	r18, 0x18	; 24
     d8c:	32 e7       	ldi	r19, 0x72	; 114
     d8e:	41 eb       	ldi	r20, 0xB1	; 177
     d90:	5f e3       	ldi	r21, 0x3F	; 63
     d92:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulsf3>
     d96:	4b 01       	movw	r8, r22
     d98:	5c 01       	movw	r10, r24
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	0e 94 5f 09 	call	0x12be	; 0x12be <__cmpsf2>
     da4:	88 23       	and	r24, r24
     da6:	d4 f1       	brlt	.+116    	; 0xe1c <I2C_Init+0xda>
     da8:	c0 e0       	ldi	r28, 0x00	; 0
     daa:	12 c0       	rjmp	.+36     	; 0xdd0 <I2C_Init+0x8e>
     dac:	6c 2f       	mov	r22, r28
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 05 0a 	call	0x140a	; 0x140a <__floatunsisf>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	c5 01       	movw	r24, r10
     dbe:	b4 01       	movw	r22, r8
     dc0:	0e 94 5f 09 	call	0x12be	; 0x12be <__cmpsf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	1c f0       	brlt	.+6      	; 0xdce <I2C_Init+0x8c>
     dc8:	c1 b9       	out	0x01, r28	; 1
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <I2C_Init+0x94>
     dce:	cf 5f       	subi	r28, 0xFF	; 255
     dd0:	c5 30       	cpi	r28, 0x05	; 5
     dd2:	60 f3       	brcs	.-40     	; 0xdac <I2C_Init+0x6a>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	19 f5       	brne	.+70     	; 0xe20 <I2C_Init+0xde>
     dda:	6c 2f       	mov	r22, r28
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 05 0a 	call	0x140a	; 0x140a <__floatunsisf>
     de6:	9b 01       	movw	r18, r22
     de8:	ac 01       	movw	r20, r24
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e8       	ldi	r24, 0x80	; 128
     df0:	90 e4       	ldi	r25, 0x40	; 64
     df2:	0e 94 24 0b 	call	0x1648	; 0x1648 <pow>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__addsf3>
     dfe:	4b 01       	movw	r8, r22
     e00:	5c 01       	movw	r10, r24
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 07 0a 	call	0x140e	; 0x140e <__floatsisf>
     e0a:	a5 01       	movw	r20, r10
     e0c:	94 01       	movw	r18, r8
     e0e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     e12:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fixunssfsi>
     e16:	60 b9       	out	0x00, r22	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <I2C_Init+0xe0>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <I2C_Init+0xe0>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	cf 91       	pop	r28
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	08 95       	ret

00000e36 <I2C_Master_Start>:
     e36:	96 b7       	in	r25, 0x36	; 54
     e38:	90 62       	ori	r25, 0x20	; 32
     e3a:	96 bf       	out	0x36, r25	; 54
     e3c:	96 b7       	in	r25, 0x36	; 54
     e3e:	94 60       	ori	r25, 0x04	; 4
     e40:	96 bf       	out	0x36, r25	; 54
     e42:	96 b7       	in	r25, 0x36	; 54
     e44:	90 68       	ori	r25, 0x80	; 128
     e46:	96 bf       	out	0x36, r25	; 54
     e48:	06 b6       	in	r0, 0x36	; 54
     e4a:	07 fe       	sbrs	r0, 7
     e4c:	fd cf       	rjmp	.-6      	; 0xe48 <I2C_Master_Start+0x12>
     e4e:	91 b1       	in	r25, 0x01	; 1
     e50:	98 7f       	andi	r25, 0xF8	; 248
     e52:	98 30       	cpi	r25, 0x08	; 8
     e54:	91 f4       	brne	.+36     	; 0xe7a <I2C_Master_Start+0x44>
     e56:	83 b9       	out	0x03, r24	; 3
     e58:	86 b7       	in	r24, 0x36	; 54
     e5a:	84 60       	ori	r24, 0x04	; 4
     e5c:	86 bf       	out	0x36, r24	; 54
     e5e:	86 b7       	in	r24, 0x36	; 54
     e60:	80 68       	ori	r24, 0x80	; 128
     e62:	86 bf       	out	0x36, r24	; 54
     e64:	06 b6       	in	r0, 0x36	; 54
     e66:	07 fe       	sbrs	r0, 7
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <I2C_Master_Start+0x2e>
     e6a:	81 b1       	in	r24, 0x01	; 1
     e6c:	88 7f       	andi	r24, 0xF8	; 248
     e6e:	88 31       	cpi	r24, 0x18	; 24
     e70:	31 f0       	breq	.+12     	; 0xe7e <I2C_Master_Start+0x48>
     e72:	80 32       	cpi	r24, 0x20	; 32
     e74:	31 f4       	brne	.+12     	; 0xe82 <I2C_Master_Start+0x4c>
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	08 95       	ret
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	08 95       	ret
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	08 95       	ret
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	08 95       	ret

00000e86 <I2C_Master_Write>:
     e86:	83 b9       	out	0x03, r24	; 3
     e88:	86 b7       	in	r24, 0x36	; 54
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	86 bf       	out	0x36, r24	; 54
     e8e:	86 b7       	in	r24, 0x36	; 54
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	86 bf       	out	0x36, r24	; 54
     e94:	06 b6       	in	r0, 0x36	; 54
     e96:	07 fe       	sbrs	r0, 7
     e98:	fd cf       	rjmp	.-6      	; 0xe94 <I2C_Master_Write+0xe>
     e9a:	81 b1       	in	r24, 0x01	; 1
     e9c:	88 7f       	andi	r24, 0xF8	; 248
     e9e:	88 32       	cpi	r24, 0x28	; 40
     ea0:	21 f0       	breq	.+8      	; 0xeaa <I2C_Master_Write+0x24>
     ea2:	80 33       	cpi	r24, 0x30	; 48
     ea4:	21 f4       	brne	.+8      	; 0xeae <I2C_Master_Write+0x28>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	08 95       	ret
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	08 95       	ret
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	08 95       	ret

00000eb2 <I2C_Repeated_Start>:
     eb2:	96 b7       	in	r25, 0x36	; 54
     eb4:	94 60       	ori	r25, 0x04	; 4
     eb6:	96 bf       	out	0x36, r25	; 54
     eb8:	96 b7       	in	r25, 0x36	; 54
     eba:	90 68       	ori	r25, 0x80	; 128
     ebc:	96 bf       	out	0x36, r25	; 54
     ebe:	96 b7       	in	r25, 0x36	; 54
     ec0:	90 62       	ori	r25, 0x20	; 32
     ec2:	96 bf       	out	0x36, r25	; 54
     ec4:	06 b6       	in	r0, 0x36	; 54
     ec6:	07 fe       	sbrs	r0, 7
     ec8:	fd cf       	rjmp	.-6      	; 0xec4 <I2C_Repeated_Start+0x12>
     eca:	91 b1       	in	r25, 0x01	; 1
     ecc:	98 7f       	andi	r25, 0xF8	; 248
     ece:	90 31       	cpi	r25, 0x10	; 16
     ed0:	91 f4       	brne	.+36     	; 0xef6 <I2C_Repeated_Start+0x44>
     ed2:	83 b9       	out	0x03, r24	; 3
     ed4:	86 b7       	in	r24, 0x36	; 54
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	86 bf       	out	0x36, r24	; 54
     eda:	86 b7       	in	r24, 0x36	; 54
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	86 bf       	out	0x36, r24	; 54
     ee0:	06 b6       	in	r0, 0x36	; 54
     ee2:	07 fe       	sbrs	r0, 7
     ee4:	fd cf       	rjmp	.-6      	; 0xee0 <I2C_Repeated_Start+0x2e>
     ee6:	81 b1       	in	r24, 0x01	; 1
     ee8:	88 7f       	andi	r24, 0xF8	; 248
     eea:	80 34       	cpi	r24, 0x40	; 64
     eec:	31 f0       	breq	.+12     	; 0xefa <I2C_Repeated_Start+0x48>
     eee:	88 34       	cpi	r24, 0x48	; 72
     ef0:	31 f4       	brne	.+12     	; 0xefe <I2C_Repeated_Start+0x4c>
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	08 95       	ret
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	08 95       	ret
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	08 95       	ret

00000f02 <I2C_Read_Ack>:
	SETBIT(I2C_CONTROL_REG,TWSTO);
	while(GETBIT(I2C_CONTROL_REG,TWSTO));								
}
s8_t I2C_Read_Ack()											
{
	ENABLE_I2C;
     f02:	86 b7       	in	r24, 0x36	; 54
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     f08:	86 b7       	in	r24, 0x36	; 54
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	86 bf       	out	0x36, r24	; 54
	GENERATE_ACK;
     f0e:	86 b7       	in	r24, 0x36	; 54
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	86 bf       	out	0x36, r24	; 54
		
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     f14:	06 b6       	in	r0, 0x36	; 54
     f16:	07 fe       	sbrs	r0, 7
     f18:	fd cf       	rjmp	.-6      	; 0xf14 <I2C_Read_Ack+0x12>
	return TWDR_REG;											
     f1a:	83 b1       	in	r24, 0x03	; 3
}
     f1c:	08 95       	ret

00000f1e <I2C_Read_Nack>:

s8_t I2C_Read_Nack()										
{
	ENABLE_I2C;
     f1e:	86 b7       	in	r24, 0x36	; 54
     f20:	84 60       	ori	r24, 0x04	; 4
     f22:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     f24:	86 b7       	in	r24, 0x36	; 54
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	86 bf       	out	0x36, r24	; 54
	
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     f2a:	06 b6       	in	r0, 0x36	; 54
     f2c:	07 fe       	sbrs	r0, 7
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <I2C_Read_Nack+0xc>
	return TWDR_REG;											
     f30:	83 b1       	in	r24, 0x03	; 3
}
     f32:	08 95       	ret

00000f34 <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     f34:	dc 01       	movw	r26, r24
     f36:	86 2f       	mov	r24, r22
    if(len > 0){    /* don't bother app with 0 sized reads */
     f38:	66 23       	and	r22, r22
     f3a:	e1 f0       	breq	.+56     	; 0xf74 <usbDeviceRead+0x40>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     f3c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <usbMsgPtr>
     f40:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     f44:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <usbMsgFlags>
     f48:	96 ff       	sbrs	r25, 6
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <usbDeviceRead+0x2a>
     f4c:	96 2f       	mov	r25, r22
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     f4e:	24 91       	lpm	r18, Z
                    *data++ = c;
     f50:	2c 93       	st	X, r18
                    r++;
     f52:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     f54:	91 50       	subi	r25, 0x01	; 1
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
                    *data++ = c;
     f56:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     f58:	91 11       	cpse	r25, r1
     f5a:	f9 cf       	rjmp	.-14     	; 0xf4e <usbDeviceRead+0x1a>
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <usbDeviceRead+0x38>
     f5e:	96 2f       	mov	r25, r22
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     f60:	21 91       	ld	r18, Z+
     f62:	2c 93       	st	X, r18
                    r++;
                }while(--i);
     f64:	91 50       	subi	r25, 0x01	; 1
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     f66:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     f68:	91 11       	cpse	r25, r1
     f6a:	fa cf       	rjmp	.-12     	; 0xf60 <usbDeviceRead+0x2c>
            }
            usbMsgPtr = r;
     f6c:	f0 93 9b 00 	sts	0x009B, r31	; 0x80009b <usbMsgPtr+0x1>
     f70:	e0 93 9a 00 	sts	0x009A, r30	; 0x80009a <usbMsgPtr>
        }
    }
    return len;
}
     f74:	08 95       	ret

00000f76 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	dc 01       	movw	r26, r24
     f7e:	c6 2f       	mov	r28, r22
     f80:	8a 01       	movw	r16, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     f82:	fa 01       	movw	r30, r20
     f84:	80 81       	ld	r24, Z
     f86:	84 ff       	sbrs	r24, 4
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <usbGenericSetInterrupt+0x1e>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	88 e8       	ldi	r24, 0x88	; 136
     f8e:	89 27       	eor	r24, r25
     f90:	81 83       	std	Z+1, r24	; 0x01
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <usbGenericSetInterrupt+0x24>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     f94:	8a e5       	ldi	r24, 0x5A	; 90
     f96:	fa 01       	movw	r30, r20
     f98:	80 83       	st	Z, r24
    }
    p = txStatus->buffer + 1;
     f9a:	a8 01       	movw	r20, r16
     f9c:	4e 5f       	subi	r20, 0xFE	; 254
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    i = len;
     fa0:	9c 2f       	mov	r25, r28
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
     fa2:	fa 01       	movw	r30, r20
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     fa4:	2c 91       	ld	r18, X
     fa6:	20 83       	st	Z, r18
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     fa8:	91 50       	subi	r25, 0x01	; 1
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     faa:	11 96       	adiw	r26, 0x01	; 1
     fac:	31 96       	adiw	r30, 0x01	; 1
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     fae:	91 11       	cpse	r25, r1
     fb0:	f9 cf       	rjmp	.-14     	; 0xfa4 <usbGenericSetInterrupt+0x2e>
    usbCrc16Append(&txStatus->buffer[1], len);
     fb2:	6c 2f       	mov	r22, r28
     fb4:	ca 01       	movw	r24, r20
     fb6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     fba:	cc 5f       	subi	r28, 0xFC	; 252
     fbc:	f8 01       	movw	r30, r16
     fbe:	c0 83       	st	Z, r28
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
     fc8:	4b e8       	ldi	r20, 0x8B	; 139
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	0e 94 bb 07 	call	0xf76	; 0xf76 <usbGenericSetInterrupt>
     fd0:	08 95       	ret

00000fd2 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     fd6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <usbRxLen>
     fda:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
     fdc:	0a f4       	brpl	.+2      	; 0xfe0 <usbPoll+0xe>
     fde:	b7 c0       	rjmp	.+366    	; 0x114e <usbPoll+0x17c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     fe0:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <usbInputBufOffset>
     fe4:	2c e0       	ldi	r18, 0x0C	; 12
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	29 1b       	sub	r18, r25
     fea:	31 09       	sbc	r19, r1
     fec:	e9 01       	movw	r28, r18
     fee:	c0 56       	subi	r28, 0x60	; 96
     ff0:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     ff2:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <usbRxToken>
     ff6:	9d 32       	cpi	r25, 0x2D	; 45
     ff8:	09 f0       	breq	.+2      	; 0xffc <usbPoll+0x2a>
     ffa:	a7 c0       	rjmp	.+334    	; 0x114a <usbPoll+0x178>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	09 f0       	breq	.+2      	; 0x1002 <usbPoll+0x30>
    1000:	a4 c0       	rjmp	.+328    	; 0x114a <usbPoll+0x178>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    1002:	83 ec       	ldi	r24, 0xC3	; 195
    1004:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    1008:	8a e5       	ldi	r24, 0x5A	; 90
    100a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usbTxLen>
        usbMsgFlags = 0;
    100e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
    1012:	88 81       	ld	r24, Y
    1014:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    1016:	21 f0       	breq	.+8      	; 0x1020 <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
    1018:	ce 01       	movw	r24, r28
    101a:	0e 94 c3 05 	call	0xb86	; 0xb86 <usbFunctionSetup>
    101e:	8c c0       	rjmp	.+280    	; 0x1138 <usbPoll+0x166>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    1022:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    1028:	81 11       	cpse	r24, r1
    102a:	06 c0       	rjmp	.+12     	; 0x1038 <usbPoll+0x66>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    102c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    1030:	29 e8       	ldi	r18, 0x89	; 137
    1032:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	7c c0       	rjmp	.+248    	; 0x1130 <usbPoll+0x15e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	31 f4       	brne	.+12     	; 0x1048 <usbPoll+0x76>
        usbNewDeviceAddr = value;
    103c:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    1040:	29 e8       	ldi	r18, 0x89	; 137
    1042:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	74 c0       	rjmp	.+232    	; 0x1130 <usbPoll+0x15e>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    1048:	86 30       	cpi	r24, 0x06	; 6
    104a:	09 f0       	breq	.+2      	; 0x104e <usbPoll+0x7c>
    104c:	51 c0       	rjmp	.+162    	; 0x10f0 <usbPoll+0x11e>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	41 f4       	brne	.+16     	; 0x1064 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    1054:	8a e3       	ldi	r24, 0x3A	; 58
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    105c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    1060:	82 e1       	ldi	r24, 0x12	; 18
    1062:	42 c0       	rjmp	.+132    	; 0x10e8 <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	41 f4       	brne	.+16     	; 0x1078 <usbPoll+0xa6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    1068:	88 e1       	ldi	r24, 0x18	; 24
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    1070:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    1074:	82 e2       	ldi	r24, 0x22	; 34
    1076:	38 c0       	rjmp	.+112    	; 0x10e8 <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	f9 f4       	brne	.+62     	; 0x10ba <usbPoll+0xe8>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
    107e:	81 11       	cpse	r24, r1
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    1082:	8a e6       	ldi	r24, 0x6A	; 106
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    108a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	2b c0       	rjmp	.+86     	; 0x10e8 <usbPoll+0x116>
        SWITCH_CASE(1)
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	41 f4       	brne	.+16     	; 0x10a6 <usbPoll+0xd4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    1096:	88 e5       	ldi	r24, 0x58	; 88
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    109e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    10a2:	82 e1       	ldi	r24, 0x12	; 18
    10a4:	21 c0       	rjmp	.+66     	; 0x10e8 <usbPoll+0x116>
        SWITCH_CASE(2)
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	e1 f4       	brne	.+56     	; 0x10e2 <usbPoll+0x110>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    10aa:	8c e4       	ldi	r24, 0x4C	; 76
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    10b2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    10b6:	8c e0       	ldi	r24, 0x0C	; 12
    10b8:	17 c0       	rjmp	.+46     	; 0x10e8 <usbPoll+0x116>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    10ba:	81 32       	cpi	r24, 0x21	; 33
    10bc:	41 f4       	brne	.+16     	; 0x10ce <usbPoll+0xfc>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    10be:	8a e2       	ldi	r24, 0x2A	; 42
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    10c6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    10ca:	89 e0       	ldi	r24, 0x09	; 9
    10cc:	0d c0       	rjmp	.+26     	; 0x10e8 <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    10ce:	82 32       	cpi	r24, 0x22	; 34
    10d0:	51 f4       	brne	.+20     	; 0x10e6 <usbPoll+0x114>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    10d2:	84 ee       	ldi	r24, 0xE4	; 228
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbMsgPtr+0x1>
    10da:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <usbMsgPtr>
    10de:	84 e3       	ldi	r24, 0x34	; 52
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <usbPoll+0x116>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <usbPoll+0x116>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    10e8:	90 e4       	ldi	r25, 0x40	; 64
    10ea:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <usbMsgFlags>
    10ee:	24 c0       	rjmp	.+72     	; 0x1138 <usbPoll+0x166>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	99 f0       	breq	.+38     	; 0x111a <usbPoll+0x148>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    10f4:	89 30       	cpi	r24, 0x09	; 9
    10f6:	31 f4       	brne	.+12     	; 0x1104 <usbPoll+0x132>
        usbConfiguration = value;
    10f8:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    10fc:	29 e8       	ldi	r18, 0x89	; 137
    10fe:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	16 c0       	rjmp	.+44     	; 0x1130 <usbPoll+0x15e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    1104:	8a 30       	cpi	r24, 0x0A	; 10
    1106:	69 f0       	breq	.+26     	; 0x1122 <usbPoll+0x150>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    1108:	8b 30       	cpi	r24, 0x0B	; 11
    110a:	79 f4       	brne	.+30     	; 0x112a <usbPoll+0x158>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    110c:	8b e4       	ldi	r24, 0x4B	; 75
    110e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    1112:	29 e8       	ldi	r18, 0x89	; 137
    1114:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <usbPoll+0x15e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
    111a:	2f e9       	ldi	r18, 0x9F	; 159
    111c:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    1122:	29 e8       	ldi	r18, 0x89	; 137
    1124:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    112a:	29 e8       	ldi	r18, 0x89	; 137
    112c:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    112e:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
    1130:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <usbMsgPtr+0x1>
    1134:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    1138:	9f 81       	ldd	r25, Y+7	; 0x07
    113a:	91 11       	cpse	r25, r1
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <usbPoll+0x174>
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	98 17       	cp	r25, r24
    1142:	08 f4       	brcc	.+2      	; 0x1146 <usbPoll+0x174>
                replyLen = rq->wLength.bytes[0];
    1144:	89 2f       	mov	r24, r25
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    1146:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    114a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    114e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <usbTxLen>
    1152:	84 ff       	sbrs	r24, 4
    1154:	2b c0       	rjmp	.+86     	; 0x11ac <usbPoll+0x1da>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    1156:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <usbMsgLen>
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	39 f1       	breq	.+78     	; 0x11ac <usbPoll+0x1da>
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
    115e:	89 30       	cpi	r24, 0x09	; 9
    1160:	10 f4       	brcc	.+4      	; 0x1166 <usbPoll+0x194>
static inline void usbBuildTxBlock(void)
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    1162:	68 2f       	mov	r22, r24
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <usbPoll+0x196>
    if(wantLen > 8)
        wantLen = 8;
    1166:	68 e0       	ldi	r22, 0x08	; 8
    usbMsgLen -= wantLen;
    1168:	86 1b       	sub	r24, r22
    116a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    116e:	e0 e8       	ldi	r30, 0x80	; 128
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	90 81       	ld	r25, Z
    1174:	88 e8       	ldi	r24, 0x88	; 136
    1176:	89 27       	eor	r24, r25
    1178:	80 83       	st	Z, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    117a:	81 e8       	ldi	r24, 0x81	; 129
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 9a 07 	call	0xf34	; 0xf34 <usbDeviceRead>
    1182:	c8 2f       	mov	r28, r24
    if(len <= 8){           /* valid data packet */
    1184:	89 30       	cpi	r24, 0x09	; 9
    1186:	60 f4       	brcc	.+24     	; 0x11a0 <usbPoll+0x1ce>
        usbCrc16Append(&usbTxBuf[1], len);
    1188:	68 2f       	mov	r22, r24
    118a:	81 e8       	ldi	r24, 0x81	; 129
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1192:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    1194:	cc 30       	cpi	r28, 0x0C	; 12
    1196:	40 f4       	brcc	.+16     	; 0x11a8 <usbPoll+0x1d6>
            usbMsgLen = USB_NO_MSG;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbMsgLen>
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <usbPoll+0x1d6>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    11a6:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    11a8:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    11ac:	94 e1       	ldi	r25, 0x14	; 20
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <usbPoll+0x1e6>
        uchar usbLineStatus = USBIN & USBMASK;
    11b0:	80 b3       	in	r24, 0x10	; 16
    11b2:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <usbPoll+0x1f2>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    11b6:	91 50       	subi	r25, 0x01	; 1
    11b8:	91 11       	cpse	r25, r1
    11ba:	fa cf       	rjmp	.-12     	; 0x11b0 <usbPoll+0x1de>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    11bc:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    11c0:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    11ca:	85 b7       	in	r24, 0x35	; 53
    11cc:	82 60       	ori	r24, 0x02	; 2
    11ce:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    11d0:	8b b7       	in	r24, 0x3b	; 59
    11d2:	80 64       	ori	r24, 0x40	; 64
    11d4:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    11d6:	eb e8       	ldi	r30, 0x8B	; 139
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8b e4       	ldi	r24, 0x4B	; 75
    11dc:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    11de:	8a e5       	ldi	r24, 0x5A	; 90
    11e0:	80 83       	st	Z, r24
    11e2:	08 95       	ret

000011e4 <__subsf3>:
    11e4:	50 58       	subi	r21, 0x80	; 128

000011e6 <__addsf3>:
    11e6:	bb 27       	eor	r27, r27
    11e8:	aa 27       	eor	r26, r26
    11ea:	0e 94 0a 09 	call	0x1214	; 0x1214 <__addsf3x>
    11ee:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>
    11f2:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fp_pscA>
    11f6:	38 f0       	brcs	.+14     	; 0x1206 <__addsf3+0x20>
    11f8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_pscB>
    11fc:	20 f0       	brcs	.+8      	; 0x1206 <__addsf3+0x20>
    11fe:	39 f4       	brne	.+14     	; 0x120e <__addsf3+0x28>
    1200:	9f 3f       	cpi	r25, 0xFF	; 255
    1202:	19 f4       	brne	.+6      	; 0x120a <__addsf3+0x24>
    1204:	26 f4       	brtc	.+8      	; 0x120e <__addsf3+0x28>
    1206:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_nan>
    120a:	0e f4       	brtc	.+2      	; 0x120e <__addsf3+0x28>
    120c:	e0 95       	com	r30
    120e:	e7 fb       	bst	r30, 7
    1210:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>

00001214 <__addsf3x>:
    1214:	e9 2f       	mov	r30, r25
    1216:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_split3>
    121a:	58 f3       	brcs	.-42     	; 0x11f2 <__addsf3+0xc>
    121c:	ba 17       	cp	r27, r26
    121e:	62 07       	cpc	r22, r18
    1220:	73 07       	cpc	r23, r19
    1222:	84 07       	cpc	r24, r20
    1224:	95 07       	cpc	r25, r21
    1226:	20 f0       	brcs	.+8      	; 0x1230 <__addsf3x+0x1c>
    1228:	79 f4       	brne	.+30     	; 0x1248 <__addsf3x+0x34>
    122a:	a6 f5       	brtc	.+104    	; 0x1294 <__addsf3x+0x80>
    122c:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__fp_zero>
    1230:	0e f4       	brtc	.+2      	; 0x1234 <__addsf3x+0x20>
    1232:	e0 95       	com	r30
    1234:	0b 2e       	mov	r0, r27
    1236:	ba 2f       	mov	r27, r26
    1238:	a0 2d       	mov	r26, r0
    123a:	0b 01       	movw	r0, r22
    123c:	b9 01       	movw	r22, r18
    123e:	90 01       	movw	r18, r0
    1240:	0c 01       	movw	r0, r24
    1242:	ca 01       	movw	r24, r20
    1244:	a0 01       	movw	r20, r0
    1246:	11 24       	eor	r1, r1
    1248:	ff 27       	eor	r31, r31
    124a:	59 1b       	sub	r21, r25
    124c:	99 f0       	breq	.+38     	; 0x1274 <__addsf3x+0x60>
    124e:	59 3f       	cpi	r21, 0xF9	; 249
    1250:	50 f4       	brcc	.+20     	; 0x1266 <__addsf3x+0x52>
    1252:	50 3e       	cpi	r21, 0xE0	; 224
    1254:	68 f1       	brcs	.+90     	; 0x12b0 <__addsf3x+0x9c>
    1256:	1a 16       	cp	r1, r26
    1258:	f0 40       	sbci	r31, 0x00	; 0
    125a:	a2 2f       	mov	r26, r18
    125c:	23 2f       	mov	r18, r19
    125e:	34 2f       	mov	r19, r20
    1260:	44 27       	eor	r20, r20
    1262:	58 5f       	subi	r21, 0xF8	; 248
    1264:	f3 cf       	rjmp	.-26     	; 0x124c <__addsf3x+0x38>
    1266:	46 95       	lsr	r20
    1268:	37 95       	ror	r19
    126a:	27 95       	ror	r18
    126c:	a7 95       	ror	r26
    126e:	f0 40       	sbci	r31, 0x00	; 0
    1270:	53 95       	inc	r21
    1272:	c9 f7       	brne	.-14     	; 0x1266 <__addsf3x+0x52>
    1274:	7e f4       	brtc	.+30     	; 0x1294 <__addsf3x+0x80>
    1276:	1f 16       	cp	r1, r31
    1278:	ba 0b       	sbc	r27, r26
    127a:	62 0b       	sbc	r22, r18
    127c:	73 0b       	sbc	r23, r19
    127e:	84 0b       	sbc	r24, r20
    1280:	ba f0       	brmi	.+46     	; 0x12b0 <__addsf3x+0x9c>
    1282:	91 50       	subi	r25, 0x01	; 1
    1284:	a1 f0       	breq	.+40     	; 0x12ae <__addsf3x+0x9a>
    1286:	ff 0f       	add	r31, r31
    1288:	bb 1f       	adc	r27, r27
    128a:	66 1f       	adc	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	88 1f       	adc	r24, r24
    1290:	c2 f7       	brpl	.-16     	; 0x1282 <__addsf3x+0x6e>
    1292:	0e c0       	rjmp	.+28     	; 0x12b0 <__addsf3x+0x9c>
    1294:	ba 0f       	add	r27, r26
    1296:	62 1f       	adc	r22, r18
    1298:	73 1f       	adc	r23, r19
    129a:	84 1f       	adc	r24, r20
    129c:	48 f4       	brcc	.+18     	; 0x12b0 <__addsf3x+0x9c>
    129e:	87 95       	ror	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	b7 95       	ror	r27
    12a6:	f7 95       	ror	r31
    12a8:	9e 3f       	cpi	r25, 0xFE	; 254
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__addsf3x+0x9a>
    12ac:	b0 cf       	rjmp	.-160    	; 0x120e <__addsf3+0x28>
    12ae:	93 95       	inc	r25
    12b0:	88 0f       	add	r24, r24
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <__addsf3x+0xa2>
    12b4:	99 27       	eor	r25, r25
    12b6:	ee 0f       	add	r30, r30
    12b8:	97 95       	ror	r25
    12ba:	87 95       	ror	r24
    12bc:	08 95       	ret

000012be <__cmpsf2>:
    12be:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_cmp>
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <__cmpsf2+0x8>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	08 95       	ret

000012c8 <__divsf3>:
    12c8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__divsf3x>
    12cc:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>
    12d0:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_pscB>
    12d4:	58 f0       	brcs	.+22     	; 0x12ec <__divsf3+0x24>
    12d6:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fp_pscA>
    12da:	40 f0       	brcs	.+16     	; 0x12ec <__divsf3+0x24>
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <__divsf3+0x20>
    12de:	5f 3f       	cpi	r21, 0xFF	; 255
    12e0:	29 f0       	breq	.+10     	; 0x12ec <__divsf3+0x24>
    12e2:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>
    12e6:	51 11       	cpse	r21, r1
    12e8:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_szero>
    12ec:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_nan>

000012f0 <__divsf3x>:
    12f0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_split3>
    12f4:	68 f3       	brcs	.-38     	; 0x12d0 <__divsf3+0x8>

000012f6 <__divsf3_pse>:
    12f6:	99 23       	and	r25, r25
    12f8:	b1 f3       	breq	.-20     	; 0x12e6 <__divsf3+0x1e>
    12fa:	55 23       	and	r21, r21
    12fc:	91 f3       	breq	.-28     	; 0x12e2 <__divsf3+0x1a>
    12fe:	95 1b       	sub	r25, r21
    1300:	55 0b       	sbc	r21, r21
    1302:	bb 27       	eor	r27, r27
    1304:	aa 27       	eor	r26, r26
    1306:	62 17       	cp	r22, r18
    1308:	73 07       	cpc	r23, r19
    130a:	84 07       	cpc	r24, r20
    130c:	38 f0       	brcs	.+14     	; 0x131c <__divsf3_pse+0x26>
    130e:	9f 5f       	subi	r25, 0xFF	; 255
    1310:	5f 4f       	sbci	r21, 0xFF	; 255
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	44 1f       	adc	r20, r20
    1318:	aa 1f       	adc	r26, r26
    131a:	a9 f3       	breq	.-22     	; 0x1306 <__divsf3_pse+0x10>
    131c:	35 d0       	rcall	.+106    	; 0x1388 <__divsf3_pse+0x92>
    131e:	0e 2e       	mov	r0, r30
    1320:	3a f0       	brmi	.+14     	; 0x1330 <__divsf3_pse+0x3a>
    1322:	e0 e8       	ldi	r30, 0x80	; 128
    1324:	32 d0       	rcall	.+100    	; 0x138a <__divsf3_pse+0x94>
    1326:	91 50       	subi	r25, 0x01	; 1
    1328:	50 40       	sbci	r21, 0x00	; 0
    132a:	e6 95       	lsr	r30
    132c:	00 1c       	adc	r0, r0
    132e:	ca f7       	brpl	.-14     	; 0x1322 <__divsf3_pse+0x2c>
    1330:	2b d0       	rcall	.+86     	; 0x1388 <__divsf3_pse+0x92>
    1332:	fe 2f       	mov	r31, r30
    1334:	29 d0       	rcall	.+82     	; 0x1388 <__divsf3_pse+0x92>
    1336:	66 0f       	add	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	bb 1f       	adc	r27, r27
    133e:	26 17       	cp	r18, r22
    1340:	37 07       	cpc	r19, r23
    1342:	48 07       	cpc	r20, r24
    1344:	ab 07       	cpc	r26, r27
    1346:	b0 e8       	ldi	r27, 0x80	; 128
    1348:	09 f0       	breq	.+2      	; 0x134c <__divsf3_pse+0x56>
    134a:	bb 0b       	sbc	r27, r27
    134c:	80 2d       	mov	r24, r0
    134e:	bf 01       	movw	r22, r30
    1350:	ff 27       	eor	r31, r31
    1352:	93 58       	subi	r25, 0x83	; 131
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    1356:	3a f0       	brmi	.+14     	; 0x1366 <__divsf3_pse+0x70>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	78 f0       	brcs	.+30     	; 0x137c <__divsf3_pse+0x86>
    135e:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>
    1362:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_szero>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	e4 f3       	brlt	.-8      	; 0x1362 <__divsf3_pse+0x6c>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	d4 f3       	brlt	.-12     	; 0x1362 <__divsf3_pse+0x6c>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	9f 5f       	subi	r25, 0xFF	; 255
    137a:	c9 f7       	brne	.-14     	; 0x136e <__divsf3_pse+0x78>
    137c:	88 0f       	add	r24, r24
    137e:	91 1d       	adc	r25, r1
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	97 f9       	bld	r25, 7
    1386:	08 95       	ret
    1388:	e1 e0       	ldi	r30, 0x01	; 1
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	bb 1f       	adc	r27, r27
    1392:	62 17       	cp	r22, r18
    1394:	73 07       	cpc	r23, r19
    1396:	84 07       	cpc	r24, r20
    1398:	ba 07       	cpc	r27, r26
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__divsf3_pse+0xae>
    139c:	62 1b       	sub	r22, r18
    139e:	73 0b       	sbc	r23, r19
    13a0:	84 0b       	sbc	r24, r20
    13a2:	ba 0b       	sbc	r27, r26
    13a4:	ee 1f       	adc	r30, r30
    13a6:	88 f7       	brcc	.-30     	; 0x138a <__divsf3_pse+0x94>
    13a8:	e0 95       	com	r30
    13aa:	08 95       	ret

000013ac <__fixunssfsi>:
    13ac:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_splitA>
    13b0:	88 f0       	brcs	.+34     	; 0x13d4 <__fixunssfsi+0x28>
    13b2:	9f 57       	subi	r25, 0x7F	; 127
    13b4:	98 f0       	brcs	.+38     	; 0x13dc <__fixunssfsi+0x30>
    13b6:	b9 2f       	mov	r27, r25
    13b8:	99 27       	eor	r25, r25
    13ba:	b7 51       	subi	r27, 0x17	; 23
    13bc:	b0 f0       	brcs	.+44     	; 0x13ea <__fixunssfsi+0x3e>
    13be:	e1 f0       	breq	.+56     	; 0x13f8 <__fixunssfsi+0x4c>
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	1a f0       	brmi	.+6      	; 0x13d0 <__fixunssfsi+0x24>
    13ca:	ba 95       	dec	r27
    13cc:	c9 f7       	brne	.-14     	; 0x13c0 <__fixunssfsi+0x14>
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <__fixunssfsi+0x4c>
    13d0:	b1 30       	cpi	r27, 0x01	; 1
    13d2:	91 f0       	breq	.+36     	; 0x13f8 <__fixunssfsi+0x4c>
    13d4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_zero>
    13d8:	b1 e0       	ldi	r27, 0x01	; 1
    13da:	08 95       	ret
    13dc:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__fp_zero>
    13e0:	67 2f       	mov	r22, r23
    13e2:	78 2f       	mov	r23, r24
    13e4:	88 27       	eor	r24, r24
    13e6:	b8 5f       	subi	r27, 0xF8	; 248
    13e8:	39 f0       	breq	.+14     	; 0x13f8 <__fixunssfsi+0x4c>
    13ea:	b9 3f       	cpi	r27, 0xF9	; 249
    13ec:	cc f3       	brlt	.-14     	; 0x13e0 <__fixunssfsi+0x34>
    13ee:	86 95       	lsr	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b3 95       	inc	r27
    13f6:	d9 f7       	brne	.-10     	; 0x13ee <__fixunssfsi+0x42>
    13f8:	3e f4       	brtc	.+14     	; 0x1408 <__fixunssfsi+0x5c>
    13fa:	90 95       	com	r25
    13fc:	80 95       	com	r24
    13fe:	70 95       	com	r23
    1400:	61 95       	neg	r22
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	8f 4f       	sbci	r24, 0xFF	; 255
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	08 95       	ret

0000140a <__floatunsisf>:
    140a:	e8 94       	clt
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <__floatsisf+0x12>

0000140e <__floatsisf>:
    140e:	97 fb       	bst	r25, 7
    1410:	3e f4       	brtc	.+14     	; 0x1420 <__floatsisf+0x12>
    1412:	90 95       	com	r25
    1414:	80 95       	com	r24
    1416:	70 95       	com	r23
    1418:	61 95       	neg	r22
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	8f 4f       	sbci	r24, 0xFF	; 255
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	99 23       	and	r25, r25
    1422:	a9 f0       	breq	.+42     	; 0x144e <__floatsisf+0x40>
    1424:	f9 2f       	mov	r31, r25
    1426:	96 e9       	ldi	r25, 0x96	; 150
    1428:	bb 27       	eor	r27, r27
    142a:	93 95       	inc	r25
    142c:	f6 95       	lsr	r31
    142e:	87 95       	ror	r24
    1430:	77 95       	ror	r23
    1432:	67 95       	ror	r22
    1434:	b7 95       	ror	r27
    1436:	f1 11       	cpse	r31, r1
    1438:	f8 cf       	rjmp	.-16     	; 0x142a <__floatsisf+0x1c>
    143a:	fa f4       	brpl	.+62     	; 0x147a <__floatsisf+0x6c>
    143c:	bb 0f       	add	r27, r27
    143e:	11 f4       	brne	.+4      	; 0x1444 <__floatsisf+0x36>
    1440:	60 ff       	sbrs	r22, 0
    1442:	1b c0       	rjmp	.+54     	; 0x147a <__floatsisf+0x6c>
    1444:	6f 5f       	subi	r22, 0xFF	; 255
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	8f 4f       	sbci	r24, 0xFF	; 255
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	16 c0       	rjmp	.+44     	; 0x147a <__floatsisf+0x6c>
    144e:	88 23       	and	r24, r24
    1450:	11 f0       	breq	.+4      	; 0x1456 <__floatsisf+0x48>
    1452:	96 e9       	ldi	r25, 0x96	; 150
    1454:	11 c0       	rjmp	.+34     	; 0x1478 <__floatsisf+0x6a>
    1456:	77 23       	and	r23, r23
    1458:	21 f0       	breq	.+8      	; 0x1462 <__floatsisf+0x54>
    145a:	9e e8       	ldi	r25, 0x8E	; 142
    145c:	87 2f       	mov	r24, r23
    145e:	76 2f       	mov	r23, r22
    1460:	05 c0       	rjmp	.+10     	; 0x146c <__floatsisf+0x5e>
    1462:	66 23       	and	r22, r22
    1464:	71 f0       	breq	.+28     	; 0x1482 <__floatsisf+0x74>
    1466:	96 e8       	ldi	r25, 0x86	; 134
    1468:	86 2f       	mov	r24, r22
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	2a f0       	brmi	.+10     	; 0x147a <__floatsisf+0x6c>
    1470:	9a 95       	dec	r25
    1472:	66 0f       	add	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	da f7       	brpl	.-10     	; 0x1470 <__floatsisf+0x62>
    147a:	88 0f       	add	r24, r24
    147c:	96 95       	lsr	r25
    147e:	87 95       	ror	r24
    1480:	97 f9       	bld	r25, 7
    1482:	08 95       	ret

00001484 <__fp_cmp>:
    1484:	99 0f       	add	r25, r25
    1486:	00 08       	sbc	r0, r0
    1488:	55 0f       	add	r21, r21
    148a:	aa 0b       	sbc	r26, r26
    148c:	e0 e8       	ldi	r30, 0x80	; 128
    148e:	fe ef       	ldi	r31, 0xFE	; 254
    1490:	16 16       	cp	r1, r22
    1492:	17 06       	cpc	r1, r23
    1494:	e8 07       	cpc	r30, r24
    1496:	f9 07       	cpc	r31, r25
    1498:	c0 f0       	brcs	.+48     	; 0x14ca <__fp_cmp+0x46>
    149a:	12 16       	cp	r1, r18
    149c:	13 06       	cpc	r1, r19
    149e:	e4 07       	cpc	r30, r20
    14a0:	f5 07       	cpc	r31, r21
    14a2:	98 f0       	brcs	.+38     	; 0x14ca <__fp_cmp+0x46>
    14a4:	62 1b       	sub	r22, r18
    14a6:	73 0b       	sbc	r23, r19
    14a8:	84 0b       	sbc	r24, r20
    14aa:	95 0b       	sbc	r25, r21
    14ac:	39 f4       	brne	.+14     	; 0x14bc <__fp_cmp+0x38>
    14ae:	0a 26       	eor	r0, r26
    14b0:	61 f0       	breq	.+24     	; 0x14ca <__fp_cmp+0x46>
    14b2:	23 2b       	or	r18, r19
    14b4:	24 2b       	or	r18, r20
    14b6:	25 2b       	or	r18, r21
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <__fp_cmp+0x3e>
    14ba:	08 95       	ret
    14bc:	0a 26       	eor	r0, r26
    14be:	09 f4       	brne	.+2      	; 0x14c2 <__fp_cmp+0x3e>
    14c0:	a1 40       	sbci	r26, 0x01	; 1
    14c2:	a6 95       	lsr	r26
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	81 1d       	adc	r24, r1
    14c8:	81 1d       	adc	r24, r1
    14ca:	08 95       	ret

000014cc <__fp_inf>:
    14cc:	97 f9       	bld	r25, 7
    14ce:	9f 67       	ori	r25, 0x7F	; 127
    14d0:	80 e8       	ldi	r24, 0x80	; 128
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <__fp_nan>:
    14d8:	9f ef       	ldi	r25, 0xFF	; 255
    14da:	80 ec       	ldi	r24, 0xC0	; 192
    14dc:	08 95       	ret

000014de <__fp_pscA>:
    14de:	00 24       	eor	r0, r0
    14e0:	0a 94       	dec	r0
    14e2:	16 16       	cp	r1, r22
    14e4:	17 06       	cpc	r1, r23
    14e6:	18 06       	cpc	r1, r24
    14e8:	09 06       	cpc	r0, r25
    14ea:	08 95       	ret

000014ec <__fp_pscB>:
    14ec:	00 24       	eor	r0, r0
    14ee:	0a 94       	dec	r0
    14f0:	12 16       	cp	r1, r18
    14f2:	13 06       	cpc	r1, r19
    14f4:	14 06       	cpc	r1, r20
    14f6:	05 06       	cpc	r0, r21
    14f8:	08 95       	ret

000014fa <__fp_round>:
    14fa:	09 2e       	mov	r0, r25
    14fc:	03 94       	inc	r0
    14fe:	00 0c       	add	r0, r0
    1500:	11 f4       	brne	.+4      	; 0x1506 <__fp_round+0xc>
    1502:	88 23       	and	r24, r24
    1504:	52 f0       	brmi	.+20     	; 0x151a <__fp_round+0x20>
    1506:	bb 0f       	add	r27, r27
    1508:	40 f4       	brcc	.+16     	; 0x151a <__fp_round+0x20>
    150a:	bf 2b       	or	r27, r31
    150c:	11 f4       	brne	.+4      	; 0x1512 <__fp_round+0x18>
    150e:	60 ff       	sbrs	r22, 0
    1510:	04 c0       	rjmp	.+8      	; 0x151a <__fp_round+0x20>
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	08 95       	ret

0000151c <__fp_split3>:
    151c:	57 fd       	sbrc	r21, 7
    151e:	90 58       	subi	r25, 0x80	; 128
    1520:	44 0f       	add	r20, r20
    1522:	55 1f       	adc	r21, r21
    1524:	59 f0       	breq	.+22     	; 0x153c <__fp_splitA+0x10>
    1526:	5f 3f       	cpi	r21, 0xFF	; 255
    1528:	71 f0       	breq	.+28     	; 0x1546 <__fp_splitA+0x1a>
    152a:	47 95       	ror	r20

0000152c <__fp_splitA>:
    152c:	88 0f       	add	r24, r24
    152e:	97 fb       	bst	r25, 7
    1530:	99 1f       	adc	r25, r25
    1532:	61 f0       	breq	.+24     	; 0x154c <__fp_splitA+0x20>
    1534:	9f 3f       	cpi	r25, 0xFF	; 255
    1536:	79 f0       	breq	.+30     	; 0x1556 <__fp_splitA+0x2a>
    1538:	87 95       	ror	r24
    153a:	08 95       	ret
    153c:	12 16       	cp	r1, r18
    153e:	13 06       	cpc	r1, r19
    1540:	14 06       	cpc	r1, r20
    1542:	55 1f       	adc	r21, r21
    1544:	f2 cf       	rjmp	.-28     	; 0x152a <__fp_split3+0xe>
    1546:	46 95       	lsr	r20
    1548:	f1 df       	rcall	.-30     	; 0x152c <__fp_splitA>
    154a:	08 c0       	rjmp	.+16     	; 0x155c <__fp_splitA+0x30>
    154c:	16 16       	cp	r1, r22
    154e:	17 06       	cpc	r1, r23
    1550:	18 06       	cpc	r1, r24
    1552:	99 1f       	adc	r25, r25
    1554:	f1 cf       	rjmp	.-30     	; 0x1538 <__fp_splitA+0xc>
    1556:	86 95       	lsr	r24
    1558:	71 05       	cpc	r23, r1
    155a:	61 05       	cpc	r22, r1
    155c:	08 94       	sec
    155e:	08 95       	ret

00001560 <__fp_zero>:
    1560:	e8 94       	clt

00001562 <__fp_szero>:
    1562:	bb 27       	eor	r27, r27
    1564:	66 27       	eor	r22, r22
    1566:	77 27       	eor	r23, r23
    1568:	cb 01       	movw	r24, r22
    156a:	97 f9       	bld	r25, 7
    156c:	08 95       	ret

0000156e <__mulsf3>:
    156e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3x>
    1572:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>
    1576:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fp_pscA>
    157a:	38 f0       	brcs	.+14     	; 0x158a <__mulsf3+0x1c>
    157c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_pscB>
    1580:	20 f0       	brcs	.+8      	; 0x158a <__mulsf3+0x1c>
    1582:	95 23       	and	r25, r21
    1584:	11 f0       	breq	.+4      	; 0x158a <__mulsf3+0x1c>
    1586:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>
    158a:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_nan>
    158e:	11 24       	eor	r1, r1
    1590:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_szero>

00001594 <__mulsf3x>:
    1594:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_split3>
    1598:	70 f3       	brcs	.-36     	; 0x1576 <__mulsf3+0x8>

0000159a <__mulsf3_pse>:
    159a:	95 9f       	mul	r25, r21
    159c:	c1 f3       	breq	.-16     	; 0x158e <__mulsf3+0x20>
    159e:	95 0f       	add	r25, r21
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	55 1f       	adc	r21, r21
    15a4:	62 9f       	mul	r22, r18
    15a6:	f0 01       	movw	r30, r0
    15a8:	72 9f       	mul	r23, r18
    15aa:	bb 27       	eor	r27, r27
    15ac:	f0 0d       	add	r31, r0
    15ae:	b1 1d       	adc	r27, r1
    15b0:	63 9f       	mul	r22, r19
    15b2:	aa 27       	eor	r26, r26
    15b4:	f0 0d       	add	r31, r0
    15b6:	b1 1d       	adc	r27, r1
    15b8:	aa 1f       	adc	r26, r26
    15ba:	64 9f       	mul	r22, r20
    15bc:	66 27       	eor	r22, r22
    15be:	b0 0d       	add	r27, r0
    15c0:	a1 1d       	adc	r26, r1
    15c2:	66 1f       	adc	r22, r22
    15c4:	82 9f       	mul	r24, r18
    15c6:	22 27       	eor	r18, r18
    15c8:	b0 0d       	add	r27, r0
    15ca:	a1 1d       	adc	r26, r1
    15cc:	62 1f       	adc	r22, r18
    15ce:	73 9f       	mul	r23, r19
    15d0:	b0 0d       	add	r27, r0
    15d2:	a1 1d       	adc	r26, r1
    15d4:	62 1f       	adc	r22, r18
    15d6:	83 9f       	mul	r24, r19
    15d8:	a0 0d       	add	r26, r0
    15da:	61 1d       	adc	r22, r1
    15dc:	22 1f       	adc	r18, r18
    15de:	74 9f       	mul	r23, r20
    15e0:	33 27       	eor	r19, r19
    15e2:	a0 0d       	add	r26, r0
    15e4:	61 1d       	adc	r22, r1
    15e6:	23 1f       	adc	r18, r19
    15e8:	84 9f       	mul	r24, r20
    15ea:	60 0d       	add	r22, r0
    15ec:	21 1d       	adc	r18, r1
    15ee:	82 2f       	mov	r24, r18
    15f0:	76 2f       	mov	r23, r22
    15f2:	6a 2f       	mov	r22, r26
    15f4:	11 24       	eor	r1, r1
    15f6:	9f 57       	subi	r25, 0x7F	; 127
    15f8:	50 40       	sbci	r21, 0x00	; 0
    15fa:	9a f0       	brmi	.+38     	; 0x1622 <__mulsf3_pse+0x88>
    15fc:	f1 f0       	breq	.+60     	; 0x163a <__mulsf3_pse+0xa0>
    15fe:	88 23       	and	r24, r24
    1600:	4a f0       	brmi	.+18     	; 0x1614 <__mulsf3_pse+0x7a>
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	bb 1f       	adc	r27, r27
    1608:	66 1f       	adc	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	91 50       	subi	r25, 0x01	; 1
    1610:	50 40       	sbci	r21, 0x00	; 0
    1612:	a9 f7       	brne	.-22     	; 0x15fe <__mulsf3_pse+0x64>
    1614:	9e 3f       	cpi	r25, 0xFE	; 254
    1616:	51 05       	cpc	r21, r1
    1618:	80 f0       	brcs	.+32     	; 0x163a <__mulsf3_pse+0xa0>
    161a:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>
    161e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_szero>
    1622:	5f 3f       	cpi	r21, 0xFF	; 255
    1624:	e4 f3       	brlt	.-8      	; 0x161e <__mulsf3_pse+0x84>
    1626:	98 3e       	cpi	r25, 0xE8	; 232
    1628:	d4 f3       	brlt	.-12     	; 0x161e <__mulsf3_pse+0x84>
    162a:	86 95       	lsr	r24
    162c:	77 95       	ror	r23
    162e:	67 95       	ror	r22
    1630:	b7 95       	ror	r27
    1632:	f7 95       	ror	r31
    1634:	e7 95       	ror	r30
    1636:	9f 5f       	subi	r25, 0xFF	; 255
    1638:	c1 f7       	brne	.-16     	; 0x162a <__mulsf3_pse+0x90>
    163a:	fe 2b       	or	r31, r30
    163c:	88 0f       	add	r24, r24
    163e:	91 1d       	adc	r25, r1
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	97 f9       	bld	r25, 7
    1646:	08 95       	ret

00001648 <pow>:
    1648:	fa 01       	movw	r30, r20
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	30 96       	adiw	r30, 0x00	; 0
    1650:	21 05       	cpc	r18, r1
    1652:	31 05       	cpc	r19, r1
    1654:	a1 f1       	breq	.+104    	; 0x16be <pow+0x76>
    1656:	61 15       	cp	r22, r1
    1658:	71 05       	cpc	r23, r1
    165a:	61 f4       	brne	.+24     	; 0x1674 <pow+0x2c>
    165c:	80 38       	cpi	r24, 0x80	; 128
    165e:	bf e3       	ldi	r27, 0x3F	; 63
    1660:	9b 07       	cpc	r25, r27
    1662:	49 f1       	breq	.+82     	; 0x16b6 <pow+0x6e>
    1664:	68 94       	set
    1666:	90 38       	cpi	r25, 0x80	; 128
    1668:	81 05       	cpc	r24, r1
    166a:	61 f0       	breq	.+24     	; 0x1684 <pow+0x3c>
    166c:	80 38       	cpi	r24, 0x80	; 128
    166e:	bf ef       	ldi	r27, 0xFF	; 255
    1670:	9b 07       	cpc	r25, r27
    1672:	41 f0       	breq	.+16     	; 0x1684 <pow+0x3c>
    1674:	99 23       	and	r25, r25
    1676:	4a f5       	brpl	.+82     	; 0x16ca <pow+0x82>
    1678:	ff 3f       	cpi	r31, 0xFF	; 255
    167a:	e1 05       	cpc	r30, r1
    167c:	31 05       	cpc	r19, r1
    167e:	21 05       	cpc	r18, r1
    1680:	19 f1       	breq	.+70     	; 0x16c8 <pow+0x80>
    1682:	e8 94       	clt
    1684:	08 94       	sec
    1686:	e7 95       	ror	r30
    1688:	d9 01       	movw	r26, r18
    168a:	aa 23       	and	r26, r26
    168c:	29 f4       	brne	.+10     	; 0x1698 <pow+0x50>
    168e:	ab 2f       	mov	r26, r27
    1690:	be 2f       	mov	r27, r30
    1692:	f8 5f       	subi	r31, 0xF8	; 248
    1694:	d0 f3       	brcs	.-12     	; 0x168a <pow+0x42>
    1696:	10 c0       	rjmp	.+32     	; 0x16b8 <pow+0x70>
    1698:	ff 5f       	subi	r31, 0xFF	; 255
    169a:	70 f4       	brcc	.+28     	; 0x16b8 <pow+0x70>
    169c:	a6 95       	lsr	r26
    169e:	e0 f7       	brcc	.-8      	; 0x1698 <pow+0x50>
    16a0:	f7 39       	cpi	r31, 0x97	; 151
    16a2:	50 f0       	brcs	.+20     	; 0x16b8 <pow+0x70>
    16a4:	19 f0       	breq	.+6      	; 0x16ac <pow+0x64>
    16a6:	ff 3a       	cpi	r31, 0xAF	; 175
    16a8:	38 f4       	brcc	.+14     	; 0x16b8 <pow+0x70>
    16aa:	9f 77       	andi	r25, 0x7F	; 127
    16ac:	9f 93       	push	r25
    16ae:	0d d0       	rcall	.+26     	; 0x16ca <pow+0x82>
    16b0:	0f 90       	pop	r0
    16b2:	07 fc       	sbrc	r0, 7
    16b4:	90 58       	subi	r25, 0x80	; 128
    16b6:	08 95       	ret
    16b8:	46 f0       	brts	.+16     	; 0x16ca <pow+0x82>
    16ba:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_nan>
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	80 e8       	ldi	r24, 0x80	; 128
    16c4:	9f e3       	ldi	r25, 0x3F	; 63
    16c6:	08 95       	ret
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	9f 77       	andi	r25, 0x7F	; 127
    16cc:	5f 93       	push	r21
    16ce:	4f 93       	push	r20
    16d0:	3f 93       	push	r19
    16d2:	2f 93       	push	r18
    16d4:	0e 94 1f 0c 	call	0x183e	; 0x183e <log>
    16d8:	2f 91       	pop	r18
    16da:	3f 91       	pop	r19
    16dc:	4f 91       	pop	r20
    16de:	5f 91       	pop	r21
    16e0:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulsf3>
    16e4:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <exp>
    16e8:	29 f4       	brne	.+10     	; 0x16f4 <pow+0xac>
    16ea:	16 f0       	brts	.+4      	; 0x16f0 <pow+0xa8>
    16ec:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>
    16f0:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__fp_zero>
    16f4:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_nan>

000016f8 <exp>:
    16f8:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_splitA>
    16fc:	a8 f3       	brcs	.-22     	; 0x16e8 <pow+0xa0>
    16fe:	96 38       	cpi	r25, 0x86	; 134
    1700:	a0 f7       	brcc	.-24     	; 0x16ea <pow+0xa2>
    1702:	07 f8       	bld	r0, 7
    1704:	0f 92       	push	r0
    1706:	e8 94       	clt
    1708:	2b e3       	ldi	r18, 0x3B	; 59
    170a:	3a ea       	ldi	r19, 0xAA	; 170
    170c:	48 eb       	ldi	r20, 0xB8	; 184
    170e:	5f e7       	ldi	r21, 0x7F	; 127
    1710:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3_pse>
    1714:	0f 92       	push	r0
    1716:	0f 92       	push	r0
    1718:	0f 92       	push	r0
    171a:	4d b7       	in	r20, 0x3d	; 61
    171c:	5e b7       	in	r21, 0x3e	; 62
    171e:	0f 92       	push	r0
    1720:	0e 94 67 0c 	call	0x18ce	; 0x18ce <modf>
    1724:	e2 e6       	ldi	r30, 0x62	; 98
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_powser>
    172c:	4f 91       	pop	r20
    172e:	5f 91       	pop	r21
    1730:	ef 91       	pop	r30
    1732:	ff 91       	pop	r31
    1734:	e5 95       	asr	r30
    1736:	ee 1f       	adc	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	49 f0       	breq	.+18     	; 0x174e <exp+0x56>
    173c:	fe 57       	subi	r31, 0x7E	; 126
    173e:	e0 68       	ori	r30, 0x80	; 128
    1740:	44 27       	eor	r20, r20
    1742:	ee 0f       	add	r30, r30
    1744:	44 1f       	adc	r20, r20
    1746:	fa 95       	dec	r31
    1748:	e1 f7       	brne	.-8      	; 0x1742 <exp+0x4a>
    174a:	41 95       	neg	r20
    174c:	55 0b       	sbc	r21, r21
    174e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ldexp>
    1752:	0f 90       	pop	r0
    1754:	07 fe       	sbrs	r0, 7
    1756:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <inverse>
    175a:	08 95       	ret

0000175c <__fp_powser>:
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	1f 93       	push	r17
    1762:	0f 93       	push	r16
    1764:	ff 92       	push	r15
    1766:	ef 92       	push	r14
    1768:	df 92       	push	r13
    176a:	7b 01       	movw	r14, r22
    176c:	8c 01       	movw	r16, r24
    176e:	68 94       	set
    1770:	06 c0       	rjmp	.+12     	; 0x177e <__fp_powser+0x22>
    1772:	da 2e       	mov	r13, r26
    1774:	ef 01       	movw	r28, r30
    1776:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3x>
    177a:	fe 01       	movw	r30, r28
    177c:	e8 94       	clt
    177e:	a5 91       	lpm	r26, Z+
    1780:	25 91       	lpm	r18, Z+
    1782:	35 91       	lpm	r19, Z+
    1784:	45 91       	lpm	r20, Z+
    1786:	55 91       	lpm	r21, Z+
    1788:	a6 f3       	brts	.-24     	; 0x1772 <__fp_powser+0x16>
    178a:	ef 01       	movw	r28, r30
    178c:	0e 94 0a 09 	call	0x1214	; 0x1214 <__addsf3x>
    1790:	fe 01       	movw	r30, r28
    1792:	97 01       	movw	r18, r14
    1794:	a8 01       	movw	r20, r16
    1796:	da 94       	dec	r13
    1798:	69 f7       	brne	.-38     	; 0x1774 <__fp_powser+0x18>
    179a:	df 90       	pop	r13
    179c:	ef 90       	pop	r14
    179e:	ff 90       	pop	r15
    17a0:	0f 91       	pop	r16
    17a2:	1f 91       	pop	r17
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <inverse>:
    17aa:	9b 01       	movw	r18, r22
    17ac:	ac 01       	movw	r20, r24
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	80 e8       	ldi	r24, 0x80	; 128
    17b4:	9f e3       	ldi	r25, 0x3F	; 63
    17b6:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__divsf3>
    17ba:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>
    17be:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__fp_mpack>

000017c2 <ldexp>:
    17c2:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_splitA>
    17c6:	d8 f3       	brcs	.-10     	; 0x17be <inverse+0x14>
    17c8:	99 23       	and	r25, r25
    17ca:	c9 f3       	breq	.-14     	; 0x17be <inverse+0x14>
    17cc:	94 0f       	add	r25, r20
    17ce:	51 1d       	adc	r21, r1
    17d0:	a3 f3       	brvs	.-24     	; 0x17ba <inverse+0x10>
    17d2:	91 50       	subi	r25, 0x01	; 1
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	94 f0       	brlt	.+36     	; 0x17fc <ldexp+0x3a>
    17d8:	59 f0       	breq	.+22     	; 0x17f0 <ldexp+0x2e>
    17da:	88 23       	and	r24, r24
    17dc:	32 f0       	brmi	.+12     	; 0x17ea <ldexp+0x28>
    17de:	66 0f       	add	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	88 1f       	adc	r24, r24
    17e4:	91 50       	subi	r25, 0x01	; 1
    17e6:	50 40       	sbci	r21, 0x00	; 0
    17e8:	c1 f7       	brne	.-16     	; 0x17da <ldexp+0x18>
    17ea:	9e 3f       	cpi	r25, 0xFE	; 254
    17ec:	51 05       	cpc	r21, r1
    17ee:	2c f7       	brge	.-54     	; 0x17ba <inverse+0x10>
    17f0:	88 0f       	add	r24, r24
    17f2:	91 1d       	adc	r25, r1
    17f4:	96 95       	lsr	r25
    17f6:	87 95       	ror	r24
    17f8:	97 f9       	bld	r25, 7
    17fa:	08 95       	ret
    17fc:	5f 3f       	cpi	r21, 0xFF	; 255
    17fe:	ac f0       	brlt	.+42     	; 0x182a <ldexp+0x68>
    1800:	98 3e       	cpi	r25, 0xE8	; 232
    1802:	9c f0       	brlt	.+38     	; 0x182a <ldexp+0x68>
    1804:	bb 27       	eor	r27, r27
    1806:	86 95       	lsr	r24
    1808:	77 95       	ror	r23
    180a:	67 95       	ror	r22
    180c:	b7 95       	ror	r27
    180e:	08 f4       	brcc	.+2      	; 0x1812 <ldexp+0x50>
    1810:	b1 60       	ori	r27, 0x01	; 1
    1812:	93 95       	inc	r25
    1814:	c1 f7       	brne	.-16     	; 0x1806 <ldexp+0x44>
    1816:	bb 0f       	add	r27, r27
    1818:	58 f7       	brcc	.-42     	; 0x17f0 <ldexp+0x2e>
    181a:	11 f4       	brne	.+4      	; 0x1820 <ldexp+0x5e>
    181c:	60 ff       	sbrs	r22, 0
    181e:	e8 cf       	rjmp	.-48     	; 0x17f0 <ldexp+0x2e>
    1820:	6f 5f       	subi	r22, 0xFF	; 255
    1822:	7f 4f       	sbci	r23, 0xFF	; 255
    1824:	8f 4f       	sbci	r24, 0xFF	; 255
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	e3 cf       	rjmp	.-58     	; 0x17f0 <ldexp+0x2e>
    182a:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_szero>
    182e:	16 f0       	brts	.+4      	; 0x1834 <ldexp+0x72>
    1830:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__fp_mpack>
    1834:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_nan>
    1838:	68 94       	set
    183a:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_inf>

0000183e <log>:
    183e:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_splitA>
    1842:	a8 f3       	brcs	.-22     	; 0x182e <ldexp+0x6c>
    1844:	99 23       	and	r25, r25
    1846:	c1 f3       	breq	.-16     	; 0x1838 <ldexp+0x76>
    1848:	ae f3       	brts	.-22     	; 0x1834 <ldexp+0x72>
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	1f 93       	push	r17
    1850:	0f 93       	push	r16
    1852:	ff 92       	push	r15
    1854:	c9 2f       	mov	r28, r25
    1856:	dd 27       	eor	r29, r29
    1858:	88 23       	and	r24, r24
    185a:	2a f0       	brmi	.+10     	; 0x1866 <log+0x28>
    185c:	21 97       	sbiw	r28, 0x01	; 1
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	da f7       	brpl	.-10     	; 0x185c <log+0x1e>
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f eb       	ldi	r21, 0xBF	; 191
    186e:	9f e3       	ldi	r25, 0x3F	; 63
    1870:	88 39       	cpi	r24, 0x98	; 152
    1872:	20 f0       	brcs	.+8      	; 0x187c <log+0x3e>
    1874:	80 3e       	cpi	r24, 0xE0	; 224
    1876:	38 f0       	brcs	.+14     	; 0x1886 <log+0x48>
    1878:	21 96       	adiw	r28, 0x01	; 1
    187a:	8f 77       	andi	r24, 0x7F	; 127
    187c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__addsf3>
    1880:	ea e8       	ldi	r30, 0x8A	; 138
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	04 c0       	rjmp	.+8      	; 0x188e <log+0x50>
    1886:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__addsf3>
    188a:	e7 eb       	ldi	r30, 0xB7	; 183
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_powser>
    1892:	8b 01       	movw	r16, r22
    1894:	be 01       	movw	r22, r28
    1896:	ec 01       	movw	r28, r24
    1898:	fb 2e       	mov	r15, r27
    189a:	6f 57       	subi	r22, 0x7F	; 127
    189c:	71 09       	sbc	r23, r1
    189e:	75 95       	asr	r23
    18a0:	77 1f       	adc	r23, r23
    18a2:	88 0b       	sbc	r24, r24
    18a4:	99 0b       	sbc	r25, r25
    18a6:	0e 94 07 0a 	call	0x140e	; 0x140e <__floatsisf>
    18aa:	28 e1       	ldi	r18, 0x18	; 24
    18ac:	32 e7       	ldi	r19, 0x72	; 114
    18ae:	41 e3       	ldi	r20, 0x31	; 49
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3x>
    18b6:	af 2d       	mov	r26, r15
    18b8:	98 01       	movw	r18, r16
    18ba:	ae 01       	movw	r20, r28
    18bc:	ff 90       	pop	r15
    18be:	0f 91       	pop	r16
    18c0:	1f 91       	pop	r17
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	0e 94 0a 09 	call	0x1214	; 0x1214 <__addsf3x>
    18ca:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>

000018ce <modf>:
    18ce:	fa 01       	movw	r30, r20
    18d0:	dc 01       	movw	r26, r24
    18d2:	aa 0f       	add	r26, r26
    18d4:	bb 1f       	adc	r27, r27
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
    18da:	bf 57       	subi	r27, 0x7F	; 127
    18dc:	28 f4       	brcc	.+10     	; 0x18e8 <modf+0x1a>
    18de:	22 27       	eor	r18, r18
    18e0:	33 27       	eor	r19, r19
    18e2:	44 27       	eor	r20, r20
    18e4:	50 78       	andi	r21, 0x80	; 128
    18e6:	20 c0       	rjmp	.+64     	; 0x1928 <modf+0x5a>
    18e8:	b7 51       	subi	r27, 0x17	; 23
    18ea:	90 f4       	brcc	.+36     	; 0x1910 <modf+0x42>
    18ec:	ab 2f       	mov	r26, r27
    18ee:	00 24       	eor	r0, r0
    18f0:	46 95       	lsr	r20
    18f2:	37 95       	ror	r19
    18f4:	27 95       	ror	r18
    18f6:	01 1c       	adc	r0, r1
    18f8:	a3 95       	inc	r26
    18fa:	d2 f3       	brmi	.-12     	; 0x18f0 <modf+0x22>
    18fc:	00 20       	and	r0, r0
    18fe:	71 f0       	breq	.+28     	; 0x191c <modf+0x4e>
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	b3 95       	inc	r27
    1908:	da f3       	brmi	.-10     	; 0x1900 <modf+0x32>
    190a:	0e d0       	rcall	.+28     	; 0x1928 <modf+0x5a>
    190c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__subsf3>
    1910:	61 30       	cpi	r22, 0x01	; 1
    1912:	71 05       	cpc	r23, r1
    1914:	a0 e8       	ldi	r26, 0x80	; 128
    1916:	8a 07       	cpc	r24, r26
    1918:	b9 46       	sbci	r27, 0x69	; 105
    191a:	30 f4       	brcc	.+12     	; 0x1928 <modf+0x5a>
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
    1920:	66 27       	eor	r22, r22
    1922:	77 27       	eor	r23, r23
    1924:	88 27       	eor	r24, r24
    1926:	90 78       	andi	r25, 0x80	; 128
    1928:	30 96       	adiw	r30, 0x00	; 0
    192a:	21 f0       	breq	.+8      	; 0x1934 <modf+0x66>
    192c:	20 83       	st	Z, r18
    192e:	31 83       	std	Z+1, r19	; 0x01
    1930:	42 83       	std	Z+2, r20	; 0x02
    1932:	53 83       	std	Z+3, r21	; 0x03
    1934:	08 95       	ret

00001936 <__fp_mpack>:
    1936:	9f 3f       	cpi	r25, 0xFF	; 255
    1938:	31 f0       	breq	.+12     	; 0x1946 <__fp_mpack_finite+0xc>

0000193a <__fp_mpack_finite>:
    193a:	91 50       	subi	r25, 0x01	; 1
    193c:	20 f4       	brcc	.+8      	; 0x1946 <__fp_mpack_finite+0xc>
    193e:	87 95       	ror	r24
    1940:	77 95       	ror	r23
    1942:	67 95       	ror	r22
    1944:	b7 95       	ror	r27
    1946:	88 0f       	add	r24, r24
    1948:	91 1d       	adc	r25, r1
    194a:	96 95       	lsr	r25
    194c:	87 95       	ror	r24
    194e:	97 f9       	bld	r25, 7
    1950:	08 95       	ret

00001952 <__divmodsi4>:
    1952:	05 2e       	mov	r0, r21
    1954:	97 fb       	bst	r25, 7
    1956:	1e f4       	brtc	.+6      	; 0x195e <__divmodsi4+0xc>
    1958:	00 94       	com	r0
    195a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__negsi2>
    195e:	57 fd       	sbrc	r21, 7
    1960:	07 d0       	rcall	.+14     	; 0x1970 <__divmodsi4_neg2>
    1962:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__udivmodsi4>
    1966:	07 fc       	sbrc	r0, 7
    1968:	03 d0       	rcall	.+6      	; 0x1970 <__divmodsi4_neg2>
    196a:	4e f4       	brtc	.+18     	; 0x197e <__divmodsi4_exit>
    196c:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__negsi2>

00001970 <__divmodsi4_neg2>:
    1970:	50 95       	com	r21
    1972:	40 95       	com	r20
    1974:	30 95       	com	r19
    1976:	21 95       	neg	r18
    1978:	3f 4f       	sbci	r19, 0xFF	; 255
    197a:	4f 4f       	sbci	r20, 0xFF	; 255
    197c:	5f 4f       	sbci	r21, 0xFF	; 255

0000197e <__divmodsi4_exit>:
    197e:	08 95       	ret

00001980 <__negsi2>:
    1980:	90 95       	com	r25
    1982:	80 95       	com	r24
    1984:	70 95       	com	r23
    1986:	61 95       	neg	r22
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	08 95       	ret

00001990 <__tablejump2__>:
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	05 90       	lpm	r0, Z+
    1996:	f4 91       	lpm	r31, Z
    1998:	e0 2d       	mov	r30, r0
    199a:	09 94       	ijmp

0000199c <__umulhisi3>:
    199c:	a2 9f       	mul	r26, r18
    199e:	b0 01       	movw	r22, r0
    19a0:	b3 9f       	mul	r27, r19
    19a2:	c0 01       	movw	r24, r0
    19a4:	a3 9f       	mul	r26, r19
    19a6:	70 0d       	add	r23, r0
    19a8:	81 1d       	adc	r24, r1
    19aa:	11 24       	eor	r1, r1
    19ac:	91 1d       	adc	r25, r1
    19ae:	b2 9f       	mul	r27, r18
    19b0:	70 0d       	add	r23, r0
    19b2:	81 1d       	adc	r24, r1
    19b4:	11 24       	eor	r1, r1
    19b6:	91 1d       	adc	r25, r1
    19b8:	08 95       	ret

000019ba <__umulsidi3>:
    19ba:	e8 94       	clt

000019bc <__umulsidi3_helper>:
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	fc 01       	movw	r30, r24
    19c2:	db 01       	movw	r26, r22
    19c4:	0e 94 ce 0c 	call	0x199c	; 0x199c <__umulhisi3>
    19c8:	7f 93       	push	r23
    19ca:	6f 93       	push	r22
    19cc:	e9 01       	movw	r28, r18
    19ce:	9a 01       	movw	r18, r20
    19d0:	ac 01       	movw	r20, r24
    19d2:	bf 93       	push	r27
    19d4:	af 93       	push	r26
    19d6:	3f 93       	push	r19
    19d8:	2f 93       	push	r18
    19da:	df 01       	movw	r26, r30
    19dc:	0e 94 ce 0c 	call	0x199c	; 0x199c <__umulhisi3>
    19e0:	26 f4       	brtc	.+8      	; 0x19ea <__umulsidi3_helper+0x2e>
    19e2:	6c 1b       	sub	r22, r28
    19e4:	7d 0b       	sbc	r23, r29
    19e6:	82 0b       	sbc	r24, r18
    19e8:	93 0b       	sbc	r25, r19
    19ea:	9e 01       	movw	r18, r28
    19ec:	eb 01       	movw	r28, r22
    19ee:	fc 01       	movw	r30, r24
    19f0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muldi3_6>
    19f4:	af 91       	pop	r26
    19f6:	bf 91       	pop	r27
    19f8:	2f 91       	pop	r18
    19fa:	3f 91       	pop	r19
    19fc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muldi3_6>
    1a00:	be 01       	movw	r22, r28
    1a02:	cf 01       	movw	r24, r30
    1a04:	f9 01       	movw	r30, r18
    1a06:	2f 91       	pop	r18
    1a08:	3f 91       	pop	r19
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <__ashrdi3>:
    1a10:	97 fb       	bst	r25, 7
    1a12:	10 f8       	bld	r1, 0

00001a14 <__lshrdi3>:
    1a14:	16 94       	lsr	r1
    1a16:	00 08       	sbc	r0, r0
    1a18:	0f 93       	push	r16
    1a1a:	08 30       	cpi	r16, 0x08	; 8
    1a1c:	98 f0       	brcs	.+38     	; 0x1a44 <__lshrdi3+0x30>
    1a1e:	08 50       	subi	r16, 0x08	; 8
    1a20:	23 2f       	mov	r18, r19
    1a22:	34 2f       	mov	r19, r20
    1a24:	45 2f       	mov	r20, r21
    1a26:	56 2f       	mov	r21, r22
    1a28:	67 2f       	mov	r22, r23
    1a2a:	78 2f       	mov	r23, r24
    1a2c:	89 2f       	mov	r24, r25
    1a2e:	90 2d       	mov	r25, r0
    1a30:	f4 cf       	rjmp	.-24     	; 0x1a1a <__lshrdi3+0x6>
    1a32:	05 94       	asr	r0
    1a34:	97 95       	ror	r25
    1a36:	87 95       	ror	r24
    1a38:	77 95       	ror	r23
    1a3a:	67 95       	ror	r22
    1a3c:	57 95       	ror	r21
    1a3e:	47 95       	ror	r20
    1a40:	37 95       	ror	r19
    1a42:	27 95       	ror	r18
    1a44:	0a 95       	dec	r16
    1a46:	aa f7       	brpl	.-22     	; 0x1a32 <__lshrdi3+0x1e>
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret

00001a4c <__udivmodsi4>:
    1a4c:	a1 e2       	ldi	r26, 0x21	; 33
    1a4e:	1a 2e       	mov	r1, r26
    1a50:	aa 1b       	sub	r26, r26
    1a52:	bb 1b       	sub	r27, r27
    1a54:	fd 01       	movw	r30, r26
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <__udivmodsi4_ep>

00001a58 <__udivmodsi4_loop>:
    1a58:	aa 1f       	adc	r26, r26
    1a5a:	bb 1f       	adc	r27, r27
    1a5c:	ee 1f       	adc	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	a2 17       	cp	r26, r18
    1a62:	b3 07       	cpc	r27, r19
    1a64:	e4 07       	cpc	r30, r20
    1a66:	f5 07       	cpc	r31, r21
    1a68:	20 f0       	brcs	.+8      	; 0x1a72 <__udivmodsi4_ep>
    1a6a:	a2 1b       	sub	r26, r18
    1a6c:	b3 0b       	sbc	r27, r19
    1a6e:	e4 0b       	sbc	r30, r20
    1a70:	f5 0b       	sbc	r31, r21

00001a72 <__udivmodsi4_ep>:
    1a72:	66 1f       	adc	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	1a 94       	dec	r1
    1a7c:	69 f7       	brne	.-38     	; 0x1a58 <__udivmodsi4_loop>
    1a7e:	60 95       	com	r22
    1a80:	70 95       	com	r23
    1a82:	80 95       	com	r24
    1a84:	90 95       	com	r25
    1a86:	9b 01       	movw	r18, r22
    1a88:	ac 01       	movw	r20, r24
    1a8a:	bd 01       	movw	r22, r26
    1a8c:	cf 01       	movw	r24, r30
    1a8e:	08 95       	ret

00001a90 <__muldi3_6>:
    1a90:	0e 94 ce 0c 	call	0x199c	; 0x199c <__umulhisi3>
    1a94:	46 0f       	add	r20, r22
    1a96:	57 1f       	adc	r21, r23
    1a98:	c8 1f       	adc	r28, r24
    1a9a:	d9 1f       	adc	r29, r25
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <__muldi3_6+0x10>
    1a9e:	31 96       	adiw	r30, 0x01	; 1
    1aa0:	08 95       	ret

00001aa2 <_exit>:
    1aa2:	f8 94       	cli

00001aa4 <__stop_program>:
    1aa4:	ff cf       	rjmp	.-2      	; 0x1aa4 <__stop_program>
