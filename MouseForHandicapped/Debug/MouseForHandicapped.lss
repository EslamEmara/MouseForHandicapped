
MouseForHandicapped.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001732  000017c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800066  00800066  000017cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001838  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000375e  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001317  00000000  00000000  000052be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022f1  00000000  00000000  000065d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  000088c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001218  00000000  00000000  00008fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f23  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000c10f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
       4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_1>
       8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      28:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <usbFunctionSetup+0x4>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
      d6:	05 01       	movw	r0, r10
      d8:	09 02       	muls	r16, r25
      da:	a1 01       	movw	r20, r2
      dc:	09 01       	movw	r0, r18
      de:	a1 00       	.word	0x00a1	; ????
      e0:	05 09       	sbc	r16, r5
      e2:	19 01       	movw	r2, r18
      e4:	29 03       	fmul	r18, r17
      e6:	15 00       	.word	0x0015	; ????
      e8:	25 01       	movw	r4, r10
      ea:	95 03       	fmuls	r17, r21
      ec:	75 01       	movw	r14, r10
      ee:	81 02       	muls	r24, r17
      f0:	95 01       	movw	r18, r10
      f2:	75 05       	cpc	r23, r5
      f4:	81 03       	fmuls	r16, r17
      f6:	05 01       	movw	r0, r10
      f8:	09 30       	cpi	r16, 0x09	; 9
      fa:	09 31       	cpi	r16, 0x19	; 25
      fc:	09 38       	cpi	r16, 0x89	; 137
      fe:	15 81       	ldd	r17, Z+5	; 0x05
     100:	25 7f       	andi	r18, 0xF5	; 245
     102:	75 08       	sbc	r7, r5
     104:	95 03       	fmuls	r17, r21
     106:	81 06       	cpc	r8, r17
     108:	c0 c0       	rjmp	.+384    	; 0x28a <rxbit2+0x2>

0000010a <usbDescriptorConfiguration>:
     10a:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
     11a:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
     12a:	00 64                                               .d

0000012c <usbDescriptorDevice>:
     12c:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
     13c:	00 01                                               ..

0000013e <usbDescriptorStringDevice>:
     13e:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

0000014a <usbDescriptorStringVendor>:
     14a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
     15a:	74 00                                               t.

0000015c <usbDescriptorString0>:
     15c:	04 03 09 04                                         ....

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf e5       	ldi	r28, 0x5F	; 95
     166:	d8 e0       	ldi	r29, 0x08	; 8
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	a0 e6       	ldi	r26, 0x60	; 96
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e2 e3       	ldi	r30, 0x32	; 50
     174:	f7 e1       	ldi	r31, 0x17	; 23
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	a6 36       	cpi	r26, 0x66	; 102
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	a6 e6       	ldi	r26, 0x66	; 102
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	a0 3b       	cpi	r26, 0xB0	; 176
     18e:	b2 07       	cpc	r27, r18
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	0e 94 c9 04 	call	0x992	; 0x992 <main>
     196:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_exit>

0000019a <__bad_interrupt>:
     19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     19e:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     1a0:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     1a6:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     1a8:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     1aa:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     1ac:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <usbCrcLoopEntry>

000001b0 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     1b0:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     1b2:	82 27       	eor	r24, r18

000001b4 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     1b4:	97 95       	ror	r25
    ror     resCrcL
     1b6:	87 95       	ror	r24
    brcs    usbCrcNoXor
     1b8:	10 f0       	brcs	.+4      	; 0x1be <usbCrcNoXor>
    eor     resCrcL, polyL
     1ba:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     1bc:	95 27       	eor	r25, r21

000001be <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     1be:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     1c0:	c8 f3       	brcs	.-14     	; 0x1b4 <usbCrcBitLoop>

000001c2 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     1c2:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     1c4:	a8 f3       	brcs	.-22     	; 0x1b0 <usbCrcByteLoop>

000001c6 <usbCrcReady>:
usbCrcReady:
    ret
     1c6:	08 95       	ret

000001c8 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     1c8:	ea df       	rcall	.-44     	; 0x19e <usbCrc16>
    st      ptr+, resCrcL
     1ca:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     1cc:	9d 93       	st	X+, r25
    ret
     1ce:	08 95       	ret

000001d0 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     1d0:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     1d2:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     1d4:	cf 93       	push	r28

000001d6 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     1d6:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     1d8:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
     1da:	e9 f7       	brne	.-6      	; 0x1d6 <waitForJ>

000001dc <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     1dc:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1de:	09 c0       	rjmp	.+18     	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1e0:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1e4:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1e8:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1ec:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     1f0:	a3 c0       	rjmp	.+326    	; 0x338 <sofError>

000001f2 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     1f2:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     1f4:	c0 91 93 00 	lds	r28, 0x0093	; 0x800093 <usbInputBufOffset>
    clr     YH                  ;1 [5]
     1f8:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     1fa:	c6 56       	subi	r28, 0x66	; 102
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     1fc:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     1fe:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
     200:	02 c0       	rjmp	.+4      	; 0x206 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
     202:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
     204:	eb cf       	rjmp	.-42     	; 0x1dc <waitForK>

00000206 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     206:	2f 93       	push	r18
    push    x1              ;2 [12]
     208:	0f 93       	push	r16
    push    x2              ;2 [14]
     20a:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     20c:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
     20e:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     210:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
     212:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     214:	4f 93       	push	r20
    push    cnt             ;2 [24]
     216:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     218:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
     21a:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     21c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     21e:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
     220:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     222:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     224:	31 c0       	rjmp	.+98     	; 0x288 <rxbit2>

00000226 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     226:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     228:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     22a:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
     22c:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     22e:	28 c0       	rjmp	.+80     	; 0x280 <didUnstuff0>

00000230 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     230:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     232:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     234:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     236:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     238:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
     23a:	29 c0       	rjmp	.+82     	; 0x28e <didUnstuff1>

0000023c <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     23c:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     23e:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     240:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     242:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     244:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
     246:	2b c0       	rjmp	.+86     	; 0x29e <didUnstuff2>

00000248 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     248:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
     24a:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     24c:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     24e:	2a c0       	rjmp	.+84     	; 0x2a4 <didUnstuff3>

00000250 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     250:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     252:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
     254:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     256:	2c c0       	rjmp	.+88     	; 0x2b0 <didUnstuff4>

00000258 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     258:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     25a:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
     25c:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     25e:	2f c0       	rjmp	.+94     	; 0x2be <didUnstuff5>

00000260 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     260:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     262:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
     264:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     266:	32 c0       	rjmp	.+100    	; 0x2cc <didUnstuff6>

00000268 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     268:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     26a:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
     26c:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     26e:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     270:	00 00       	nop
    eor     x2, x1      ;1 [6]
     272:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     274:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
     276:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     278:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
     27a:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
     27c:	c9 f1       	breq	.+114    	; 0x2f0 <se0>
    andi    shift, 0xf9 ;1 [12]
     27e:	29 7f       	andi	r18, 0xF9	; 249

00000280 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     280:	91 f2       	breq	.-92     	; 0x226 <unstuff0>
    eor     x1, x2      ;1 [14]
     282:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     284:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
     286:	21 f9       	bld	r18, 1

00000288 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     288:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
     28a:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     28c:	89 f2       	breq	.-94     	; 0x230 <unstuff1>

0000028e <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     28e:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     290:	58 f1       	brcs	.+86     	; 0x2e8 <overflow>
    eor     x2, x1      ;1 [22]
     292:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     294:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
     296:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     298:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
     29a:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     29c:	79 f2       	breq	.-98     	; 0x23c <unstuff2>

0000029e <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     29e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     2a0:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
     2a2:	23 f9       	bld	r18, 3

000002a4 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     2a4:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     2a6:	81 f2       	breq	.-96     	; 0x248 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     2a8:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
     2aa:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     2ac:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
     2ae:	24 f9       	bld	r18, 4

000002b0 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     2b0:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     2b2:	71 f2       	breq	.-100    	; 0x250 <unstuff4>
    nop2                ;2 [40]
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     2b6:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
     2b8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     2ba:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
     2bc:	25 f9       	bld	r18, 5

000002be <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     2be:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     2c0:	59 f2       	breq	.-106    	; 0x258 <unstuff5>
    nop2                ;2 [48]
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     2c4:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
     2c6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     2c8:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
     2ca:	26 f9       	bld	r18, 6

000002cc <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     2cc:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     2ce:	40 f2       	brcs	.-112    	; 0x260 <unstuff6>
    nop2                ;2 [56]
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     2d2:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
     2d4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     2d6:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
     2d8:	27 f9       	bld	r18, 7

000002da <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     2da:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     2dc:	28 f6       	brcc	.-118    	; 0x268 <rxLoop>

000002de <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     2de:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     2e0:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     2e2:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
     2e4:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     2e6:	f9 cf       	rjmp	.-14     	; 0x2da <didUnstuff7>

000002e8 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     2e8:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     2ea:	1a bf       	out	0x3a, r17	; 58

000002ec <ignorePacket>:
ignorePacket:
    clr     token
     2ec:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     2ee:	19 c0       	rjmp	.+50     	; 0x322 <handleSetupOrOut>

000002f0 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     2f0:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     2f2:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     2f4:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     2f6:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     2f8:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     2fa:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     2fc:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     2fe:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     300:	f9 f0       	breq	.+62     	; 0x340 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     302:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     304:	e9 f0       	breq	.+58     	; 0x340 <handleData>
    lds     shift, usbDeviceAddr;[17]
     306:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     30a:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     30c:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     30e:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     310:	ed cf       	rjmp	.-38     	; 0x2ec <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     312:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     314:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     316:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     318:	41 f1       	breq	.+80     	; 0x36a <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     31a:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     31c:	11 f0       	breq	.+4      	; 0x322 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     31e:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     320:	29 f7       	brne	.-54     	; 0x2ec <ignorePacket>

00000322 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     322:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <usbCurrentTok>

00000326 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     326:	3f 91       	pop	r19
     328:	4f 91       	pop	r20
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	2f 91       	pop	r18
     330:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
     332:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     334:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     336:	4f cf       	rjmp	.-354    	; 0x1d6 <waitForJ>

00000338 <sofError>:
sofError:
    POP_RETI                    ;macro call
     338:	cf 91       	pop	r28
     33a:	cf bf       	out	0x3f, r28	; 63
     33c:	cf 91       	pop	r28
    reti
     33e:	18 95       	reti

00000340 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     340:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <usbCurrentTok>
    tst     shift               ;[20]
     344:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     346:	79 f3       	breq	.-34     	; 0x326 <doReturn>
    lds     x2, usbRxLen        ;[22]
     348:	10 91 96 00 	lds	r17, 0x0096	; 0x800096 <usbRxLen>
    tst     x2                  ;[24]
     34c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     34e:	69 f5       	brne	.+90     	; 0x3aa <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     350:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     352:	6a f1       	brmi	.+90     	; 0x3ae <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     354:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     358:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     35c:	10 91 93 00 	lds	r17, 0x0093	; 0x800093 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     360:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     362:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     364:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     368:	22 c0       	rjmp	.+68     	; 0x3ae <sendAckAndReti>

0000036a <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     36a:	00 91 96 00 	lds	r16, 0x0096	; 0x800096 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     36e:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     370:	e4 f4       	brge	.+56     	; 0x3aa <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     372:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     374:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     376:	49 f4       	brne	.+18     	; 0x38a <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     378:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     37c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     37e:	19 c0       	rjmp	.+50     	; 0x3b2 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     380:	00 93 65 00 	sts	0x0065, r16	; 0x800065 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     384:	ca e7       	ldi	r28, 0x7A	; 122
    ldi     YH, hi8(usbTxBuf)   ;[44]
     386:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     388:	18 c0       	rjmp	.+48     	; 0x3ba <usbSendAndReti>

0000038a <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     38a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     38e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     390:	10 c0       	rjmp	.+32     	; 0x3b2 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     392:	00 93 85 00 	sts	0x0085, r16	; 0x800085 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     396:	c6 e8       	ldi	r28, 0x86	; 134
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     398:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     39a:	0f c0       	rjmp	.+30     	; 0x3ba <usbSendAndReti>

0000039c <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
     39c:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
     39e:	a8 f4       	brcc	.+42     	; 0x3ca <doExorN1>
    subi    x4, 1               ;[-3]
     3a0:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
     3a2:	a9 f4       	brne	.+42     	; 0x3ce <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
     3a4:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
     3a6:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
     3a8:	f9 cf       	rjmp	.-14     	; 0x39c <stuffN1Delay>

000003aa <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     3aa:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <usbSendX3>

000003ae <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     3ae:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <usbSendX3>

000003b2 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     3b2:	43 2f       	mov	r20, r19

000003b4 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     3b4:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     3b6:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     3b8:	32 e0       	ldi	r19, 0x02	; 2

000003ba <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
     3ba:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
     3bc:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     3be:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
     3c0:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
     3c2:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
     3c4:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
     3c6:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
     3c8:	5f 93       	push	r21

000003ca <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
     3ca:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
     3cc:	56 e0       	ldi	r21, 0x06	; 6

000003ce <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
     3ce:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
     3d0:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
     3d2:	20 f4       	brcc	.+8      	; 0x3dc <doExorN2>
    subi    x4, 1               ;[03]
     3d4:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
     3d6:	21 f4       	brne	.+8      	; 0x3e0 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
     3d8:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
     3da:	f9 cf       	rjmp	.-14     	; 0x3ce <commonN1>

000003dc <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
     3dc:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
     3de:	56 e0       	ldi	r21, 0x06	; 6

000003e0 <commonN2>:
commonN2:
    nop                         ;[06] [14]
     3e0:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
     3e2:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
     3e4:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
     3e6:	d0 f2       	brcs	.-76     	; 0x39c <stuffN1Delay>

000003e8 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
     3e8:	27 95       	ror	r18
    brcc    doExor6             ;[43]
     3ea:	28 f4       	brcc	.+10     	; 0x3f6 <doExor6>
    subi    x4, 1               ;[44]
     3ec:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
     3ee:	29 f4       	brne	.+10     	; 0x3fa <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
     3f0:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
     3f2:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
     3f4:	f9 cf       	rjmp	.-14     	; 0x3e8 <stuff6Delay>

000003f6 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
     3f6:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
     3f8:	56 e0       	ldi	r21, 0x06	; 6

000003fa <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
     3fa:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
     3fc:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
     3fe:	20 f4       	brcc	.+8      	; 0x408 <doExor7>
    subi    x4, 1               ;[50]
     400:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
     402:	21 f4       	brne	.+8      	; 0x40c <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
     404:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
     406:	f9 cf       	rjmp	.-14     	; 0x3fa <common6>

00000408 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
     408:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
     40a:	56 e0       	ldi	r21, 0x06	; 6

0000040c <common7>:
common7:
    ld      shift, y+           ;[53]
     40c:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
     40e:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
     410:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
     412:	21 f6       	brne	.-120    	; 0x39c <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     414:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
     416:	10 91 97 00 	lds	r17, 0x0097	; 0x800097 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
     41a:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
     41c:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
     41e:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     420:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
     422:	11 f0       	breq	.+4      	; 0x428 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
     424:	10 93 91 00 	sts	0x0091, r17	; 0x800091 <usbDeviceAddr>

00000428 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
     428:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
     42a:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
     42c:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
     42e:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
     430:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
     432:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
     434:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
     436:	5f 91       	pop	r21
    nop2                        ;[12]
     438:	00 c0       	rjmp	.+0      	; 0x43a <skipAddrAssign+0x12>
    nop2                        ;[14]
     43a:	00 c0       	rjmp	.+0      	; 0x43c <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
     43c:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
     43e:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
     440:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
     442:	71 cf       	rjmp	.-286    	; 0x326 <doReturn>

00000444 <App_Init>:
	if( sensor_S>LOW_CALIBRATED && sensor_G>LOW_CALIBRATED && sensor_A>LOW_CALIBRATED && sensor_M>LOW_CALIBRATED )
	{
		return CALIBRATED;
	}
	return NOT_CALIBRATED;
}
     444:	8b b3       	in	r24, 0x1b	; 27
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	0e 94 1f 04 	call	0x83e	; 0x83e <LED_Init>
     44c:	8b b3       	in	r24, 0x1b	; 27
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	0e 94 23 04 	call	0x846	; 0x846 <LED_TurnOn>
     454:	8b b3       	in	r24, 0x1b	; 27
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	0e 94 1f 04 	call	0x83e	; 0x83e <LED_Init>
     45c:	0e 94 c5 03 	call	0x78a	; 0x78a <BNO055_Init>
     460:	0e 94 8b 04 	call	0x916	; 0x916 <Mouse_init>
     464:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     468:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     46c:	0e 94 c0 04 	call	0x980	; 0x980 <Touch_Init>
     470:	08 95       	ret

00000472 <App_OrderMouse>:
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	61 f0       	breq	.+24     	; 0x48e <App_OrderMouse+0x1c>
     476:	28 f4       	brcc	.+10     	; 0x482 <App_OrderMouse+0x10>
     478:	88 23       	and	r24, r24
     47a:	79 f0       	breq	.+30     	; 0x49a <App_OrderMouse+0x28>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	81 f0       	breq	.+32     	; 0x4a0 <App_OrderMouse+0x2e>
     480:	08 95       	ret
     482:	84 30       	cpi	r24, 0x04	; 4
     484:	81 f0       	breq	.+32     	; 0x4a6 <App_OrderMouse+0x34>
     486:	30 f0       	brcs	.+12     	; 0x494 <App_OrderMouse+0x22>
     488:	85 30       	cpi	r24, 0x05	; 5
     48a:	81 f0       	breq	.+32     	; 0x4ac <App_OrderMouse+0x3a>
     48c:	08 95       	ret
     48e:	0e 94 a8 04 	call	0x950	; 0x950 <Mouse_MoveLeft>
     492:	08 95       	ret
     494:	0e 94 ac 04 	call	0x958	; 0x958 <Mouse_MoveRight>
     498:	08 95       	ret
     49a:	0e 94 b0 04 	call	0x960	; 0x960 <Mouse_MoveUp>
     49e:	08 95       	ret
     4a0:	0e 94 b4 04 	call	0x968	; 0x968 <Mouse_MoveDown>
     4a4:	08 95       	ret
     4a6:	0e 94 bc 04 	call	0x978	; 0x978 <Mouse_LeftClick>
     4aa:	08 95       	ret
     4ac:	0e 94 b8 04 	call	0x970	; 0x970 <Mouse_RightClick>
     4b0:	08 95       	ret

000004b2 <App_GetTouchSensorState>:
     4b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4ba:	0e 94 c5 04 	call	0x98a	; 0x98a <Touch_Read>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	51 f4       	brne	.+20     	; 0x4d6 <App_GetTouchSensorState+0x24>
     4c2:	8b b3       	in	r24, 0x1b	; 27
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	0e 94 23 04 	call	0x846	; 0x846 <LED_TurnOn>
     4ca:	8b b3       	in	r24, 0x1b	; 27
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	0e 94 26 04 	call	0x84c	; 0x84c <LED_TurnOff>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	08 95       	ret
     4d6:	8b b3       	in	r24, 0x1b	; 27
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	0e 94 26 04 	call	0x84c	; 0x84c <LED_TurnOff>
     4de:	8b b3       	in	r24, 0x1b	; 27
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	0e 94 23 04 	call	0x846	; 0x846 <LED_TurnOn>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret

000004ea <App_GetImuCalibPoint>:
     4ea:	8f e6       	ldi	r24, 0x6F	; 111
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <BNO055_ReadEulerAngles>
     4f2:	08 95       	ret

000004f4 <App_GetLargestAngle>:
 * return: index of the largest value (1 or 2 or 3) -> u8_t
 * Ex: index = App_GetLargestAngle(54,21,100); -> index=3
 */
u8_t App_GetLargestAngle(s16_t value1,s16_t value2,s16_t value3)
{ // yaw roll pitch
	value1 = abs(value1);
     4f4:	9c 01       	movw	r18, r24
     4f6:	99 23       	and	r25, r25
     4f8:	24 f4       	brge	.+8      	; 0x502 <App_GetLargestAngle+0xe>
     4fa:	22 27       	eor	r18, r18
     4fc:	33 27       	eor	r19, r19
     4fe:	28 1b       	sub	r18, r24
     500:	39 0b       	sbc	r19, r25
	value2 = abs(value2);
     502:	cb 01       	movw	r24, r22
     504:	99 23       	and	r25, r25
     506:	24 f4       	brge	.+8      	; 0x510 <App_GetLargestAngle+0x1c>
     508:	88 27       	eor	r24, r24
     50a:	99 27       	eor	r25, r25
     50c:	86 1b       	sub	r24, r22
     50e:	97 0b       	sbc	r25, r23
	value3 = abs(value3);
     510:	ba 01       	movw	r22, r20
     512:	55 23       	and	r21, r21
     514:	24 f4       	brge	.+8      	; 0x51e <App_GetLargestAngle+0x2a>
     516:	66 27       	eor	r22, r22
     518:	77 27       	eor	r23, r23
     51a:	64 1b       	sub	r22, r20
     51c:	75 0b       	sbc	r23, r21
	if(value1 > value2)
     51e:	82 17       	cp	r24, r18
     520:	93 07       	cpc	r25, r19
     522:	2c f4       	brge	.+10     	; 0x52e <App_GetLargestAngle+0x3a>
	{
		if(value1 > value3)		{ return 1; }
     524:	62 17       	cp	r22, r18
     526:	73 07       	cpc	r23, r19
     528:	3c f4       	brge	.+14     	; 0x538 <App_GetLargestAngle+0x44>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	08 95       	ret
		else 					{ return 3; }
	}
	else
	{
		if(value2 > value3)		{ return 2; }
     52e:	68 17       	cp	r22, r24
     530:	79 07       	cpc	r23, r25
     532:	24 f4       	brge	.+8      	; 0x53c <App_GetLargestAngle+0x48>
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	08 95       	ret
	value2 = abs(value2);
	value3 = abs(value3);
	if(value1 > value2)
	{
		if(value1 > value3)		{ return 1; }
		else 					{ return 3; }
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	08 95       	ret
	}
	else
	{
		if(value2 > value3)		{ return 2; }
		else 					{ return 3; }
     53c:	83 e0       	ldi	r24, 0x03	; 3
	}
     53e:	08 95       	ret

00000540 <App_GetImuGradient>:
 * Args: None
 * Return: u8_t gradient_Direction -> (LEFT, RIGHT, UP, DOWN)
 * Ex: u8_t direction = App_GetImuGradient();
 */				
u8_t App_GetImuGradient(void)
{
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
	s16_t absolute_gradient[3]; // current_reading - reference_point
	//-- get current imu reading
	BNO055_ReadEulerAngles(current_reading);
     54c:	89 e6       	ldi	r24, 0x69	; 105
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <BNO055_ReadEulerAngles>
	//-- compare this reading to calibration point to know imu (head) gradient
	absolute_gradient[0] = current_reading[0] - reference_angles[0]; // YAW
     554:	a9 e6       	ldi	r26, 0x69	; 105
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	ed 90       	ld	r14, X+
     55a:	fc 90       	ld	r15, X
     55c:	11 97       	sbiw	r26, 0x01	; 1
     55e:	ef e6       	ldi	r30, 0x6F	; 111
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	91 81       	ldd	r25, Z+1	; 0x01
     566:	e8 1a       	sub	r14, r24
     568:	f9 0a       	sbc	r15, r25
	absolute_gradient[1] = current_reading[1] - reference_angles[1]; // ROLL
     56a:	12 96       	adiw	r26, 0x02	; 2
     56c:	cd 91       	ld	r28, X+
     56e:	dc 91       	ld	r29, X
     570:	13 97       	sbiw	r26, 0x03	; 3
     572:	82 81       	ldd	r24, Z+2	; 0x02
     574:	93 81       	ldd	r25, Z+3	; 0x03
     576:	c8 1b       	sub	r28, r24
     578:	d9 0b       	sbc	r29, r25
	absolute_gradient[2] = current_reading[2] - reference_angles[2]; // PITCH
     57a:	14 96       	adiw	r26, 0x04	; 4
     57c:	0d 91       	ld	r16, X+
     57e:	1c 91       	ld	r17, X
     580:	15 97       	sbiw	r26, 0x05	; 5
     582:	84 81       	ldd	r24, Z+4	; 0x04
     584:	95 81       	ldd	r25, Z+5	; 0x05
     586:	08 1b       	sub	r16, r24
     588:	19 0b       	sbc	r17, r25
	//-- decide depending on calculations to which direction mouse should move
	// get the largest angle of them (sign isn't considered)
	u8_t angle_name = App_GetLargestAngle(absolute_gradient[0],absolute_gradient[1],absolute_gradient[2]);
     58a:	a8 01       	movw	r20, r16
     58c:	be 01       	movw	r22, r28
     58e:	c7 01       	movw	r24, r14
     590:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <App_GetLargestAngle>
	switch(angle_name)
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	29 f0       	breq	.+10     	; 0x5a2 <App_GetImuGradient+0x62>
     598:	83 30       	cpi	r24, 0x03	; 3
     59a:	81 f0       	breq	.+32     	; 0x5bc <App_GetImuGradient+0x7c>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	19 f5       	brne	.+70     	; 0x5e6 <App_GetImuGradient+0xa6>
     5a0:	17 c0       	rjmp	.+46     	; 0x5d0 <App_GetImuGradient+0x90>
	{
		// head is turned around X-axis
		case ROLL:
			// positive angle > threshold?
			if(absolute_gradient[0] >= THRESHOLD_X ){ return RIGHT_CLICK; }
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	e8 16       	cp	r14, r24
     5a6:	f1 04       	cpc	r15, r1
     5a8:	04 f5       	brge	.+64     	; 0x5ea <App_GetImuGradient+0xaa>
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[0]) >= THRESHOLD_X ){ return LEFT_CLICK; }
     5aa:	f1 94       	neg	r15
     5ac:	e1 94       	neg	r14
     5ae:	f1 08       	sbc	r15, r1
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	e8 16       	cp	r14, r24
     5b4:	f1 04       	cpc	r15, r1
     5b6:	dc f4       	brge	.+54     	; 0x5ee <App_GetImuGradient+0xae>
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
			break;
	}
	//-- no head motion 
	return NOTHING;
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	22 c0       	rjmp	.+68     	; 0x600 <App_GetImuGradient+0xc0>
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[0]) >= THRESHOLD_X ){ return LEFT_CLICK; }
			break;
		// head is turned around Y-axis
		case PITCH:
			if(absolute_gradient[1] >= THRESHOLD_Y){ return UP; }
     5bc:	ca 30       	cpi	r28, 0x0A	; 10
     5be:	d1 05       	cpc	r29, r1
     5c0:	c4 f4       	brge	.+48     	; 0x5f2 <App_GetImuGradient+0xb2>
			else if ( (-1*absolute_gradient[1]) >= THRESHOLD_Y ){ return DOWN; }
     5c2:	d1 95       	neg	r29
     5c4:	c1 95       	neg	r28
     5c6:	d1 09       	sbc	r29, r1
     5c8:	2a 97       	sbiw	r28, 0x0a	; 10
     5ca:	ac f4       	brge	.+42     	; 0x5f6 <App_GetImuGradient+0xb6>
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
			break;
	}
	//-- no head motion 
	return NOTHING;
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	18 c0       	rjmp	.+48     	; 0x600 <App_GetImuGradient+0xc0>
			if(absolute_gradient[1] >= THRESHOLD_Y){ return UP; }
			else if ( (-1*absolute_gradient[1]) >= THRESHOLD_Y ){ return DOWN; }
			break;
		// head is turned around Z-axis
		case YAW:
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
     5d0:	0a 30       	cpi	r16, 0x0A	; 10
     5d2:	11 05       	cpc	r17, r1
     5d4:	94 f4       	brge	.+36     	; 0x5fa <App_GetImuGradient+0xba>
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
     5d6:	11 95       	neg	r17
     5d8:	01 95       	neg	r16
     5da:	11 09       	sbc	r17, r1
     5dc:	0a 30       	cpi	r16, 0x0A	; 10
     5de:	11 05       	cpc	r17, r1
     5e0:	74 f4       	brge	.+28     	; 0x5fe <App_GetImuGradient+0xbe>
			break;
	}
	//-- no head motion 
	return NOTHING;
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	0d c0       	rjmp	.+26     	; 0x600 <App_GetImuGradient+0xc0>
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	0b c0       	rjmp	.+22     	; 0x600 <App_GetImuGradient+0xc0>
	switch(angle_name)
	{
		// head is turned around X-axis
		case ROLL:
			// positive angle > threshold?
			if(absolute_gradient[0] >= THRESHOLD_X ){ return RIGHT_CLICK; }
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	09 c0       	rjmp	.+18     	; 0x600 <App_GetImuGradient+0xc0>
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[0]) >= THRESHOLD_X ){ return LEFT_CLICK; }
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <App_GetImuGradient+0xc0>
			break;
		// head is turned around Y-axis
		case PITCH:
			if(absolute_gradient[1] >= THRESHOLD_Y){ return UP; }
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	05 c0       	rjmp	.+10     	; 0x600 <App_GetImuGradient+0xc0>
			else if ( (-1*absolute_gradient[1]) >= THRESHOLD_Y ){ return DOWN; }
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <App_GetImuGradient+0xc0>
			break;
		// head is turned around Z-axis
		case YAW:
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <App_GetImuGradient+0xc0>
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
     5fe:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	//-- no head motion 
	return NOTHING;
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	08 95       	ret

0000060e <BNO055_WriteByte>:
	  BNO055_SetMagOffsets(bias.MAG_OFFSET);
	  BNO055_SetMagRadius(bias.MAG_RADIUS);
	  BNO055_SetAccRadius(bias.ACCEL_RADIUS);
	  BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, NDOF);
	  
}
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	c8 2f       	mov	r28, r24
     616:	16 2f       	mov	r17, r22
     618:	d4 2f       	mov	r29, r20
     61a:	0e 94 c8 05 	call	0xb90	; 0xb90 <I2C_Master_Start>
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <I2C_Master_Write>
     624:	8d 2f       	mov	r24, r29
     626:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <I2C_Master_Write>
     62a:	8c 2f       	mov	r24, r28
     62c:	0e 94 06 06 	call	0xc0c	; 0xc0c <I2C_Repeated_Start>
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <BNO055_ReadByte>:
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	c8 2f       	mov	r28, r24
     63e:	d6 2f       	mov	r29, r22
     640:	0e 94 c8 05 	call	0xb90	; 0xb90 <I2C_Master_Start>
     644:	8d 2f       	mov	r24, r29
     646:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <I2C_Master_Write>
     64a:	8c 2f       	mov	r24, r28
     64c:	0e 94 06 06 	call	0xc0c	; 0xc0c <I2C_Repeated_Start>
     650:	0e 94 2e 06 	call	0xc5c	; 0xc5c <I2C_Read_Ack>
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <BNO055_ReadBytes>:
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	c8 2f       	mov	r28, r24
     668:	16 2f       	mov	r17, r22
     66a:	d4 2f       	mov	r29, r20
     66c:	79 01       	movw	r14, r18
     66e:	0e 94 c8 05 	call	0xb90	; 0xb90 <I2C_Master_Start>
     672:	81 2f       	mov	r24, r17
     674:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <I2C_Master_Write>
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 06 06 	call	0xc0c	; 0xc0c <I2C_Repeated_Start>
     67e:	c0 e0       	ldi	r28, 0x00	; 0
     680:	08 c0       	rjmp	.+16     	; 0x692 <BNO055_ReadBytes+0x38>
     682:	87 01       	movw	r16, r14
     684:	0c 0f       	add	r16, r28
     686:	11 1d       	adc	r17, r1
     688:	0e 94 2e 06 	call	0xc5c	; 0xc5c <I2C_Read_Ack>
     68c:	f8 01       	movw	r30, r16
     68e:	80 83       	st	Z, r24
     690:	cf 5f       	subi	r28, 0xFF	; 255
     692:	cd 17       	cp	r28, r29
     694:	b0 f3       	brcs	.-20     	; 0x682 <BNO055_ReadBytes+0x28>
     696:	c7 01       	movw	r24, r14
     698:	8d 0f       	add	r24, r29
     69a:	91 1d       	adc	r25, r1
     69c:	ec 01       	movw	r28, r24
     69e:	0e 94 3c 06 	call	0xc78	; 0xc78 <I2C_Read_Nack>
     6a2:	88 83       	st	Y, r24
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <BNO055_GetCalibStat>:
     6b2:	cf 93       	push	r28
     6b4:	c8 2f       	mov	r28, r24
     6b6:	65 e3       	ldi	r22, 0x35	; 53
     6b8:	88 e2       	ldi	r24, 0x28	; 40
     6ba:	0e 94 1c 03 	call	0x638	; 0x638 <BNO055_ReadByte>
     6be:	c1 11       	cpse	r28, r1
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <BNO055_GetCalibStat+0x1a>
     6c2:	82 95       	swap	r24
     6c4:	86 95       	lsr	r24
     6c6:	86 95       	lsr	r24
     6c8:	83 70       	andi	r24, 0x03	; 3
     6ca:	11 c0       	rjmp	.+34     	; 0x6ee <BNO055_GetCalibStat+0x3c>
     6cc:	c1 30       	cpi	r28, 0x01	; 1
     6ce:	21 f4       	brne	.+8      	; 0x6d8 <BNO055_GetCalibStat+0x26>
     6d0:	80 73       	andi	r24, 0x30	; 48
     6d2:	82 95       	swap	r24
     6d4:	8f 70       	andi	r24, 0x0F	; 15
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <BNO055_GetCalibStat+0x3c>
     6d8:	c2 30       	cpi	r28, 0x02	; 2
     6da:	21 f4       	brne	.+8      	; 0x6e4 <BNO055_GetCalibStat+0x32>
     6dc:	8c 70       	andi	r24, 0x0C	; 12
     6de:	86 95       	lsr	r24
     6e0:	86 95       	lsr	r24
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <BNO055_GetCalibStat+0x3c>
     6e4:	c3 30       	cpi	r28, 0x03	; 3
     6e6:	11 f4       	brne	.+4      	; 0x6ec <BNO055_GetCalibStat+0x3a>
     6e8:	83 70       	andi	r24, 0x03	; 3
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <BNO055_GetCalibStat+0x3c>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <BNO055_ReadEulerAngles>:
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <BNO055_ReadEulerAngles+0xa>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <BNO055_ReadEulerAngles+0xc>
     6fe:	00 d0       	rcall	.+0      	; 0x700 <BNO055_ReadEulerAngles+0xe>
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	8c 01       	movw	r16, r24
     706:	9e 01       	movw	r18, r28
     708:	2f 5f       	subi	r18, 0xFF	; 255
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	46 e0       	ldi	r20, 0x06	; 6
     70e:	6a e1       	ldi	r22, 0x1A	; 26
     710:	88 e2       	ldi	r24, 0x28	; 40
     712:	0e 94 2d 03 	call	0x65a	; 0x65a <BNO055_ReadBytes>
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	98 2f       	mov	r25, r24
     71c:	88 27       	eor	r24, r24
     71e:	29 81       	ldd	r18, Y+1	; 0x01
     720:	82 2b       	or	r24, r18
     722:	f8 01       	movw	r30, r16
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
     728:	8c 81       	ldd	r24, Y+4	; 0x04
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	98 2f       	mov	r25, r24
     72e:	88 27       	eor	r24, r24
     730:	2b 81       	ldd	r18, Y+3	; 0x03
     732:	82 2b       	or	r24, r18
     734:	93 83       	std	Z+3, r25	; 0x03
     736:	82 83       	std	Z+2, r24	; 0x02
     738:	8e 81       	ldd	r24, Y+6	; 0x06
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	98 2f       	mov	r25, r24
     73e:	88 27       	eor	r24, r24
     740:	2d 81       	ldd	r18, Y+5	; 0x05
     742:	82 2b       	or	r24, r18
     744:	95 83       	std	Z+5, r25	; 0x05
     746:	84 83       	std	Z+4, r24	; 0x04
     748:	26 96       	adiw	r28, 0x06	; 6
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <BNO055_SelfTest>:
*Function to Test the sensors see if they fail in hardware or not
*return EN_FAIL_t of the failed sensor (see BNO055.h for definition)
*		return 
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
     75e:	66 e3       	ldi	r22, 0x36	; 54
     760:	88 e2       	ldi	r24, 0x28	; 40
     762:	0e 94 1c 03 	call	0x638	; 0x638 <BNO055_ReadByte>
	if(!(selftest & 0x01)) {
     766:	80 ff       	sbrs	r24, 0
     768:	08 c0       	rjmp	.+16     	; 0x77a <BNO055_SelfTest+0x1c>

		return ACCELOMETER_FAIL;                /*acc fails*/
	}
	if(!(selftest & 0x02)) {
     76a:	81 ff       	sbrs	r24, 1
     76c:	08 c0       	rjmp	.+16     	; 0x77e <BNO055_SelfTest+0x20>
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
	}
	if(!(selftest & 0x04)) {
     76e:	82 ff       	sbrs	r24, 2
     770:	08 c0       	rjmp	.+16     	; 0x782 <BNO055_SelfTest+0x24>
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
	}
	if(!(selftest & 0x08)) {
     772:	83 fd       	sbrc	r24, 3
     774:	08 c0       	rjmp	.+16     	; 0x786 <BNO055_SelfTest+0x28>
		return SYSTEM_FAIL;              /*system fails*/
     776:	88 e0       	ldi	r24, 0x08	; 8
     778:	08 95       	ret
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
	if(!(selftest & 0x01)) {

		return ACCELOMETER_FAIL;                /*acc fails*/
     77a:	85 e0       	ldi	r24, 0x05	; 5
     77c:	08 95       	ret
	}
	if(!(selftest & 0x02)) {
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
     77e:	86 e0       	ldi	r24, 0x06	; 6
     780:	08 95       	ret
	}
	if(!(selftest & 0x04)) {
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
     782:	87 e0       	ldi	r24, 0x07	; 7
     784:	08 95       	ret
	}
	if(!(selftest & 0x08)) {
		return SYSTEM_FAIL;              /*system fails*/
	}

	return BNO055_SUCCESS;
     786:	89 e0       	ldi	r24, 0x09	; 9
}
     788:	08 95       	ret

0000078a <BNO055_Init>:
*to speed up calibration process you can use GetOffsets and Get Radius functions and SetCalibProfile
*Functions to store calibrated offsets after every boot 
*
*/
EN_FAIL_t BNO055_Init()
{	
     78a:	cf 93       	push	r28
	I2C_Init(OPERATION_FREQ,100000);					/*initialize i2c with frequency 100Khz*/
     78c:	40 ea       	ldi	r20, 0xA0	; 160
     78e:	56 e8       	ldi	r21, 0x86	; 134
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	0e 94 4e 05 	call	0xa9c	; 0xa9c <I2C_Init>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, CONFIGMODE );
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	6d e3       	ldi	r22, 0x3D	; 61
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Select page 1 to configure sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_1);
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	67 e0       	ldi	r22, 0x07	; 7
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Configure ACC
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_ACC_CONFIG, ACC_CONFIGS );
     7ae:	48 e0       	ldi	r20, 0x08	; 8
     7b0:	68 e0       	ldi	r22, 0x08	; 8
     7b2:	88 e2       	ldi	r24, 0x28	; 40
     7b4:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Configure GYR
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_0, GYRO_BW_RANGE );
     7b8:	43 e2       	ldi	r20, 0x23	; 35
     7ba:	6a e0       	ldi	r22, 0x0A	; 10
     7bc:	88 e2       	ldi	r24, 0x28	; 40
     7be:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_1, GYRO_POWER_MODE);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	6b e0       	ldi	r22, 0x0B	; 11
     7c6:	88 e2       	ldi	r24, 0x28	; 40
     7c8:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Configure MAG
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_MAG_CONFIG, MAG_CONFIGS );
     7cc:	4b e0       	ldi	r20, 0x0B	; 11
     7ce:	69 e0       	ldi	r22, 0x09	; 9
     7d0:	88 e2       	ldi	r24, 0x28	; 40
     7d2:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Select page 0 to read sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_0);
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	88 e2       	ldi	r24, 0x28	; 40
     7dc:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Select BNO055 gyro temperature source
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_TEMP_SOURCE, 0x01 );
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	60 e4       	ldi	r22, 0x40	; 64
     7e4:	88 e2       	ldi	r24, 0x28	; 40
     7e6:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Select BNO055 sensor units (temperature in degrees C, rate in dps, accel in mg)
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_UNIT_SEL, SYS_UNITS );
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	6b e3       	ldi	r22, 0x3B	; 59
     7ee:	88 e2       	ldi	r24, 0x28	; 40
     7f0:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Select BNO055 system power mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PWR_MODE, PWR_MODE );
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	6e e3       	ldi	r22, 0x3E	; 62
     7f8:	88 e2       	ldi	r24, 0x28	; 40
     7fa:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	// Select BNO055 system operation mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, OP_MODE  );
     7fe:	4c e0       	ldi	r20, 0x0C	; 12
     800:	6d e3       	ldi	r22, 0x3D	; 61
     802:	88 e2       	ldi	r24, 0x28	; 40
     804:	0e 94 07 03 	call	0x60e	; 0x60e <BNO055_WriteByte>
	
	if (BNO055_SelfTest() != BNO055_SUCCESS){							/*if self test didn't pass on all sensors*/
     808:	0e 94 af 03 	call	0x75e	; 0x75e <BNO055_SelfTest>
     80c:	c8 2f       	mov	r28, r24
     80e:	89 30       	cpi	r24, 0x09	; 9
     810:	21 f0       	breq	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		return BNO055_SelfTest();
     812:	0e 94 af 03 	call	0x75e	; 0x75e <BNO055_SelfTest>
     816:	c8 2f       	mov	r28, r24
     818:	0f c0       	rjmp	.+30     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
	}
	while (1){
		if (BNO055_GetCalibStat(SYSTEM) > LOW_CALIBRATED && BNO055_GetCalibStat(GYROSCOPE) > LOW_CALIBRATED){
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <BNO055_GetCalibStat>
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	d8 f3       	brcs	.-10     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 59 03 	call	0x6b2	; 0x6b2 <BNO055_GetCalibStat>
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	b0 f3       	brcs	.-20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			if(BNO055_GetCalibStat(MAGNETOMETER) > LOW_CALIBRATED )
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	0e 94 59 03 	call	0x6b2	; 0x6b2 <BNO055_GetCalibStat>
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	88 f3       	brcs	.-30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
				break;
		}
	}
	return BNO055_SUCCESS;
}
     838:	8c 2f       	mov	r24, r28
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <LED_Init>:
#include "LED_interface.h"


void LED_Init(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPinDir(copy_u8Port ,copy_u8Pin, OUT );	
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <DIO_setPinDir>
     844:	08 95       	ret

00000846 <LED_TurnOn>:
}


void LED_TurnOn(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPin( copy_u8Port , copy_u8Pin);
     846:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_setPin>
     84a:	08 95       	ret

0000084c <LED_TurnOff>:
}


void LED_TurnOff(u8_t copy_u8Port , u8_t copy_u8Pin)
{
     DIO_clearPin(copy_u8Port , copy_u8Pin);
     84c:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_clearPin>
     850:	08 95       	ret

00000852 <advanceCircleByFixedAngle>:
void advanceCircleByFixedAngle(void)
{
	char    d;

	#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
	reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
     852:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__data_end>
     856:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <__data_end+0x1>
     85a:	14 16       	cp	r1, r20
     85c:	15 06       	cpc	r1, r21
     85e:	1c f4       	brge	.+6      	; 0x866 <__stack+0x7>
     860:	20 e2       	ldi	r18, 0x20	; 32
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	20 ee       	ldi	r18, 0xE0	; 224
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	24 0f       	add	r18, r20
     86c:	35 1f       	adc	r19, r21
     86e:	02 2e       	mov	r0, r18
     870:	23 2f       	mov	r18, r19
     872:	00 0c       	add	r0, r0
     874:	22 1f       	adc	r18, r18
     876:	33 0b       	sbc	r19, r19
     878:	00 0c       	add	r0, r0
     87a:	22 1f       	adc	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <reportBuffer+0x1>
	sinus += d;
     882:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <sinus>
     886:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <sinus+0x1>
     88a:	82 0f       	add	r24, r18
     88c:	91 1d       	adc	r25, r1
     88e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <sinus+0x1>
     892:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <sinus>
	reportBuffer.dy = d = DIVIDE_BY_64(sinus);
     896:	18 16       	cp	r1, r24
     898:	19 06       	cpc	r1, r25
     89a:	1c f4       	brge	.+6      	; 0x8a2 <__stack+0x43>
     89c:	20 e2       	ldi	r18, 0x20	; 32
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	20 ee       	ldi	r18, 0xE0	; 224
     8a4:	3f ef       	ldi	r19, 0xFF	; 255
     8a6:	82 0f       	add	r24, r18
     8a8:	93 1f       	adc	r25, r19
     8aa:	08 2e       	mov	r0, r24
     8ac:	89 2f       	mov	r24, r25
     8ae:	00 0c       	add	r0, r0
     8b0:	88 1f       	adc	r24, r24
     8b2:	99 0b       	sbc	r25, r25
     8b4:	00 0c       	add	r0, r0
     8b6:	88 1f       	adc	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <reportBuffer+0x2>
	cosinus -= d;
     8be:	48 1b       	sub	r20, r24
     8c0:	51 09       	sbc	r21, r1
     8c2:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <__data_end+0x1>
     8c6:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__data_end>
     8ca:	08 95       	ret

000008cc <usbFunctionSetup>:
}

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     8cc:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     8ce:	90 81       	ld	r25, Z
     8d0:	90 76       	andi	r25, 0x60	; 96
     8d2:	90 32       	cpi	r25, 0x20	; 32
     8d4:	e1 f4       	brne	.+56     	; 0x90e <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     8d6:	81 81       	ldd	r24, Z+1	; 0x01
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	41 f4       	brne	.+16     	; 0x8ec <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
     8dc:	86 e7       	ldi	r24, 0x76	; 118
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     8e4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
            return sizeof(reportBuffer);
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	41 f4       	brne	.+16     	; 0x900 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
     8f0:	85 e7       	ldi	r24, 0x75	; 117
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     8f8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
            return 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     900:	8a 30       	cpi	r24, 0x0A	; 10
     902:	39 f4       	brne	.+14     	; 0x912 <usbFunctionSetup+0x46>
            idleRate = rq->wValue.bytes[1];
     904:	83 81       	ldd	r24, Z+3	; 0x03
     906:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	08 95       	ret
     912:	80 e0       	ldi	r24, 0x00	; 0
}
     914:	08 95       	ret

00000916 <Mouse_init>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     916:	9e e0       	ldi	r25, 0x0E	; 14
     918:	88 e1       	ldi	r24, 0x18	; 24
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	a8 95       	wdr
     920:	81 bd       	out	0x21, r24	; 33
     922:	0f be       	out	0x3f, r0	; 63
     924:	91 bd       	out	0x21, r25	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
     926:	0e 94 92 07 	call	0xf24	; 0xf24 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
     92a:	81 b3       	in	r24, 0x11	; 17
     92c:	80 61       	ori	r24, 0x10	; 16
     92e:	81 bb       	out	0x11, r24	; 17
	
	 i = 0;
     930:	80 e0       	ldi	r24, 0x00	; 0
	 while(--i){             /* fake USB disconnect for > 250 ms */
     932:	07 c0       	rjmp	.+14     	; 0x942 <Mouse_init+0x2c>
	   wdt_reset();
     934:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     936:	e7 eb       	ldi	r30, 0xB7	; 183
     938:	fb e0       	ldi	r31, 0x0B	; 11
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <Mouse_init+0x24>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <Mouse_init+0x2a>
     940:	00 00       	nop
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
	
	 i = 0;
	 while(--i){             /* fake USB disconnect for > 250 ms */
     942:	81 50       	subi	r24, 0x01	; 1
     944:	b9 f7       	brne	.-18     	; 0x934 <Mouse_init+0x1e>
	   wdt_reset();
	  _delay_ms(1);
	  }
	 usbDeviceConnect();
     946:	81 b3       	in	r24, 0x11	; 17
     948:	8f 7e       	andi	r24, 0xEF	; 239
     94a:	81 bb       	out	0x11, r24	; 17
	 sei();
     94c:	78 94       	sei
     94e:	08 95       	ret

00000950 <Mouse_MoveLeft>:
	 DBG1(0x01, 0, 0);       /* debug output: main loop starts */
	
}
void Mouse_MoveLeft(void) {
	reportBuffer.dx = -1 ;
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <reportBuffer+0x1>
     956:	08 95       	ret

00000958 <Mouse_MoveRight>:
}
void Mouse_MoveRight(void) {
	reportBuffer.dx = 1 ; 
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <reportBuffer+0x1>
     95e:	08 95       	ret

00000960 <Mouse_MoveUp>:
}
void Mouse_MoveUp(void) {
	reportBuffer.dy = -1 ; 
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <reportBuffer+0x2>
     966:	08 95       	ret

00000968 <Mouse_MoveDown>:
}
void Mouse_MoveDown(void) {
	reportBuffer.dy = 1 ;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <reportBuffer+0x2>
     96e:	08 95       	ret

00000970 <Mouse_RightClick>:
}
void Mouse_RightClick(void) {
	reportBuffer.buttonMask = 1 ; 
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <reportBuffer>
     976:	08 95       	ret

00000978 <Mouse_LeftClick>:
}
void Mouse_LeftClick(void) {
	reportBuffer.buttonMask = 2 ;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <reportBuffer>
     97e:	08 95       	ret

00000980 <Touch_Init>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*EX :	 ST_TouchConfig_t TouchConfig = {PORTA,PIN0};
		 Touch_Init(TouchConfig);
**/
void Touch_Init(ST_TouchConfig_t config){
	DIO_setPinDir(config.TOUCH_PORT,config.TOUCH_PIN,IN);
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	69 2f       	mov	r22, r25
     984:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <DIO_setPinDir>
     988:	08 95       	ret

0000098a <Touch_Read>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*Return 1 if pressed , 0 otherwise
*
*/
u8_t Touch_Read(ST_TouchConfig_t config){
	return DIO_getPin(config.TOUCH_PORT,config.TOUCH_PIN);
     98a:	69 2f       	mov	r22, r25
     98c:	0e 94 42 05 	call	0xa84	; 0xa84 <DIO_getPin>
     990:	08 95       	ret

00000992 <main>:

int main()
{
	u8_t key = OPENED;
	/* Init application */
	App_Init();
     992:	0e 94 22 02 	call	0x444	; 0x444 <App_Init>
#define OPENED  1
#define CLOSED  0

int main()
{
	u8_t key = OPENED;
     996:	c1 e0       	ldi	r28, 0x01	; 1
	
	while(1)
	{
		// Ensure usb is always up
		DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
		wdt_reset();
     998:	a8 95       	wdr
		usbPoll();
     99a:	0e 94 96 06 	call	0xd2c	; 0xd2c <usbPoll>
		if(usbInterruptIsReady())
     99e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <usbTxStatus1>
     9a2:	84 ff       	sbrs	r24, 4
     9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <main+0x22>
		{
		/* called after every poll of the interrupt endpoint */
	    advanceCircleByFixedAngle();
     9a6:	0e 94 29 04 	call	0x852	; 0x852 <advanceCircleByFixedAngle>
	    DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
	    usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
     9aa:	64 e0       	ldi	r22, 0x04	; 4
     9ac:	86 e7       	ldi	r24, 0x76	; 118
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 91 06 	call	0xd22	; 0xd22 <usbSetInterrupt>
		}
		//------------------------------------------
		// START LOGIC
		/* Check touch sensor state */
		u8_t state = App_GetTouchSensorState();
     9b4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <App_GetTouchSensorState>
		
		if(state == CONTACT)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	71 f7       	brne	.-36     	; 0x998 <main+0x6>
		{
			// enter this block once to get the reference point
			if(key == OPENED)
     9bc:	c1 30       	cpi	r28, 0x01	; 1
     9be:	19 f4       	brne	.+6      	; 0x9c6 <main+0x34>
			{
				// Get reference point from imu
				App_GetImuCalibPoint();
     9c0:	0e 94 75 02 	call	0x4ea	; 0x4ea <App_GetImuCalibPoint>
				key = CLOSED;
     9c4:	c0 e0       	ldi	r28, 0x00	; 0
			
			}
			// Get current gradient of imu (required mouse motion direction)
			u8_t motion_direction = App_GetImuGradient();
     9c6:	0e 94 a0 02 	call	0x540	; 0x540 <App_GetImuGradient>
			// move mouse
			App_OrderMouse(motion_direction);
     9ca:	0e 94 39 02 	call	0x472	; 0x472 <App_OrderMouse>
     9ce:	e4 cf       	rjmp	.-56     	; 0x998 <main+0x6>

000009d0 <DIO_setPinDir>:
* this example set the first 4 bits to 0xF HIGH and the last 4 bits to 0x0 LOW
* void return.
*/
void DIO_writePort(EN_PORTS_t port,u8_t bin_pins)
{
	REG(port)=bin_pins;
     9d0:	41 30       	cpi	r20, 0x01	; 1
     9d2:	69 f4       	brne	.+26     	; 0x9ee <DIO_setPinDir+0x1e>
     9d4:	e8 2f       	mov	r30, r24
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	22 91       	ld	r18, -Z
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_setPinDir+0x14>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	6a 95       	dec	r22
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_setPinDir+0x10>
     9e8:	82 2b       	or	r24, r18
     9ea:	80 83       	st	Z, r24
     9ec:	08 95       	ret
     9ee:	41 11       	cpse	r20, r1
     9f0:	16 c0       	rjmp	.+44     	; 0xa1e <DIO_setPinDir+0x4e>
     9f2:	e8 2f       	mov	r30, r24
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	df 01       	movw	r26, r30
     9f8:	2e 91       	ld	r18, -X
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_setPinDir+0x34>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	6a 95       	dec	r22
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_setPinDir+0x30>
     a08:	98 2f       	mov	r25, r24
     a0a:	90 95       	com	r25
     a0c:	92 23       	and	r25, r18
     a0e:	9c 93       	st	X, r25
     a10:	90 b7       	in	r25, 0x30	; 48
     a12:	94 60       	ori	r25, 0x04	; 4
     a14:	90 bf       	out	0x30, r25	; 48
     a16:	90 81       	ld	r25, Z
     a18:	89 2b       	or	r24, r25
     a1a:	80 83       	st	Z, r24
     a1c:	08 95       	ret
     a1e:	42 30       	cpi	r20, 0x02	; 2
     a20:	a9 f4       	brne	.+42     	; 0xa4c <DIO_setPinDir+0x7c>
     a22:	e8 2f       	mov	r30, r24
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	df 01       	movw	r26, r30
     a28:	2e 91       	ld	r18, -X
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_setPinDir+0x64>
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	6a 95       	dec	r22
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_setPinDir+0x60>
     a38:	98 2f       	mov	r25, r24
     a3a:	90 95       	com	r25
     a3c:	92 23       	and	r25, r18
     a3e:	9c 93       	st	X, r25
     a40:	90 b7       	in	r25, 0x30	; 48
     a42:	9b 7f       	andi	r25, 0xFB	; 251
     a44:	90 bf       	out	0x30, r25	; 48
     a46:	90 81       	ld	r25, Z
     a48:	89 2b       	or	r24, r25
     a4a:	80 83       	st	Z, r24
     a4c:	08 95       	ret

00000a4e <DIO_setPin>:
     a4e:	e8 2f       	mov	r30, r24
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_setPin+0x10>
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	6a 95       	dec	r22
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_setPin+0xc>
     a62:	28 2b       	or	r18, r24
     a64:	20 83       	st	Z, r18
     a66:	08 95       	ret

00000a68 <DIO_clearPin>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
     a68:	e8 2f       	mov	r30, r24
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_clearPin+0x10>
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_clearPin+0xc>
     a7c:	20 95       	com	r18
     a7e:	28 23       	and	r18, r24
     a80:	20 83       	st	Z, r18
     a82:	08 95       	ret

00000a84 <DIO_getPin>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return u8_t that holds the input value
*/	
u8_t DIO_getPin(EN_PORTS_t port,EN_PINS_t pin)
{
	return GETBIT(REG(port-0x02),(u8_t)pin);
     a84:	e8 2f       	mov	r30, r24
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	32 97       	sbiw	r30, 0x02	; 2
     a8a:	80 81       	ld	r24, Z
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_getPin+0x10>
     a90:	95 95       	asr	r25
     a92:	87 95       	ror	r24
     a94:	6a 95       	dec	r22
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_getPin+0xc>
}
     a98:	81 70       	andi	r24, 0x01	; 1
     a9a:	08 95       	ret

00000a9c <I2C_Init>:
			I2C_Stop();
			continue;
		}
		break;						
	}
}
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	cf 93       	push	r28
     aae:	9a 01       	movw	r18, r20
     ab0:	ab 01       	movw	r20, r22
     ab2:	68 2f       	mov	r22, r24
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__divmodsi4>
     abe:	69 01       	movw	r12, r18
     ac0:	7a 01       	movw	r14, r20
     ac2:	80 e1       	ldi	r24, 0x10	; 16
     ac4:	c8 1a       	sub	r12, r24
     ac6:	d1 08       	sbc	r13, r1
     ac8:	e1 08       	sbc	r14, r1
     aca:	f1 08       	sbc	r15, r1
     acc:	c7 01       	movw	r24, r14
     ace:	b6 01       	movw	r22, r12
     ad0:	2e ef       	ldi	r18, 0xFE	; 254
     ad2:	31 e0       	ldi	r19, 0x01	; 1
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__divmodsi4>
     adc:	ca 01       	movw	r24, r20
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     ae4:	28 e1       	ldi	r18, 0x18	; 24
     ae6:	32 e7       	ldi	r19, 0x72	; 114
     ae8:	41 eb       	ldi	r20, 0xB1	; 177
     aea:	5f e3       	ldi	r21, 0x3F	; 63
     aec:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__mulsf3>
     af0:	4b 01       	movw	r8, r22
     af2:	5c 01       	movw	r10, r24
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	a9 01       	movw	r20, r18
     afa:	0e 94 0c 08 	call	0x1018	; 0x1018 <__cmpsf2>
     afe:	88 23       	and	r24, r24
     b00:	d4 f1       	brlt	.+116    	; 0xb76 <I2C_Init+0xda>
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	12 c0       	rjmp	.+36     	; 0xb2a <I2C_Init+0x8e>
     b06:	6c 2f       	mov	r22, r28
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__floatunsisf>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	c5 01       	movw	r24, r10
     b18:	b4 01       	movw	r22, r8
     b1a:	0e 94 0c 08 	call	0x1018	; 0x1018 <__cmpsf2>
     b1e:	18 16       	cp	r1, r24
     b20:	1c f0       	brlt	.+6      	; 0xb28 <I2C_Init+0x8c>
     b22:	c1 b9       	out	0x01, r28	; 1
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <I2C_Init+0x94>
     b28:	cf 5f       	subi	r28, 0xFF	; 255
     b2a:	c5 30       	cpi	r28, 0x05	; 5
     b2c:	60 f3       	brcs	.-40     	; 0xb06 <I2C_Init+0x6a>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	19 f5       	brne	.+70     	; 0xb7a <I2C_Init+0xde>
     b34:	6c 2f       	mov	r22, r28
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__floatunsisf>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	80 e8       	ldi	r24, 0x80	; 128
     b4a:	90 e4       	ldi	r25, 0x40	; 64
     b4c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <pow>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	0e 94 a0 07 	call	0xf40	; 0xf40 <__addsf3>
     b58:	4b 01       	movw	r8, r22
     b5a:	5c 01       	movw	r10, r24
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 01       	movw	r22, r12
     b60:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
     b64:	a5 01       	movw	r20, r10
     b66:	94 01       	movw	r18, r8
     b68:	0e 94 11 08 	call	0x1022	; 0x1022 <__divsf3>
     b6c:	0e 94 83 08 	call	0x1106	; 0x1106 <__fixunssfsi>
     b70:	60 b9       	out	0x00, r22	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <I2C_Init+0xe0>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <I2C_Init+0xe0>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	cf 91       	pop	r28
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	08 95       	ret

00000b90 <I2C_Master_Start>:
     b90:	96 b7       	in	r25, 0x36	; 54
     b92:	90 62       	ori	r25, 0x20	; 32
     b94:	96 bf       	out	0x36, r25	; 54
     b96:	96 b7       	in	r25, 0x36	; 54
     b98:	94 60       	ori	r25, 0x04	; 4
     b9a:	96 bf       	out	0x36, r25	; 54
     b9c:	96 b7       	in	r25, 0x36	; 54
     b9e:	90 68       	ori	r25, 0x80	; 128
     ba0:	96 bf       	out	0x36, r25	; 54
     ba2:	06 b6       	in	r0, 0x36	; 54
     ba4:	07 fe       	sbrs	r0, 7
     ba6:	fd cf       	rjmp	.-6      	; 0xba2 <I2C_Master_Start+0x12>
     ba8:	91 b1       	in	r25, 0x01	; 1
     baa:	98 7f       	andi	r25, 0xF8	; 248
     bac:	98 30       	cpi	r25, 0x08	; 8
     bae:	91 f4       	brne	.+36     	; 0xbd4 <I2C_Master_Start+0x44>
     bb0:	83 b9       	out	0x03, r24	; 3
     bb2:	86 b7       	in	r24, 0x36	; 54
     bb4:	84 60       	ori	r24, 0x04	; 4
     bb6:	86 bf       	out	0x36, r24	; 54
     bb8:	86 b7       	in	r24, 0x36	; 54
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	86 bf       	out	0x36, r24	; 54
     bbe:	06 b6       	in	r0, 0x36	; 54
     bc0:	07 fe       	sbrs	r0, 7
     bc2:	fd cf       	rjmp	.-6      	; 0xbbe <I2C_Master_Start+0x2e>
     bc4:	81 b1       	in	r24, 0x01	; 1
     bc6:	88 7f       	andi	r24, 0xF8	; 248
     bc8:	88 31       	cpi	r24, 0x18	; 24
     bca:	31 f0       	breq	.+12     	; 0xbd8 <I2C_Master_Start+0x48>
     bcc:	80 32       	cpi	r24, 0x20	; 32
     bce:	31 f4       	brne	.+12     	; 0xbdc <I2C_Master_Start+0x4c>
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	08 95       	ret
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	08 95       	ret
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	08 95       	ret

00000be0 <I2C_Master_Write>:
     be0:	83 b9       	out	0x03, r24	; 3
     be2:	86 b7       	in	r24, 0x36	; 54
     be4:	84 60       	ori	r24, 0x04	; 4
     be6:	86 bf       	out	0x36, r24	; 54
     be8:	86 b7       	in	r24, 0x36	; 54
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	86 bf       	out	0x36, r24	; 54
     bee:	06 b6       	in	r0, 0x36	; 54
     bf0:	07 fe       	sbrs	r0, 7
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <I2C_Master_Write+0xe>
     bf4:	81 b1       	in	r24, 0x01	; 1
     bf6:	88 7f       	andi	r24, 0xF8	; 248
     bf8:	88 32       	cpi	r24, 0x28	; 40
     bfa:	21 f0       	breq	.+8      	; 0xc04 <I2C_Master_Write+0x24>
     bfc:	80 33       	cpi	r24, 0x30	; 48
     bfe:	21 f4       	brne	.+8      	; 0xc08 <I2C_Master_Write+0x28>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	08 95       	ret
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	08 95       	ret

00000c0c <I2C_Repeated_Start>:
     c0c:	96 b7       	in	r25, 0x36	; 54
     c0e:	94 60       	ori	r25, 0x04	; 4
     c10:	96 bf       	out	0x36, r25	; 54
     c12:	96 b7       	in	r25, 0x36	; 54
     c14:	90 68       	ori	r25, 0x80	; 128
     c16:	96 bf       	out	0x36, r25	; 54
     c18:	96 b7       	in	r25, 0x36	; 54
     c1a:	90 62       	ori	r25, 0x20	; 32
     c1c:	96 bf       	out	0x36, r25	; 54
     c1e:	06 b6       	in	r0, 0x36	; 54
     c20:	07 fe       	sbrs	r0, 7
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <I2C_Repeated_Start+0x12>
     c24:	91 b1       	in	r25, 0x01	; 1
     c26:	98 7f       	andi	r25, 0xF8	; 248
     c28:	90 31       	cpi	r25, 0x10	; 16
     c2a:	91 f4       	brne	.+36     	; 0xc50 <I2C_Repeated_Start+0x44>
     c2c:	83 b9       	out	0x03, r24	; 3
     c2e:	86 b7       	in	r24, 0x36	; 54
     c30:	84 60       	ori	r24, 0x04	; 4
     c32:	86 bf       	out	0x36, r24	; 54
     c34:	86 b7       	in	r24, 0x36	; 54
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	86 bf       	out	0x36, r24	; 54
     c3a:	06 b6       	in	r0, 0x36	; 54
     c3c:	07 fe       	sbrs	r0, 7
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <I2C_Repeated_Start+0x2e>
     c40:	81 b1       	in	r24, 0x01	; 1
     c42:	88 7f       	andi	r24, 0xF8	; 248
     c44:	80 34       	cpi	r24, 0x40	; 64
     c46:	31 f0       	breq	.+12     	; 0xc54 <I2C_Repeated_Start+0x48>
     c48:	88 34       	cpi	r24, 0x48	; 72
     c4a:	31 f4       	brne	.+12     	; 0xc58 <I2C_Repeated_Start+0x4c>
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	08 95       	ret
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	08 95       	ret
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	08 95       	ret
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	08 95       	ret

00000c5c <I2C_Read_Ack>:
	SETBIT(I2C_CONTROL_REG,TWSTO);
	while(GETBIT(I2C_CONTROL_REG,TWSTO));								
}
s8_t I2C_Read_Ack()											
{
	ENABLE_I2C;
     c5c:	86 b7       	in	r24, 0x36	; 54
     c5e:	84 60       	ori	r24, 0x04	; 4
     c60:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     c62:	86 b7       	in	r24, 0x36	; 54
     c64:	80 68       	ori	r24, 0x80	; 128
     c66:	86 bf       	out	0x36, r24	; 54
	GENERATE_ACK;
     c68:	86 b7       	in	r24, 0x36	; 54
     c6a:	80 64       	ori	r24, 0x40	; 64
     c6c:	86 bf       	out	0x36, r24	; 54
		
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     c6e:	06 b6       	in	r0, 0x36	; 54
     c70:	07 fe       	sbrs	r0, 7
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <I2C_Read_Ack+0x12>
	return TWDR_REG;											
     c74:	83 b1       	in	r24, 0x03	; 3
}
     c76:	08 95       	ret

00000c78 <I2C_Read_Nack>:

s8_t I2C_Read_Nack()										
{
	ENABLE_I2C;
     c78:	86 b7       	in	r24, 0x36	; 54
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     c7e:	86 b7       	in	r24, 0x36	; 54
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	86 bf       	out	0x36, r24	; 54
	
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     c84:	06 b6       	in	r0, 0x36	; 54
     c86:	07 fe       	sbrs	r0, 7
     c88:	fd cf       	rjmp	.-6      	; 0xc84 <I2C_Read_Nack+0xc>
	return TWDR_REG;											
     c8a:	83 b1       	in	r24, 0x03	; 3
}
     c8c:	08 95       	ret

00000c8e <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     c8e:	dc 01       	movw	r26, r24
     c90:	86 2f       	mov	r24, r22
    if(len > 0){    /* don't bother app with 0 sized reads */
     c92:	66 23       	and	r22, r22
     c94:	e1 f0       	breq	.+56     	; 0xcce <usbDeviceRead+0x40>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     c96:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <usbMsgPtr>
     c9a:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     c9e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <usbMsgFlags>
     ca2:	96 ff       	sbrs	r25, 6
     ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <usbDeviceRead+0x2a>
     ca6:	96 2f       	mov	r25, r22
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     ca8:	24 91       	lpm	r18, Z
                    *data++ = c;
     caa:	2c 93       	st	X, r18
                    r++;
     cac:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     cae:	91 50       	subi	r25, 0x01	; 1
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
                    *data++ = c;
     cb0:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     cb2:	91 11       	cpse	r25, r1
     cb4:	f9 cf       	rjmp	.-14     	; 0xca8 <usbDeviceRead+0x1a>
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <usbDeviceRead+0x38>
     cb8:	96 2f       	mov	r25, r22
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     cba:	21 91       	ld	r18, Z+
     cbc:	2c 93       	st	X, r18
                    r++;
                }while(--i);
     cbe:	91 50       	subi	r25, 0x01	; 1
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     cc0:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     cc2:	91 11       	cpse	r25, r1
     cc4:	fa cf       	rjmp	.-12     	; 0xcba <usbDeviceRead+0x2c>
            }
            usbMsgPtr = r;
     cc6:	f0 93 95 00 	sts	0x0095, r31	; 0x800095 <usbMsgPtr+0x1>
     cca:	e0 93 94 00 	sts	0x0094, r30	; 0x800094 <usbMsgPtr>
        }
    }
    return len;
}
     cce:	08 95       	ret

00000cd0 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	dc 01       	movw	r26, r24
     cd8:	c6 2f       	mov	r28, r22
     cda:	8a 01       	movw	r16, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     cdc:	fa 01       	movw	r30, r20
     cde:	80 81       	ld	r24, Z
     ce0:	84 ff       	sbrs	r24, 4
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <usbGenericSetInterrupt+0x1e>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	88 e8       	ldi	r24, 0x88	; 136
     ce8:	89 27       	eor	r24, r25
     cea:	81 83       	std	Z+1, r24	; 0x01
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <usbGenericSetInterrupt+0x24>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     cee:	8a e5       	ldi	r24, 0x5A	; 90
     cf0:	fa 01       	movw	r30, r20
     cf2:	80 83       	st	Z, r24
    }
    p = txStatus->buffer + 1;
     cf4:	a8 01       	movw	r20, r16
     cf6:	4e 5f       	subi	r20, 0xFE	; 254
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    i = len;
     cfa:	9c 2f       	mov	r25, r28
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
     cfc:	fa 01       	movw	r30, r20
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     cfe:	2c 91       	ld	r18, X
     d00:	20 83       	st	Z, r18
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     d02:	91 50       	subi	r25, 0x01	; 1
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	31 96       	adiw	r30, 0x01	; 1
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     d08:	91 11       	cpse	r25, r1
     d0a:	f9 cf       	rjmp	.-14     	; 0xcfe <usbGenericSetInterrupt+0x2e>
    usbCrc16Append(&txStatus->buffer[1], len);
     d0c:	6c 2f       	mov	r22, r28
     d0e:	ca 01       	movw	r24, r20
     d10:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     d14:	cc 5f       	subi	r28, 0xFC	; 252
     d16:	f8 01       	movw	r30, r16
     d18:	c0 83       	st	Z, r28
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
     d22:	45 e8       	ldi	r20, 0x85	; 133
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	0e 94 68 06 	call	0xcd0	; 0xcd0 <usbGenericSetInterrupt>
     d2a:	08 95       	ret

00000d2c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     d30:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <usbRxLen>
     d34:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
     d36:	0a f4       	brpl	.+2      	; 0xd3a <usbPoll+0xe>
     d38:	b7 c0       	rjmp	.+366    	; 0xea8 <usbPoll+0x17c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     d3a:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <usbInputBufOffset>
     d3e:	2c e0       	ldi	r18, 0x0C	; 12
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	29 1b       	sub	r18, r25
     d44:	31 09       	sbc	r19, r1
     d46:	e9 01       	movw	r28, r18
     d48:	c6 56       	subi	r28, 0x66	; 102
     d4a:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     d4c:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <usbRxToken>
     d50:	9d 32       	cpi	r25, 0x2D	; 45
     d52:	09 f0       	breq	.+2      	; 0xd56 <usbPoll+0x2a>
     d54:	a7 c0       	rjmp	.+334    	; 0xea4 <usbPoll+0x178>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	09 f0       	breq	.+2      	; 0xd5c <usbPoll+0x30>
     d5a:	a4 c0       	rjmp	.+328    	; 0xea4 <usbPoll+0x178>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     d5c:	83 ec       	ldi	r24, 0xC3	; 195
     d5e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     d62:	8a e5       	ldi	r24, 0x5A	; 90
     d64:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usbTxLen>
        usbMsgFlags = 0;
     d68:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     d6c:	88 81       	ld	r24, Y
     d6e:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     d70:	21 f0       	breq	.+8      	; 0xd7a <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 66 04 	call	0x8cc	; 0x8cc <usbFunctionSetup>
     d78:	8c c0       	rjmp	.+280    	; 0xe92 <usbPoll+0x166>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     d7c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
     d80:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     d82:	81 11       	cpse	r24, r1
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <usbPoll+0x66>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     d86:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     d8a:	23 e8       	ldi	r18, 0x83	; 131
     d8c:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	7c c0       	rjmp	.+248    	; 0xe8a <usbPoll+0x15e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     d92:	85 30       	cpi	r24, 0x05	; 5
     d94:	31 f4       	brne	.+12     	; 0xda2 <usbPoll+0x76>
        usbNewDeviceAddr = value;
     d96:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     d9a:	23 e8       	ldi	r18, 0x83	; 131
     d9c:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	74 c0       	rjmp	.+232    	; 0xe8a <usbPoll+0x15e>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     da2:	86 30       	cpi	r24, 0x06	; 6
     da4:	09 f0       	breq	.+2      	; 0xda8 <usbPoll+0x7c>
     da6:	51 c0       	rjmp	.+162    	; 0xe4a <usbPoll+0x11e>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	41 f4       	brne	.+16     	; 0xdbe <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     dae:	8c e2       	ldi	r24, 0x2C	; 44
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     db6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     dba:	82 e1       	ldi	r24, 0x12	; 18
     dbc:	42 c0       	rjmp	.+132    	; 0xe42 <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	41 f4       	brne	.+16     	; 0xdd2 <usbPoll+0xa6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     dc2:	8a e0       	ldi	r24, 0x0A	; 10
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     dca:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     dce:	82 e2       	ldi	r24, 0x22	; 34
     dd0:	38 c0       	rjmp	.+112    	; 0xe42 <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	f9 f4       	brne	.+62     	; 0xe14 <usbPoll+0xe8>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     dd8:	81 11       	cpse	r24, r1
     dda:	08 c0       	rjmp	.+16     	; 0xdec <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     ddc:	8c e5       	ldi	r24, 0x5C	; 92
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     de4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	2b c0       	rjmp	.+86     	; 0xe42 <usbPoll+0x116>
        SWITCH_CASE(1)
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	41 f4       	brne	.+16     	; 0xe00 <usbPoll+0xd4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     df0:	8a e4       	ldi	r24, 0x4A	; 74
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     df8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     dfc:	82 e1       	ldi	r24, 0x12	; 18
     dfe:	21 c0       	rjmp	.+66     	; 0xe42 <usbPoll+0x116>
        SWITCH_CASE(2)
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	e1 f4       	brne	.+56     	; 0xe3c <usbPoll+0x110>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     e04:	8e e3       	ldi	r24, 0x3E	; 62
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     e0c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     e10:	8c e0       	ldi	r24, 0x0C	; 12
     e12:	17 c0       	rjmp	.+46     	; 0xe42 <usbPoll+0x116>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     e14:	81 32       	cpi	r24, 0x21	; 33
     e16:	41 f4       	brne	.+16     	; 0xe28 <usbPoll+0xfc>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     e18:	8c e1       	ldi	r24, 0x1C	; 28
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     e20:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     e24:	89 e0       	ldi	r24, 0x09	; 9
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     e28:	82 32       	cpi	r24, 0x22	; 34
     e2a:	51 f4       	brne	.+20     	; 0xe40 <usbPoll+0x114>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     e2c:	86 ed       	ldi	r24, 0xD6	; 214
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
     e34:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
     e38:	84 e3       	ldi	r24, 0x34	; 52
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <usbPoll+0x116>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <usbPoll+0x116>
     e40:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     e42:	90 e4       	ldi	r25, 0x40	; 64
     e44:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <usbMsgFlags>
     e48:	24 c0       	rjmp	.+72     	; 0xe92 <usbPoll+0x166>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	99 f0       	breq	.+38     	; 0xe74 <usbPoll+0x148>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     e4e:	89 30       	cpi	r24, 0x09	; 9
     e50:	31 f4       	brne	.+12     	; 0xe5e <usbPoll+0x132>
        usbConfiguration = value;
     e52:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e56:	23 e8       	ldi	r18, 0x83	; 131
     e58:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <usbPoll+0x15e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     e5e:	8a 30       	cpi	r24, 0x0A	; 10
     e60:	69 f0       	breq	.+26     	; 0xe7c <usbPoll+0x150>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     e62:	8b 30       	cpi	r24, 0x0B	; 11
     e64:	79 f4       	brne	.+30     	; 0xe84 <usbPoll+0x158>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     e66:	8b e4       	ldi	r24, 0x4B	; 75
     e68:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e6c:	23 e8       	ldi	r18, 0x83	; 131
     e6e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <usbPoll+0x15e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     e74:	29 e9       	ldi	r18, 0x99	; 153
     e76:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	07 c0       	rjmp	.+14     	; 0xe8a <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e7c:	23 e8       	ldi	r18, 0x83	; 131
     e7e:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e84:	23 e8       	ldi	r18, 0x83	; 131
     e86:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     e88:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     e8a:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <usbMsgPtr+0x1>
     e8e:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     e92:	9f 81       	ldd	r25, Y+7	; 0x07
     e94:	91 11       	cpse	r25, r1
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <usbPoll+0x174>
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	98 17       	cp	r25, r24
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <usbPoll+0x174>
                replyLen = rq->wLength.bytes[0];
     e9e:	89 2f       	mov	r24, r25
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     ea0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     ea4:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     ea8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usbTxLen>
     eac:	84 ff       	sbrs	r24, 4
     eae:	2b c0       	rjmp	.+86     	; 0xf06 <usbPoll+0x1da>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     eb0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <usbMsgLen>
     eb4:	8f 3f       	cpi	r24, 0xFF	; 255
     eb6:	39 f1       	breq	.+78     	; 0xf06 <usbPoll+0x1da>
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
     eb8:	89 30       	cpi	r24, 0x09	; 9
     eba:	10 f4       	brcc	.+4      	; 0xec0 <usbPoll+0x194>
static inline void usbBuildTxBlock(void)
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
     ebc:	68 2f       	mov	r22, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <usbPoll+0x196>
    if(wantLen > 8)
        wantLen = 8;
     ec0:	68 e0       	ldi	r22, 0x08	; 8
    usbMsgLen -= wantLen;
     ec2:	86 1b       	sub	r24, r22
     ec4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     ec8:	ea e7       	ldi	r30, 0x7A	; 122
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	90 81       	ld	r25, Z
     ece:	88 e8       	ldi	r24, 0x88	; 136
     ed0:	89 27       	eor	r24, r25
     ed2:	80 83       	st	Z, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
     ed4:	8b e7       	ldi	r24, 0x7B	; 123
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 47 06 	call	0xc8e	; 0xc8e <usbDeviceRead>
     edc:	c8 2f       	mov	r28, r24
    if(len <= 8){           /* valid data packet */
     ede:	89 30       	cpi	r24, 0x09	; 9
     ee0:	60 f4       	brcc	.+24     	; 0xefa <usbPoll+0x1ce>
        usbCrc16Append(&usbTxBuf[1], len);
     ee2:	68 2f       	mov	r22, r24
     ee4:	8b e7       	ldi	r24, 0x7B	; 123
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     eec:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     eee:	cc 30       	cpi	r28, 0x0C	; 12
     ef0:	40 f4       	brcc	.+16     	; 0xf02 <usbPoll+0x1d6>
            usbMsgLen = USB_NO_MSG;
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <usbMsgLen>
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <usbPoll+0x1d6>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     f00:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     f02:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     f06:	94 e1       	ldi	r25, 0x14	; 20
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <usbPoll+0x1e6>
        uchar usbLineStatus = USBIN & USBMASK;
     f0a:	80 b3       	in	r24, 0x10	; 16
     f0c:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
     f0e:	39 f4       	brne	.+14     	; 0xf1e <usbPoll+0x1f2>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     f10:	91 50       	subi	r25, 0x01	; 1
     f12:	91 11       	cpse	r25, r1
     f14:	fa cf       	rjmp	.-12     	; 0xf0a <usbPoll+0x1de>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     f16:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
     f1a:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     f24:	85 b7       	in	r24, 0x35	; 53
     f26:	82 60       	ori	r24, 0x02	; 2
     f28:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     f2a:	8b b7       	in	r24, 0x3b	; 59
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     f30:	e5 e8       	ldi	r30, 0x85	; 133
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	8b e4       	ldi	r24, 0x4B	; 75
     f36:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     f38:	8a e5       	ldi	r24, 0x5A	; 90
     f3a:	80 83       	st	Z, r24
     f3c:	08 95       	ret

00000f3e <__subsf3>:
     f3e:	50 58       	subi	r21, 0x80	; 128

00000f40 <__addsf3>:
     f40:	bb 27       	eor	r27, r27
     f42:	aa 27       	eor	r26, r26
     f44:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3x>
     f48:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_round>
     f4c:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_pscA>
     f50:	38 f0       	brcs	.+14     	; 0xf60 <__addsf3+0x20>
     f52:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_pscB>
     f56:	20 f0       	brcs	.+8      	; 0xf60 <__addsf3+0x20>
     f58:	39 f4       	brne	.+14     	; 0xf68 <__addsf3+0x28>
     f5a:	9f 3f       	cpi	r25, 0xFF	; 255
     f5c:	19 f4       	brne	.+6      	; 0xf64 <__addsf3+0x24>
     f5e:	26 f4       	brtc	.+8      	; 0xf68 <__addsf3+0x28>
     f60:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_nan>
     f64:	0e f4       	brtc	.+2      	; 0xf68 <__addsf3+0x28>
     f66:	e0 95       	com	r30
     f68:	e7 fb       	bst	r30, 7
     f6a:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>

00000f6e <__addsf3x>:
     f6e:	e9 2f       	mov	r30, r25
     f70:	0e 94 3b 09 	call	0x1276	; 0x1276 <__fp_split3>
     f74:	58 f3       	brcs	.-42     	; 0xf4c <__addsf3+0xc>
     f76:	ba 17       	cp	r27, r26
     f78:	62 07       	cpc	r22, r18
     f7a:	73 07       	cpc	r23, r19
     f7c:	84 07       	cpc	r24, r20
     f7e:	95 07       	cpc	r25, r21
     f80:	20 f0       	brcs	.+8      	; 0xf8a <__addsf3x+0x1c>
     f82:	79 f4       	brne	.+30     	; 0xfa2 <__addsf3x+0x34>
     f84:	a6 f5       	brtc	.+104    	; 0xfee <__addsf3x+0x80>
     f86:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_zero>
     f8a:	0e f4       	brtc	.+2      	; 0xf8e <__addsf3x+0x20>
     f8c:	e0 95       	com	r30
     f8e:	0b 2e       	mov	r0, r27
     f90:	ba 2f       	mov	r27, r26
     f92:	a0 2d       	mov	r26, r0
     f94:	0b 01       	movw	r0, r22
     f96:	b9 01       	movw	r22, r18
     f98:	90 01       	movw	r18, r0
     f9a:	0c 01       	movw	r0, r24
     f9c:	ca 01       	movw	r24, r20
     f9e:	a0 01       	movw	r20, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	ff 27       	eor	r31, r31
     fa4:	59 1b       	sub	r21, r25
     fa6:	99 f0       	breq	.+38     	; 0xfce <__addsf3x+0x60>
     fa8:	59 3f       	cpi	r21, 0xF9	; 249
     faa:	50 f4       	brcc	.+20     	; 0xfc0 <__addsf3x+0x52>
     fac:	50 3e       	cpi	r21, 0xE0	; 224
     fae:	68 f1       	brcs	.+90     	; 0x100a <__addsf3x+0x9c>
     fb0:	1a 16       	cp	r1, r26
     fb2:	f0 40       	sbci	r31, 0x00	; 0
     fb4:	a2 2f       	mov	r26, r18
     fb6:	23 2f       	mov	r18, r19
     fb8:	34 2f       	mov	r19, r20
     fba:	44 27       	eor	r20, r20
     fbc:	58 5f       	subi	r21, 0xF8	; 248
     fbe:	f3 cf       	rjmp	.-26     	; 0xfa6 <__addsf3x+0x38>
     fc0:	46 95       	lsr	r20
     fc2:	37 95       	ror	r19
     fc4:	27 95       	ror	r18
     fc6:	a7 95       	ror	r26
     fc8:	f0 40       	sbci	r31, 0x00	; 0
     fca:	53 95       	inc	r21
     fcc:	c9 f7       	brne	.-14     	; 0xfc0 <__addsf3x+0x52>
     fce:	7e f4       	brtc	.+30     	; 0xfee <__addsf3x+0x80>
     fd0:	1f 16       	cp	r1, r31
     fd2:	ba 0b       	sbc	r27, r26
     fd4:	62 0b       	sbc	r22, r18
     fd6:	73 0b       	sbc	r23, r19
     fd8:	84 0b       	sbc	r24, r20
     fda:	ba f0       	brmi	.+46     	; 0x100a <__addsf3x+0x9c>
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	a1 f0       	breq	.+40     	; 0x1008 <__addsf3x+0x9a>
     fe0:	ff 0f       	add	r31, r31
     fe2:	bb 1f       	adc	r27, r27
     fe4:	66 1f       	adc	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	c2 f7       	brpl	.-16     	; 0xfdc <__addsf3x+0x6e>
     fec:	0e c0       	rjmp	.+28     	; 0x100a <__addsf3x+0x9c>
     fee:	ba 0f       	add	r27, r26
     ff0:	62 1f       	adc	r22, r18
     ff2:	73 1f       	adc	r23, r19
     ff4:	84 1f       	adc	r24, r20
     ff6:	48 f4       	brcc	.+18     	; 0x100a <__addsf3x+0x9c>
     ff8:	87 95       	ror	r24
     ffa:	77 95       	ror	r23
     ffc:	67 95       	ror	r22
     ffe:	b7 95       	ror	r27
    1000:	f7 95       	ror	r31
    1002:	9e 3f       	cpi	r25, 0xFE	; 254
    1004:	08 f0       	brcs	.+2      	; 0x1008 <__addsf3x+0x9a>
    1006:	b0 cf       	rjmp	.-160    	; 0xf68 <__addsf3+0x28>
    1008:	93 95       	inc	r25
    100a:	88 0f       	add	r24, r24
    100c:	08 f0       	brcs	.+2      	; 0x1010 <__addsf3x+0xa2>
    100e:	99 27       	eor	r25, r25
    1010:	ee 0f       	add	r30, r30
    1012:	97 95       	ror	r25
    1014:	87 95       	ror	r24
    1016:	08 95       	ret

00001018 <__cmpsf2>:
    1018:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_cmp>
    101c:	08 f4       	brcc	.+2      	; 0x1020 <__cmpsf2+0x8>
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	08 95       	ret

00001022 <__divsf3>:
    1022:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3x>
    1026:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_round>
    102a:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_pscB>
    102e:	58 f0       	brcs	.+22     	; 0x1046 <__divsf3+0x24>
    1030:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_pscA>
    1034:	40 f0       	brcs	.+16     	; 0x1046 <__divsf3+0x24>
    1036:	29 f4       	brne	.+10     	; 0x1042 <__divsf3+0x20>
    1038:	5f 3f       	cpi	r21, 0xFF	; 255
    103a:	29 f0       	breq	.+10     	; 0x1046 <__divsf3+0x24>
    103c:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>
    1040:	51 11       	cpse	r21, r1
    1042:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_szero>
    1046:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_nan>

0000104a <__divsf3x>:
    104a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__fp_split3>
    104e:	68 f3       	brcs	.-38     	; 0x102a <__divsf3+0x8>

00001050 <__divsf3_pse>:
    1050:	99 23       	and	r25, r25
    1052:	b1 f3       	breq	.-20     	; 0x1040 <__divsf3+0x1e>
    1054:	55 23       	and	r21, r21
    1056:	91 f3       	breq	.-28     	; 0x103c <__divsf3+0x1a>
    1058:	95 1b       	sub	r25, r21
    105a:	55 0b       	sbc	r21, r21
    105c:	bb 27       	eor	r27, r27
    105e:	aa 27       	eor	r26, r26
    1060:	62 17       	cp	r22, r18
    1062:	73 07       	cpc	r23, r19
    1064:	84 07       	cpc	r24, r20
    1066:	38 f0       	brcs	.+14     	; 0x1076 <__divsf3_pse+0x26>
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	44 1f       	adc	r20, r20
    1072:	aa 1f       	adc	r26, r26
    1074:	a9 f3       	breq	.-22     	; 0x1060 <__divsf3_pse+0x10>
    1076:	35 d0       	rcall	.+106    	; 0x10e2 <__divsf3_pse+0x92>
    1078:	0e 2e       	mov	r0, r30
    107a:	3a f0       	brmi	.+14     	; 0x108a <__divsf3_pse+0x3a>
    107c:	e0 e8       	ldi	r30, 0x80	; 128
    107e:	32 d0       	rcall	.+100    	; 0x10e4 <__divsf3_pse+0x94>
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	e6 95       	lsr	r30
    1086:	00 1c       	adc	r0, r0
    1088:	ca f7       	brpl	.-14     	; 0x107c <__divsf3_pse+0x2c>
    108a:	2b d0       	rcall	.+86     	; 0x10e2 <__divsf3_pse+0x92>
    108c:	fe 2f       	mov	r31, r30
    108e:	29 d0       	rcall	.+82     	; 0x10e2 <__divsf3_pse+0x92>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	bb 1f       	adc	r27, r27
    1098:	26 17       	cp	r18, r22
    109a:	37 07       	cpc	r19, r23
    109c:	48 07       	cpc	r20, r24
    109e:	ab 07       	cpc	r26, r27
    10a0:	b0 e8       	ldi	r27, 0x80	; 128
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__divsf3_pse+0x56>
    10a4:	bb 0b       	sbc	r27, r27
    10a6:	80 2d       	mov	r24, r0
    10a8:	bf 01       	movw	r22, r30
    10aa:	ff 27       	eor	r31, r31
    10ac:	93 58       	subi	r25, 0x83	; 131
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	3a f0       	brmi	.+14     	; 0x10c0 <__divsf3_pse+0x70>
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	51 05       	cpc	r21, r1
    10b6:	78 f0       	brcs	.+30     	; 0x10d6 <__divsf3_pse+0x86>
    10b8:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>
    10bc:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_szero>
    10c0:	5f 3f       	cpi	r21, 0xFF	; 255
    10c2:	e4 f3       	brlt	.-8      	; 0x10bc <__divsf3_pse+0x6c>
    10c4:	98 3e       	cpi	r25, 0xE8	; 232
    10c6:	d4 f3       	brlt	.-12     	; 0x10bc <__divsf3_pse+0x6c>
    10c8:	86 95       	lsr	r24
    10ca:	77 95       	ror	r23
    10cc:	67 95       	ror	r22
    10ce:	b7 95       	ror	r27
    10d0:	f7 95       	ror	r31
    10d2:	9f 5f       	subi	r25, 0xFF	; 255
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__divsf3_pse+0x78>
    10d6:	88 0f       	add	r24, r24
    10d8:	91 1d       	adc	r25, r1
    10da:	96 95       	lsr	r25
    10dc:	87 95       	ror	r24
    10de:	97 f9       	bld	r25, 7
    10e0:	08 95       	ret
    10e2:	e1 e0       	ldi	r30, 0x01	; 1
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	bb 1f       	adc	r27, r27
    10ec:	62 17       	cp	r22, r18
    10ee:	73 07       	cpc	r23, r19
    10f0:	84 07       	cpc	r24, r20
    10f2:	ba 07       	cpc	r27, r26
    10f4:	20 f0       	brcs	.+8      	; 0x10fe <__divsf3_pse+0xae>
    10f6:	62 1b       	sub	r22, r18
    10f8:	73 0b       	sbc	r23, r19
    10fa:	84 0b       	sbc	r24, r20
    10fc:	ba 0b       	sbc	r27, r26
    10fe:	ee 1f       	adc	r30, r30
    1100:	88 f7       	brcc	.-30     	; 0x10e4 <__divsf3_pse+0x94>
    1102:	e0 95       	com	r30
    1104:	08 95       	ret

00001106 <__fixunssfsi>:
    1106:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_splitA>
    110a:	88 f0       	brcs	.+34     	; 0x112e <__fixunssfsi+0x28>
    110c:	9f 57       	subi	r25, 0x7F	; 127
    110e:	98 f0       	brcs	.+38     	; 0x1136 <__fixunssfsi+0x30>
    1110:	b9 2f       	mov	r27, r25
    1112:	99 27       	eor	r25, r25
    1114:	b7 51       	subi	r27, 0x17	; 23
    1116:	b0 f0       	brcs	.+44     	; 0x1144 <__fixunssfsi+0x3e>
    1118:	e1 f0       	breq	.+56     	; 0x1152 <__fixunssfsi+0x4c>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	1a f0       	brmi	.+6      	; 0x112a <__fixunssfsi+0x24>
    1124:	ba 95       	dec	r27
    1126:	c9 f7       	brne	.-14     	; 0x111a <__fixunssfsi+0x14>
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <__fixunssfsi+0x4c>
    112a:	b1 30       	cpi	r27, 0x01	; 1
    112c:	91 f0       	breq	.+36     	; 0x1152 <__fixunssfsi+0x4c>
    112e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_zero>
    1132:	b1 e0       	ldi	r27, 0x01	; 1
    1134:	08 95       	ret
    1136:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_zero>
    113a:	67 2f       	mov	r22, r23
    113c:	78 2f       	mov	r23, r24
    113e:	88 27       	eor	r24, r24
    1140:	b8 5f       	subi	r27, 0xF8	; 248
    1142:	39 f0       	breq	.+14     	; 0x1152 <__fixunssfsi+0x4c>
    1144:	b9 3f       	cpi	r27, 0xF9	; 249
    1146:	cc f3       	brlt	.-14     	; 0x113a <__fixunssfsi+0x34>
    1148:	86 95       	lsr	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b3 95       	inc	r27
    1150:	d9 f7       	brne	.-10     	; 0x1148 <__fixunssfsi+0x42>
    1152:	3e f4       	brtc	.+14     	; 0x1162 <__fixunssfsi+0x5c>
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__floatunsisf>:
    1164:	e8 94       	clt
    1166:	09 c0       	rjmp	.+18     	; 0x117a <__floatsisf+0x12>

00001168 <__floatsisf>:
    1168:	97 fb       	bst	r25, 7
    116a:	3e f4       	brtc	.+14     	; 0x117a <__floatsisf+0x12>
    116c:	90 95       	com	r25
    116e:	80 95       	com	r24
    1170:	70 95       	com	r23
    1172:	61 95       	neg	r22
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	99 23       	and	r25, r25
    117c:	a9 f0       	breq	.+42     	; 0x11a8 <__floatsisf+0x40>
    117e:	f9 2f       	mov	r31, r25
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	bb 27       	eor	r27, r27
    1184:	93 95       	inc	r25
    1186:	f6 95       	lsr	r31
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b7 95       	ror	r27
    1190:	f1 11       	cpse	r31, r1
    1192:	f8 cf       	rjmp	.-16     	; 0x1184 <__floatsisf+0x1c>
    1194:	fa f4       	brpl	.+62     	; 0x11d4 <__floatsisf+0x6c>
    1196:	bb 0f       	add	r27, r27
    1198:	11 f4       	brne	.+4      	; 0x119e <__floatsisf+0x36>
    119a:	60 ff       	sbrs	r22, 0
    119c:	1b c0       	rjmp	.+54     	; 0x11d4 <__floatsisf+0x6c>
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	16 c0       	rjmp	.+44     	; 0x11d4 <__floatsisf+0x6c>
    11a8:	88 23       	and	r24, r24
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <__floatsisf+0x48>
    11ac:	96 e9       	ldi	r25, 0x96	; 150
    11ae:	11 c0       	rjmp	.+34     	; 0x11d2 <__floatsisf+0x6a>
    11b0:	77 23       	and	r23, r23
    11b2:	21 f0       	breq	.+8      	; 0x11bc <__floatsisf+0x54>
    11b4:	9e e8       	ldi	r25, 0x8E	; 142
    11b6:	87 2f       	mov	r24, r23
    11b8:	76 2f       	mov	r23, r22
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <__floatsisf+0x5e>
    11bc:	66 23       	and	r22, r22
    11be:	71 f0       	breq	.+28     	; 0x11dc <__floatsisf+0x74>
    11c0:	96 e8       	ldi	r25, 0x86	; 134
    11c2:	86 2f       	mov	r24, r22
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	2a f0       	brmi	.+10     	; 0x11d4 <__floatsisf+0x6c>
    11ca:	9a 95       	dec	r25
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	da f7       	brpl	.-10     	; 0x11ca <__floatsisf+0x62>
    11d4:	88 0f       	add	r24, r24
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <__fp_cmp>:
    11de:	99 0f       	add	r25, r25
    11e0:	00 08       	sbc	r0, r0
    11e2:	55 0f       	add	r21, r21
    11e4:	aa 0b       	sbc	r26, r26
    11e6:	e0 e8       	ldi	r30, 0x80	; 128
    11e8:	fe ef       	ldi	r31, 0xFE	; 254
    11ea:	16 16       	cp	r1, r22
    11ec:	17 06       	cpc	r1, r23
    11ee:	e8 07       	cpc	r30, r24
    11f0:	f9 07       	cpc	r31, r25
    11f2:	c0 f0       	brcs	.+48     	; 0x1224 <__fp_cmp+0x46>
    11f4:	12 16       	cp	r1, r18
    11f6:	13 06       	cpc	r1, r19
    11f8:	e4 07       	cpc	r30, r20
    11fa:	f5 07       	cpc	r31, r21
    11fc:	98 f0       	brcs	.+38     	; 0x1224 <__fp_cmp+0x46>
    11fe:	62 1b       	sub	r22, r18
    1200:	73 0b       	sbc	r23, r19
    1202:	84 0b       	sbc	r24, r20
    1204:	95 0b       	sbc	r25, r21
    1206:	39 f4       	brne	.+14     	; 0x1216 <__fp_cmp+0x38>
    1208:	0a 26       	eor	r0, r26
    120a:	61 f0       	breq	.+24     	; 0x1224 <__fp_cmp+0x46>
    120c:	23 2b       	or	r18, r19
    120e:	24 2b       	or	r18, r20
    1210:	25 2b       	or	r18, r21
    1212:	21 f4       	brne	.+8      	; 0x121c <__fp_cmp+0x3e>
    1214:	08 95       	ret
    1216:	0a 26       	eor	r0, r26
    1218:	09 f4       	brne	.+2      	; 0x121c <__fp_cmp+0x3e>
    121a:	a1 40       	sbci	r26, 0x01	; 1
    121c:	a6 95       	lsr	r26
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	81 1d       	adc	r24, r1
    1222:	81 1d       	adc	r24, r1
    1224:	08 95       	ret

00001226 <__fp_inf>:
    1226:	97 f9       	bld	r25, 7
    1228:	9f 67       	ori	r25, 0x7F	; 127
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	08 95       	ret

00001232 <__fp_nan>:
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	80 ec       	ldi	r24, 0xC0	; 192
    1236:	08 95       	ret

00001238 <__fp_pscA>:
    1238:	00 24       	eor	r0, r0
    123a:	0a 94       	dec	r0
    123c:	16 16       	cp	r1, r22
    123e:	17 06       	cpc	r1, r23
    1240:	18 06       	cpc	r1, r24
    1242:	09 06       	cpc	r0, r25
    1244:	08 95       	ret

00001246 <__fp_pscB>:
    1246:	00 24       	eor	r0, r0
    1248:	0a 94       	dec	r0
    124a:	12 16       	cp	r1, r18
    124c:	13 06       	cpc	r1, r19
    124e:	14 06       	cpc	r1, r20
    1250:	05 06       	cpc	r0, r21
    1252:	08 95       	ret

00001254 <__fp_round>:
    1254:	09 2e       	mov	r0, r25
    1256:	03 94       	inc	r0
    1258:	00 0c       	add	r0, r0
    125a:	11 f4       	brne	.+4      	; 0x1260 <__fp_round+0xc>
    125c:	88 23       	and	r24, r24
    125e:	52 f0       	brmi	.+20     	; 0x1274 <__fp_round+0x20>
    1260:	bb 0f       	add	r27, r27
    1262:	40 f4       	brcc	.+16     	; 0x1274 <__fp_round+0x20>
    1264:	bf 2b       	or	r27, r31
    1266:	11 f4       	brne	.+4      	; 0x126c <__fp_round+0x18>
    1268:	60 ff       	sbrs	r22, 0
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <__fp_round+0x20>
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__fp_split3>:
    1276:	57 fd       	sbrc	r21, 7
    1278:	90 58       	subi	r25, 0x80	; 128
    127a:	44 0f       	add	r20, r20
    127c:	55 1f       	adc	r21, r21
    127e:	59 f0       	breq	.+22     	; 0x1296 <__fp_splitA+0x10>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	71 f0       	breq	.+28     	; 0x12a0 <__fp_splitA+0x1a>
    1284:	47 95       	ror	r20

00001286 <__fp_splitA>:
    1286:	88 0f       	add	r24, r24
    1288:	97 fb       	bst	r25, 7
    128a:	99 1f       	adc	r25, r25
    128c:	61 f0       	breq	.+24     	; 0x12a6 <__fp_splitA+0x20>
    128e:	9f 3f       	cpi	r25, 0xFF	; 255
    1290:	79 f0       	breq	.+30     	; 0x12b0 <__fp_splitA+0x2a>
    1292:	87 95       	ror	r24
    1294:	08 95       	ret
    1296:	12 16       	cp	r1, r18
    1298:	13 06       	cpc	r1, r19
    129a:	14 06       	cpc	r1, r20
    129c:	55 1f       	adc	r21, r21
    129e:	f2 cf       	rjmp	.-28     	; 0x1284 <__fp_split3+0xe>
    12a0:	46 95       	lsr	r20
    12a2:	f1 df       	rcall	.-30     	; 0x1286 <__fp_splitA>
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <__fp_splitA+0x30>
    12a6:	16 16       	cp	r1, r22
    12a8:	17 06       	cpc	r1, r23
    12aa:	18 06       	cpc	r1, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	f1 cf       	rjmp	.-30     	; 0x1292 <__fp_splitA+0xc>
    12b0:	86 95       	lsr	r24
    12b2:	71 05       	cpc	r23, r1
    12b4:	61 05       	cpc	r22, r1
    12b6:	08 94       	sec
    12b8:	08 95       	ret

000012ba <__fp_zero>:
    12ba:	e8 94       	clt

000012bc <__fp_szero>:
    12bc:	bb 27       	eor	r27, r27
    12be:	66 27       	eor	r22, r22
    12c0:	77 27       	eor	r23, r23
    12c2:	cb 01       	movw	r24, r22
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__mulsf3>:
    12c8:	0e 94 77 09 	call	0x12ee	; 0x12ee <__mulsf3x>
    12cc:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_round>
    12d0:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_pscA>
    12d4:	38 f0       	brcs	.+14     	; 0x12e4 <__mulsf3+0x1c>
    12d6:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_pscB>
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <__mulsf3+0x1c>
    12dc:	95 23       	and	r25, r21
    12de:	11 f0       	breq	.+4      	; 0x12e4 <__mulsf3+0x1c>
    12e0:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>
    12e4:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_nan>
    12e8:	11 24       	eor	r1, r1
    12ea:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_szero>

000012ee <__mulsf3x>:
    12ee:	0e 94 3b 09 	call	0x1276	; 0x1276 <__fp_split3>
    12f2:	70 f3       	brcs	.-36     	; 0x12d0 <__mulsf3+0x8>

000012f4 <__mulsf3_pse>:
    12f4:	95 9f       	mul	r25, r21
    12f6:	c1 f3       	breq	.-16     	; 0x12e8 <__mulsf3+0x20>
    12f8:	95 0f       	add	r25, r21
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	55 1f       	adc	r21, r21
    12fe:	62 9f       	mul	r22, r18
    1300:	f0 01       	movw	r30, r0
    1302:	72 9f       	mul	r23, r18
    1304:	bb 27       	eor	r27, r27
    1306:	f0 0d       	add	r31, r0
    1308:	b1 1d       	adc	r27, r1
    130a:	63 9f       	mul	r22, r19
    130c:	aa 27       	eor	r26, r26
    130e:	f0 0d       	add	r31, r0
    1310:	b1 1d       	adc	r27, r1
    1312:	aa 1f       	adc	r26, r26
    1314:	64 9f       	mul	r22, r20
    1316:	66 27       	eor	r22, r22
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	66 1f       	adc	r22, r22
    131e:	82 9f       	mul	r24, r18
    1320:	22 27       	eor	r18, r18
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	62 1f       	adc	r22, r18
    1328:	73 9f       	mul	r23, r19
    132a:	b0 0d       	add	r27, r0
    132c:	a1 1d       	adc	r26, r1
    132e:	62 1f       	adc	r22, r18
    1330:	83 9f       	mul	r24, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	22 1f       	adc	r18, r18
    1338:	74 9f       	mul	r23, r20
    133a:	33 27       	eor	r19, r19
    133c:	a0 0d       	add	r26, r0
    133e:	61 1d       	adc	r22, r1
    1340:	23 1f       	adc	r18, r19
    1342:	84 9f       	mul	r24, r20
    1344:	60 0d       	add	r22, r0
    1346:	21 1d       	adc	r18, r1
    1348:	82 2f       	mov	r24, r18
    134a:	76 2f       	mov	r23, r22
    134c:	6a 2f       	mov	r22, r26
    134e:	11 24       	eor	r1, r1
    1350:	9f 57       	subi	r25, 0x7F	; 127
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	9a f0       	brmi	.+38     	; 0x137c <__mulsf3_pse+0x88>
    1356:	f1 f0       	breq	.+60     	; 0x1394 <__mulsf3_pse+0xa0>
    1358:	88 23       	and	r24, r24
    135a:	4a f0       	brmi	.+18     	; 0x136e <__mulsf3_pse+0x7a>
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	bb 1f       	adc	r27, r27
    1362:	66 1f       	adc	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__mulsf3_pse+0x64>
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	51 05       	cpc	r21, r1
    1372:	80 f0       	brcs	.+32     	; 0x1394 <__mulsf3_pse+0xa0>
    1374:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>
    1378:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_szero>
    137c:	5f 3f       	cpi	r21, 0xFF	; 255
    137e:	e4 f3       	brlt	.-8      	; 0x1378 <__mulsf3_pse+0x84>
    1380:	98 3e       	cpi	r25, 0xE8	; 232
    1382:	d4 f3       	brlt	.-12     	; 0x1378 <__mulsf3_pse+0x84>
    1384:	86 95       	lsr	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f7 95       	ror	r31
    138e:	e7 95       	ror	r30
    1390:	9f 5f       	subi	r25, 0xFF	; 255
    1392:	c1 f7       	brne	.-16     	; 0x1384 <__mulsf3_pse+0x90>
    1394:	fe 2b       	or	r31, r30
    1396:	88 0f       	add	r24, r24
    1398:	91 1d       	adc	r25, r1
    139a:	96 95       	lsr	r25
    139c:	87 95       	ror	r24
    139e:	97 f9       	bld	r25, 7
    13a0:	08 95       	ret

000013a2 <pow>:
    13a2:	fa 01       	movw	r30, r20
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	30 96       	adiw	r30, 0x00	; 0
    13aa:	21 05       	cpc	r18, r1
    13ac:	31 05       	cpc	r19, r1
    13ae:	a1 f1       	breq	.+104    	; 0x1418 <pow+0x76>
    13b0:	61 15       	cp	r22, r1
    13b2:	71 05       	cpc	r23, r1
    13b4:	61 f4       	brne	.+24     	; 0x13ce <pow+0x2c>
    13b6:	80 38       	cpi	r24, 0x80	; 128
    13b8:	bf e3       	ldi	r27, 0x3F	; 63
    13ba:	9b 07       	cpc	r25, r27
    13bc:	49 f1       	breq	.+82     	; 0x1410 <pow+0x6e>
    13be:	68 94       	set
    13c0:	90 38       	cpi	r25, 0x80	; 128
    13c2:	81 05       	cpc	r24, r1
    13c4:	61 f0       	breq	.+24     	; 0x13de <pow+0x3c>
    13c6:	80 38       	cpi	r24, 0x80	; 128
    13c8:	bf ef       	ldi	r27, 0xFF	; 255
    13ca:	9b 07       	cpc	r25, r27
    13cc:	41 f0       	breq	.+16     	; 0x13de <pow+0x3c>
    13ce:	99 23       	and	r25, r25
    13d0:	4a f5       	brpl	.+82     	; 0x1424 <pow+0x82>
    13d2:	ff 3f       	cpi	r31, 0xFF	; 255
    13d4:	e1 05       	cpc	r30, r1
    13d6:	31 05       	cpc	r19, r1
    13d8:	21 05       	cpc	r18, r1
    13da:	19 f1       	breq	.+70     	; 0x1422 <pow+0x80>
    13dc:	e8 94       	clt
    13de:	08 94       	sec
    13e0:	e7 95       	ror	r30
    13e2:	d9 01       	movw	r26, r18
    13e4:	aa 23       	and	r26, r26
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <pow+0x50>
    13e8:	ab 2f       	mov	r26, r27
    13ea:	be 2f       	mov	r27, r30
    13ec:	f8 5f       	subi	r31, 0xF8	; 248
    13ee:	d0 f3       	brcs	.-12     	; 0x13e4 <pow+0x42>
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <pow+0x70>
    13f2:	ff 5f       	subi	r31, 0xFF	; 255
    13f4:	70 f4       	brcc	.+28     	; 0x1412 <pow+0x70>
    13f6:	a6 95       	lsr	r26
    13f8:	e0 f7       	brcc	.-8      	; 0x13f2 <pow+0x50>
    13fa:	f7 39       	cpi	r31, 0x97	; 151
    13fc:	50 f0       	brcs	.+20     	; 0x1412 <pow+0x70>
    13fe:	19 f0       	breq	.+6      	; 0x1406 <pow+0x64>
    1400:	ff 3a       	cpi	r31, 0xAF	; 175
    1402:	38 f4       	brcc	.+14     	; 0x1412 <pow+0x70>
    1404:	9f 77       	andi	r25, 0x7F	; 127
    1406:	9f 93       	push	r25
    1408:	0d d0       	rcall	.+26     	; 0x1424 <pow+0x82>
    140a:	0f 90       	pop	r0
    140c:	07 fc       	sbrc	r0, 7
    140e:	90 58       	subi	r25, 0x80	; 128
    1410:	08 95       	ret
    1412:	46 f0       	brts	.+16     	; 0x1424 <pow+0x82>
    1414:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_nan>
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	80 e8       	ldi	r24, 0x80	; 128
    141e:	9f e3       	ldi	r25, 0x3F	; 63
    1420:	08 95       	ret
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	9f 77       	andi	r25, 0x7F	; 127
    1426:	5f 93       	push	r21
    1428:	4f 93       	push	r20
    142a:	3f 93       	push	r19
    142c:	2f 93       	push	r18
    142e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <log>
    1432:	2f 91       	pop	r18
    1434:	3f 91       	pop	r19
    1436:	4f 91       	pop	r20
    1438:	5f 91       	pop	r21
    143a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__mulsf3>
    143e:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <exp>
    1442:	29 f4       	brne	.+10     	; 0x144e <pow+0xac>
    1444:	16 f0       	brts	.+4      	; 0x144a <pow+0xa8>
    1446:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>
    144a:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_zero>
    144e:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_nan>

00001452 <exp>:
    1452:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_splitA>
    1456:	a8 f3       	brcs	.-22     	; 0x1442 <pow+0xa0>
    1458:	96 38       	cpi	r25, 0x86	; 134
    145a:	a0 f7       	brcc	.-24     	; 0x1444 <pow+0xa2>
    145c:	07 f8       	bld	r0, 7
    145e:	0f 92       	push	r0
    1460:	e8 94       	clt
    1462:	2b e3       	ldi	r18, 0x3B	; 59
    1464:	3a ea       	ldi	r19, 0xAA	; 170
    1466:	48 eb       	ldi	r20, 0xB8	; 184
    1468:	5f e7       	ldi	r21, 0x7F	; 127
    146a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__mulsf3_pse>
    146e:	0f 92       	push	r0
    1470:	0f 92       	push	r0
    1472:	0f 92       	push	r0
    1474:	4d b7       	in	r20, 0x3d	; 61
    1476:	5e b7       	in	r21, 0x3e	; 62
    1478:	0f 92       	push	r0
    147a:	0e 94 14 0b 	call	0x1628	; 0x1628 <modf>
    147e:	e4 e5       	ldi	r30, 0x54	; 84
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_powser>
    1486:	4f 91       	pop	r20
    1488:	5f 91       	pop	r21
    148a:	ef 91       	pop	r30
    148c:	ff 91       	pop	r31
    148e:	e5 95       	asr	r30
    1490:	ee 1f       	adc	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	49 f0       	breq	.+18     	; 0x14a8 <exp+0x56>
    1496:	fe 57       	subi	r31, 0x7E	; 126
    1498:	e0 68       	ori	r30, 0x80	; 128
    149a:	44 27       	eor	r20, r20
    149c:	ee 0f       	add	r30, r30
    149e:	44 1f       	adc	r20, r20
    14a0:	fa 95       	dec	r31
    14a2:	e1 f7       	brne	.-8      	; 0x149c <exp+0x4a>
    14a4:	41 95       	neg	r20
    14a6:	55 0b       	sbc	r21, r21
    14a8:	0e 94 8e 0a 	call	0x151c	; 0x151c <ldexp>
    14ac:	0f 90       	pop	r0
    14ae:	07 fe       	sbrs	r0, 7
    14b0:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <inverse>
    14b4:	08 95       	ret

000014b6 <__fp_powser>:
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	1f 93       	push	r17
    14bc:	0f 93       	push	r16
    14be:	ff 92       	push	r15
    14c0:	ef 92       	push	r14
    14c2:	df 92       	push	r13
    14c4:	7b 01       	movw	r14, r22
    14c6:	8c 01       	movw	r16, r24
    14c8:	68 94       	set
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <__fp_powser+0x22>
    14cc:	da 2e       	mov	r13, r26
    14ce:	ef 01       	movw	r28, r30
    14d0:	0e 94 77 09 	call	0x12ee	; 0x12ee <__mulsf3x>
    14d4:	fe 01       	movw	r30, r28
    14d6:	e8 94       	clt
    14d8:	a5 91       	lpm	r26, Z+
    14da:	25 91       	lpm	r18, Z+
    14dc:	35 91       	lpm	r19, Z+
    14de:	45 91       	lpm	r20, Z+
    14e0:	55 91       	lpm	r21, Z+
    14e2:	a6 f3       	brts	.-24     	; 0x14cc <__fp_powser+0x16>
    14e4:	ef 01       	movw	r28, r30
    14e6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3x>
    14ea:	fe 01       	movw	r30, r28
    14ec:	97 01       	movw	r18, r14
    14ee:	a8 01       	movw	r20, r16
    14f0:	da 94       	dec	r13
    14f2:	69 f7       	brne	.-38     	; 0x14ce <__fp_powser+0x18>
    14f4:	df 90       	pop	r13
    14f6:	ef 90       	pop	r14
    14f8:	ff 90       	pop	r15
    14fa:	0f 91       	pop	r16
    14fc:	1f 91       	pop	r17
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <inverse>:
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	9f e3       	ldi	r25, 0x3F	; 63
    1510:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__divsf3>
    1514:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>
    1518:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_mpack>

0000151c <ldexp>:
    151c:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_splitA>
    1520:	d8 f3       	brcs	.-10     	; 0x1518 <inverse+0x14>
    1522:	99 23       	and	r25, r25
    1524:	c9 f3       	breq	.-14     	; 0x1518 <inverse+0x14>
    1526:	94 0f       	add	r25, r20
    1528:	51 1d       	adc	r21, r1
    152a:	a3 f3       	brvs	.-24     	; 0x1514 <inverse+0x10>
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	50 40       	sbci	r21, 0x00	; 0
    1530:	94 f0       	brlt	.+36     	; 0x1556 <ldexp+0x3a>
    1532:	59 f0       	breq	.+22     	; 0x154a <ldexp+0x2e>
    1534:	88 23       	and	r24, r24
    1536:	32 f0       	brmi	.+12     	; 0x1544 <ldexp+0x28>
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	50 40       	sbci	r21, 0x00	; 0
    1542:	c1 f7       	brne	.-16     	; 0x1534 <ldexp+0x18>
    1544:	9e 3f       	cpi	r25, 0xFE	; 254
    1546:	51 05       	cpc	r21, r1
    1548:	2c f7       	brge	.-54     	; 0x1514 <inverse+0x10>
    154a:	88 0f       	add	r24, r24
    154c:	91 1d       	adc	r25, r1
    154e:	96 95       	lsr	r25
    1550:	87 95       	ror	r24
    1552:	97 f9       	bld	r25, 7
    1554:	08 95       	ret
    1556:	5f 3f       	cpi	r21, 0xFF	; 255
    1558:	ac f0       	brlt	.+42     	; 0x1584 <ldexp+0x68>
    155a:	98 3e       	cpi	r25, 0xE8	; 232
    155c:	9c f0       	brlt	.+38     	; 0x1584 <ldexp+0x68>
    155e:	bb 27       	eor	r27, r27
    1560:	86 95       	lsr	r24
    1562:	77 95       	ror	r23
    1564:	67 95       	ror	r22
    1566:	b7 95       	ror	r27
    1568:	08 f4       	brcc	.+2      	; 0x156c <ldexp+0x50>
    156a:	b1 60       	ori	r27, 0x01	; 1
    156c:	93 95       	inc	r25
    156e:	c1 f7       	brne	.-16     	; 0x1560 <ldexp+0x44>
    1570:	bb 0f       	add	r27, r27
    1572:	58 f7       	brcc	.-42     	; 0x154a <ldexp+0x2e>
    1574:	11 f4       	brne	.+4      	; 0x157a <ldexp+0x5e>
    1576:	60 ff       	sbrs	r22, 0
    1578:	e8 cf       	rjmp	.-48     	; 0x154a <ldexp+0x2e>
    157a:	6f 5f       	subi	r22, 0xFF	; 255
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	8f 4f       	sbci	r24, 0xFF	; 255
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	e3 cf       	rjmp	.-58     	; 0x154a <ldexp+0x2e>
    1584:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_szero>
    1588:	16 f0       	brts	.+4      	; 0x158e <ldexp+0x72>
    158a:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_mpack>
    158e:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_nan>
    1592:	68 94       	set
    1594:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_inf>

00001598 <log>:
    1598:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_splitA>
    159c:	a8 f3       	brcs	.-22     	; 0x1588 <ldexp+0x6c>
    159e:	99 23       	and	r25, r25
    15a0:	c1 f3       	breq	.-16     	; 0x1592 <ldexp+0x76>
    15a2:	ae f3       	brts	.-22     	; 0x158e <ldexp+0x72>
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	1f 93       	push	r17
    15aa:	0f 93       	push	r16
    15ac:	ff 92       	push	r15
    15ae:	c9 2f       	mov	r28, r25
    15b0:	dd 27       	eor	r29, r29
    15b2:	88 23       	and	r24, r24
    15b4:	2a f0       	brmi	.+10     	; 0x15c0 <log+0x28>
    15b6:	21 97       	sbiw	r28, 0x01	; 1
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	da f7       	brpl	.-10     	; 0x15b6 <log+0x1e>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f eb       	ldi	r21, 0xBF	; 191
    15c8:	9f e3       	ldi	r25, 0x3F	; 63
    15ca:	88 39       	cpi	r24, 0x98	; 152
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <log+0x3e>
    15ce:	80 3e       	cpi	r24, 0xE0	; 224
    15d0:	38 f0       	brcs	.+14     	; 0x15e0 <log+0x48>
    15d2:	21 96       	adiw	r28, 0x01	; 1
    15d4:	8f 77       	andi	r24, 0x7F	; 127
    15d6:	0e 94 a0 07 	call	0xf40	; 0xf40 <__addsf3>
    15da:	ec e7       	ldi	r30, 0x7C	; 124
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <log+0x50>
    15e0:	0e 94 a0 07 	call	0xf40	; 0xf40 <__addsf3>
    15e4:	e9 ea       	ldi	r30, 0xA9	; 169
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_powser>
    15ec:	8b 01       	movw	r16, r22
    15ee:	be 01       	movw	r22, r28
    15f0:	ec 01       	movw	r28, r24
    15f2:	fb 2e       	mov	r15, r27
    15f4:	6f 57       	subi	r22, 0x7F	; 127
    15f6:	71 09       	sbc	r23, r1
    15f8:	75 95       	asr	r23
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 0b       	sbc	r24, r24
    15fe:	99 0b       	sbc	r25, r25
    1600:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatsisf>
    1604:	28 e1       	ldi	r18, 0x18	; 24
    1606:	32 e7       	ldi	r19, 0x72	; 114
    1608:	41 e3       	ldi	r20, 0x31	; 49
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 77 09 	call	0x12ee	; 0x12ee <__mulsf3x>
    1610:	af 2d       	mov	r26, r15
    1612:	98 01       	movw	r18, r16
    1614:	ae 01       	movw	r20, r28
    1616:	ff 90       	pop	r15
    1618:	0f 91       	pop	r16
    161a:	1f 91       	pop	r17
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3x>
    1624:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_round>

00001628 <modf>:
    1628:	fa 01       	movw	r30, r20
    162a:	dc 01       	movw	r26, r24
    162c:	aa 0f       	add	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	bf 57       	subi	r27, 0x7F	; 127
    1636:	28 f4       	brcc	.+10     	; 0x1642 <modf+0x1a>
    1638:	22 27       	eor	r18, r18
    163a:	33 27       	eor	r19, r19
    163c:	44 27       	eor	r20, r20
    163e:	50 78       	andi	r21, 0x80	; 128
    1640:	20 c0       	rjmp	.+64     	; 0x1682 <modf+0x5a>
    1642:	b7 51       	subi	r27, 0x17	; 23
    1644:	90 f4       	brcc	.+36     	; 0x166a <modf+0x42>
    1646:	ab 2f       	mov	r26, r27
    1648:	00 24       	eor	r0, r0
    164a:	46 95       	lsr	r20
    164c:	37 95       	ror	r19
    164e:	27 95       	ror	r18
    1650:	01 1c       	adc	r0, r1
    1652:	a3 95       	inc	r26
    1654:	d2 f3       	brmi	.-12     	; 0x164a <modf+0x22>
    1656:	00 20       	and	r0, r0
    1658:	71 f0       	breq	.+28     	; 0x1676 <modf+0x4e>
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	44 1f       	adc	r20, r20
    1660:	b3 95       	inc	r27
    1662:	da f3       	brmi	.-10     	; 0x165a <modf+0x32>
    1664:	0e d0       	rcall	.+28     	; 0x1682 <modf+0x5a>
    1666:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__subsf3>
    166a:	61 30       	cpi	r22, 0x01	; 1
    166c:	71 05       	cpc	r23, r1
    166e:	a0 e8       	ldi	r26, 0x80	; 128
    1670:	8a 07       	cpc	r24, r26
    1672:	b9 46       	sbci	r27, 0x69	; 105
    1674:	30 f4       	brcc	.+12     	; 0x1682 <modf+0x5a>
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	66 27       	eor	r22, r22
    167c:	77 27       	eor	r23, r23
    167e:	88 27       	eor	r24, r24
    1680:	90 78       	andi	r25, 0x80	; 128
    1682:	30 96       	adiw	r30, 0x00	; 0
    1684:	21 f0       	breq	.+8      	; 0x168e <modf+0x66>
    1686:	20 83       	st	Z, r18
    1688:	31 83       	std	Z+1, r19	; 0x01
    168a:	42 83       	std	Z+2, r20	; 0x02
    168c:	53 83       	std	Z+3, r21	; 0x03
    168e:	08 95       	ret

00001690 <__fp_mpack>:
    1690:	9f 3f       	cpi	r25, 0xFF	; 255
    1692:	31 f0       	breq	.+12     	; 0x16a0 <__fp_mpack_finite+0xc>

00001694 <__fp_mpack_finite>:
    1694:	91 50       	subi	r25, 0x01	; 1
    1696:	20 f4       	brcc	.+8      	; 0x16a0 <__fp_mpack_finite+0xc>
    1698:	87 95       	ror	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	88 0f       	add	r24, r24
    16a2:	91 1d       	adc	r25, r1
    16a4:	96 95       	lsr	r25
    16a6:	87 95       	ror	r24
    16a8:	97 f9       	bld	r25, 7
    16aa:	08 95       	ret

000016ac <__divmodsi4>:
    16ac:	05 2e       	mov	r0, r21
    16ae:	97 fb       	bst	r25, 7
    16b0:	1e f4       	brtc	.+6      	; 0x16b8 <__divmodsi4+0xc>
    16b2:	00 94       	com	r0
    16b4:	0e 94 6d 0b 	call	0x16da	; 0x16da <__negsi2>
    16b8:	57 fd       	sbrc	r21, 7
    16ba:	07 d0       	rcall	.+14     	; 0x16ca <__divmodsi4_neg2>
    16bc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__udivmodsi4>
    16c0:	07 fc       	sbrc	r0, 7
    16c2:	03 d0       	rcall	.+6      	; 0x16ca <__divmodsi4_neg2>
    16c4:	4e f4       	brtc	.+18     	; 0x16d8 <__divmodsi4_exit>
    16c6:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__negsi2>

000016ca <__divmodsi4_neg2>:
    16ca:	50 95       	com	r21
    16cc:	40 95       	com	r20
    16ce:	30 95       	com	r19
    16d0:	21 95       	neg	r18
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255

000016d8 <__divmodsi4_exit>:
    16d8:	08 95       	ret

000016da <__negsi2>:
    16da:	90 95       	com	r25
    16dc:	80 95       	com	r24
    16de:	70 95       	com	r23
    16e0:	61 95       	neg	r22
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	8f 4f       	sbci	r24, 0xFF	; 255
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	08 95       	ret

000016ea <__udivmodsi4>:
    16ea:	a1 e2       	ldi	r26, 0x21	; 33
    16ec:	1a 2e       	mov	r1, r26
    16ee:	aa 1b       	sub	r26, r26
    16f0:	bb 1b       	sub	r27, r27
    16f2:	fd 01       	movw	r30, r26
    16f4:	0d c0       	rjmp	.+26     	; 0x1710 <__udivmodsi4_ep>

000016f6 <__udivmodsi4_loop>:
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	ee 1f       	adc	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	a2 17       	cp	r26, r18
    1700:	b3 07       	cpc	r27, r19
    1702:	e4 07       	cpc	r30, r20
    1704:	f5 07       	cpc	r31, r21
    1706:	20 f0       	brcs	.+8      	; 0x1710 <__udivmodsi4_ep>
    1708:	a2 1b       	sub	r26, r18
    170a:	b3 0b       	sbc	r27, r19
    170c:	e4 0b       	sbc	r30, r20
    170e:	f5 0b       	sbc	r31, r21

00001710 <__udivmodsi4_ep>:
    1710:	66 1f       	adc	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	1a 94       	dec	r1
    171a:	69 f7       	brne	.-38     	; 0x16f6 <__udivmodsi4_loop>
    171c:	60 95       	com	r22
    171e:	70 95       	com	r23
    1720:	80 95       	com	r24
    1722:	90 95       	com	r25
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	bd 01       	movw	r22, r26
    172a:	cf 01       	movw	r24, r30
    172c:	08 95       	ret

0000172e <_exit>:
    172e:	f8 94       	cli

00001730 <__stop_program>:
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <__stop_program>
