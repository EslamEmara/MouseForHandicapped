
MouseForHandicapped.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000018fc  00001990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800068  00800068  00001998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000385c  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001397  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000240e  00000000  00000000  0000694b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  00008d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001289  00000000  00000000  000094dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002078  00000000  00000000  0000a765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
       4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_1>
       8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      28:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
      d6:	05 01       	movw	r0, r10
      d8:	09 02       	muls	r16, r25
      da:	a1 01       	movw	r20, r2
      dc:	09 01       	movw	r0, r18
      de:	a1 00       	.word	0x00a1	; ????
      e0:	05 09       	sbc	r16, r5
      e2:	19 01       	movw	r2, r18
      e4:	29 03       	fmul	r18, r17
      e6:	15 00       	.word	0x0015	; ????
      e8:	25 01       	movw	r4, r10
      ea:	95 03       	fmuls	r17, r21
      ec:	75 01       	movw	r14, r10
      ee:	81 02       	muls	r24, r17
      f0:	95 01       	movw	r18, r10
      f2:	75 05       	cpc	r23, r5
      f4:	81 03       	fmuls	r16, r17
      f6:	05 01       	movw	r0, r10
      f8:	09 30       	cpi	r16, 0x09	; 9
      fa:	09 31       	cpi	r16, 0x19	; 25
      fc:	09 38       	cpi	r16, 0x89	; 137
      fe:	15 81       	ldd	r17, Z+5	; 0x05
     100:	25 7f       	andi	r18, 0xF5	; 245
     102:	75 08       	sbc	r7, r5
     104:	95 03       	fmuls	r17, r21
     106:	81 06       	cpc	r8, r17
     108:	c0 c0       	rjmp	.+384    	; 0x28a <rxbit2+0x2>

0000010a <usbDescriptorConfiguration>:
     10a:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
     11a:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
     12a:	00 64                                               .d

0000012c <usbDescriptorDevice>:
     12c:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
     13c:	00 01                                               ..

0000013e <usbDescriptorStringDevice>:
     13e:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

0000014a <usbDescriptorStringVendor>:
     14a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
     15a:	74 00                                               t.

0000015c <usbDescriptorString0>:
     15c:	04 03 09 04                                         ....

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf e5       	ldi	r28, 0x5F	; 95
     166:	d8 e0       	ldi	r29, 0x08	; 8
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	a0 e6       	ldi	r26, 0x60	; 96
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	ec ef       	ldi	r30, 0xFC	; 252
     174:	f8 e1       	ldi	r31, 0x18	; 24
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	a8 36       	cpi	r26, 0x68	; 104
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	a8 e6       	ldi	r26, 0x68	; 104
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	a2 3b       	cpi	r26, 0xB2	; 178
     18e:	b2 07       	cpc	r27, r18
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	0e 94 4d 05 	call	0xa9a	; 0xa9a <main>
     196:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <_exit>

0000019a <__bad_interrupt>:
     19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     19e:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     1a0:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     1a6:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     1a8:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     1aa:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     1ac:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <usbCrcLoopEntry>

000001b0 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     1b0:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     1b2:	82 27       	eor	r24, r18

000001b4 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     1b4:	97 95       	ror	r25
    ror     resCrcL
     1b6:	87 95       	ror	r24
    brcs    usbCrcNoXor
     1b8:	10 f0       	brcs	.+4      	; 0x1be <usbCrcNoXor>
    eor     resCrcL, polyL
     1ba:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     1bc:	95 27       	eor	r25, r21

000001be <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     1be:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     1c0:	c8 f3       	brcs	.-14     	; 0x1b4 <usbCrcBitLoop>

000001c2 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     1c2:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     1c4:	a8 f3       	brcs	.-22     	; 0x1b0 <usbCrcByteLoop>

000001c6 <usbCrcReady>:
usbCrcReady:
    ret
     1c6:	08 95       	ret

000001c8 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     1c8:	ea df       	rcall	.-44     	; 0x19e <usbCrc16>
    st      ptr+, resCrcL
     1ca:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     1cc:	9d 93       	st	X+, r25
    ret
     1ce:	08 95       	ret

000001d0 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     1d0:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     1d2:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     1d4:	cf 93       	push	r28

000001d6 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     1d6:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     1d8:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
     1da:	e9 f7       	brne	.-6      	; 0x1d6 <waitForJ>

000001dc <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     1dc:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1de:	09 c0       	rjmp	.+18     	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1e0:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1e4:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1e8:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <foundK>
    sbis    USBIN, USBMINUS
     1ec:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     1f0:	a3 c0       	rjmp	.+326    	; 0x338 <sofError>

000001f2 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     1f2:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     1f4:	c0 91 95 00 	lds	r28, 0x0095	; 0x800095 <usbInputBufOffset>
    clr     YH                  ;1 [5]
     1f8:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     1fa:	c4 56       	subi	r28, 0x64	; 100
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     1fc:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     1fe:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
     200:	02 c0       	rjmp	.+4      	; 0x206 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
     202:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
     204:	eb cf       	rjmp	.-42     	; 0x1dc <waitForK>

00000206 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     206:	2f 93       	push	r18
    push    x1              ;2 [12]
     208:	0f 93       	push	r16
    push    x2              ;2 [14]
     20a:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     20c:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
     20e:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     210:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
     212:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     214:	4f 93       	push	r20
    push    cnt             ;2 [24]
     216:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     218:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
     21a:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     21c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     21e:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
     220:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     222:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     224:	31 c0       	rjmp	.+98     	; 0x288 <rxbit2>

00000226 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     226:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     228:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     22a:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
     22c:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     22e:	28 c0       	rjmp	.+80     	; 0x280 <didUnstuff0>

00000230 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     230:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     232:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     234:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     236:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     238:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
     23a:	29 c0       	rjmp	.+82     	; 0x28e <didUnstuff1>

0000023c <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     23c:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     23e:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     240:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     242:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     244:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
     246:	2b c0       	rjmp	.+86     	; 0x29e <didUnstuff2>

00000248 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     248:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
     24a:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     24c:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     24e:	2a c0       	rjmp	.+84     	; 0x2a4 <didUnstuff3>

00000250 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     250:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     252:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
     254:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     256:	2c c0       	rjmp	.+88     	; 0x2b0 <didUnstuff4>

00000258 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     258:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     25a:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
     25c:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     25e:	2f c0       	rjmp	.+94     	; 0x2be <didUnstuff5>

00000260 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     260:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     262:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
     264:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     266:	32 c0       	rjmp	.+100    	; 0x2cc <didUnstuff6>

00000268 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     268:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     26a:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
     26c:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     26e:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     270:	00 00       	nop
    eor     x2, x1      ;1 [6]
     272:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     274:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
     276:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     278:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
     27a:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
     27c:	c9 f1       	breq	.+114    	; 0x2f0 <se0>
    andi    shift, 0xf9 ;1 [12]
     27e:	29 7f       	andi	r18, 0xF9	; 249

00000280 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     280:	91 f2       	breq	.-92     	; 0x226 <unstuff0>
    eor     x1, x2      ;1 [14]
     282:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     284:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
     286:	21 f9       	bld	r18, 1

00000288 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     288:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
     28a:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     28c:	89 f2       	breq	.-94     	; 0x230 <unstuff1>

0000028e <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     28e:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     290:	58 f1       	brcs	.+86     	; 0x2e8 <overflow>
    eor     x2, x1      ;1 [22]
     292:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     294:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
     296:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     298:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
     29a:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     29c:	79 f2       	breq	.-98     	; 0x23c <unstuff2>

0000029e <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     29e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     2a0:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
     2a2:	23 f9       	bld	r18, 3

000002a4 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     2a4:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     2a6:	81 f2       	breq	.-96     	; 0x248 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     2a8:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
     2aa:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     2ac:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
     2ae:	24 f9       	bld	r18, 4

000002b0 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     2b0:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     2b2:	71 f2       	breq	.-100    	; 0x250 <unstuff4>
    nop2                ;2 [40]
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     2b6:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
     2b8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     2ba:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
     2bc:	25 f9       	bld	r18, 5

000002be <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     2be:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     2c0:	59 f2       	breq	.-106    	; 0x258 <unstuff5>
    nop2                ;2 [48]
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     2c4:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
     2c6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     2c8:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
     2ca:	26 f9       	bld	r18, 6

000002cc <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     2cc:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     2ce:	40 f2       	brcs	.-112    	; 0x260 <unstuff6>
    nop2                ;2 [56]
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     2d2:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
     2d4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     2d6:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
     2d8:	27 f9       	bld	r18, 7

000002da <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     2da:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     2dc:	28 f6       	brcc	.-118    	; 0x268 <rxLoop>

000002de <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     2de:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     2e0:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     2e2:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
     2e4:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     2e6:	f9 cf       	rjmp	.-14     	; 0x2da <didUnstuff7>

000002e8 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     2e8:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     2ea:	1a bf       	out	0x3a, r17	; 58

000002ec <ignorePacket>:
ignorePacket:
    clr     token
     2ec:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     2ee:	19 c0       	rjmp	.+50     	; 0x322 <handleSetupOrOut>

000002f0 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     2f0:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     2f2:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     2f4:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     2f6:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     2f8:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     2fa:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     2fc:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     2fe:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     300:	f9 f0       	breq	.+62     	; 0x340 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     302:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     304:	e9 f0       	breq	.+58     	; 0x340 <handleData>
    lds     shift, usbDeviceAddr;[17]
     306:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     30a:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     30c:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     30e:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     310:	ed cf       	rjmp	.-38     	; 0x2ec <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     312:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     314:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     316:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     318:	41 f1       	breq	.+80     	; 0x36a <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     31a:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     31c:	11 f0       	breq	.+4      	; 0x322 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     31e:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     320:	29 f7       	brne	.-54     	; 0x2ec <ignorePacket>

00000322 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     322:	00 93 9a 00 	sts	0x009A, r16	; 0x80009a <usbCurrentTok>

00000326 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     326:	3f 91       	pop	r19
     328:	4f 91       	pop	r20
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	2f 91       	pop	r18
     330:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
     332:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     334:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     336:	4f cf       	rjmp	.-354    	; 0x1d6 <waitForJ>

00000338 <sofError>:
sofError:
    POP_RETI                    ;macro call
     338:	cf 91       	pop	r28
     33a:	cf bf       	out	0x3f, r28	; 63
     33c:	cf 91       	pop	r28
    reti
     33e:	18 95       	reti

00000340 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     340:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <usbCurrentTok>
    tst     shift               ;[20]
     344:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     346:	79 f3       	breq	.-34     	; 0x326 <doReturn>
    lds     x2, usbRxLen        ;[22]
     348:	10 91 98 00 	lds	r17, 0x0098	; 0x800098 <usbRxLen>
    tst     x2                  ;[24]
     34c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     34e:	69 f5       	brne	.+90     	; 0x3aa <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     350:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     352:	6a f1       	brmi	.+90     	; 0x3ae <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     354:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     358:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     35c:	10 91 95 00 	lds	r17, 0x0095	; 0x800095 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     360:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     362:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     364:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     368:	22 c0       	rjmp	.+68     	; 0x3ae <sendAckAndReti>

0000036a <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     36a:	00 91 98 00 	lds	r16, 0x0098	; 0x800098 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     36e:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     370:	e4 f4       	brge	.+56     	; 0x3aa <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     372:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     374:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     376:	49 f4       	brne	.+18     	; 0x38a <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     378:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     37c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     37e:	19 c0       	rjmp	.+50     	; 0x3b2 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     380:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     384:	cc e7       	ldi	r28, 0x7C	; 124
    ldi     YH, hi8(usbTxBuf)   ;[44]
     386:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     388:	18 c0       	rjmp	.+48     	; 0x3ba <usbSendAndReti>

0000038a <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     38a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     38e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     390:	10 c0       	rjmp	.+32     	; 0x3b2 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     392:	00 93 87 00 	sts	0x0087, r16	; 0x800087 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     396:	c8 e8       	ldi	r28, 0x88	; 136
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     398:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     39a:	0f c0       	rjmp	.+30     	; 0x3ba <usbSendAndReti>

0000039c <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
     39c:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
     39e:	a8 f4       	brcc	.+42     	; 0x3ca <doExorN1>
    subi    x4, 1               ;[-3]
     3a0:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
     3a2:	a9 f4       	brne	.+42     	; 0x3ce <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
     3a4:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
     3a6:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
     3a8:	f9 cf       	rjmp	.-14     	; 0x39c <stuffN1Delay>

000003aa <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     3aa:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <usbSendX3>

000003ae <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     3ae:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <usbSendX3>

000003b2 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     3b2:	43 2f       	mov	r20, r19

000003b4 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     3b4:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     3b6:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     3b8:	32 e0       	ldi	r19, 0x02	; 2

000003ba <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
     3ba:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
     3bc:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     3be:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
     3c0:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
     3c2:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
     3c4:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
     3c6:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
     3c8:	5f 93       	push	r21

000003ca <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
     3ca:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
     3cc:	56 e0       	ldi	r21, 0x06	; 6

000003ce <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
     3ce:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
     3d0:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
     3d2:	20 f4       	brcc	.+8      	; 0x3dc <doExorN2>
    subi    x4, 1               ;[03]
     3d4:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
     3d6:	21 f4       	brne	.+8      	; 0x3e0 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
     3d8:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
     3da:	f9 cf       	rjmp	.-14     	; 0x3ce <commonN1>

000003dc <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
     3dc:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
     3de:	56 e0       	ldi	r21, 0x06	; 6

000003e0 <commonN2>:
commonN2:
    nop                         ;[06] [14]
     3e0:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
     3e2:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
     3e4:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
     3e6:	d0 f2       	brcs	.-76     	; 0x39c <stuffN1Delay>

000003e8 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
     3e8:	27 95       	ror	r18
    brcc    doExor6             ;[43]
     3ea:	28 f4       	brcc	.+10     	; 0x3f6 <doExor6>
    subi    x4, 1               ;[44]
     3ec:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
     3ee:	29 f4       	brne	.+10     	; 0x3fa <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
     3f0:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
     3f2:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
     3f4:	f9 cf       	rjmp	.-14     	; 0x3e8 <stuff6Delay>

000003f6 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
     3f6:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
     3f8:	56 e0       	ldi	r21, 0x06	; 6

000003fa <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
     3fa:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
     3fc:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
     3fe:	20 f4       	brcc	.+8      	; 0x408 <doExor7>
    subi    x4, 1               ;[50]
     400:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
     402:	21 f4       	brne	.+8      	; 0x40c <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
     404:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
     406:	f9 cf       	rjmp	.-14     	; 0x3fa <common6>

00000408 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
     408:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
     40a:	56 e0       	ldi	r21, 0x06	; 6

0000040c <common7>:
common7:
    ld      shift, y+           ;[53]
     40c:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
     40e:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
     410:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
     412:	21 f6       	brne	.-120    	; 0x39c <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     414:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
     416:	10 91 99 00 	lds	r17, 0x0099	; 0x800099 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
     41a:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
     41c:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
     41e:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     420:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
     422:	11 f0       	breq	.+4      	; 0x428 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
     424:	10 93 93 00 	sts	0x0093, r17	; 0x800093 <usbDeviceAddr>

00000428 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
     428:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
     42a:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
     42c:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
     42e:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
     430:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
     432:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
     434:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
     436:	5f 91       	pop	r21
    nop2                        ;[12]
     438:	00 c0       	rjmp	.+0      	; 0x43a <skipAddrAssign+0x12>
    nop2                        ;[14]
     43a:	00 c0       	rjmp	.+0      	; 0x43c <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
     43c:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
     43e:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
     440:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
     442:	71 cf       	rjmp	.-286    	; 0x326 <doReturn>

00000444 <App_Init>:
	if( sensor_S>LOW_CALIBRATED && sensor_G>LOW_CALIBRATED && sensor_A>LOW_CALIBRATED && sensor_M>LOW_CALIBRATED )
	{
		return CALIBRATED;
	}
	return NOT_CALIBRATED;
}
     444:	8b b3       	in	r24, 0x1b	; 27
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	0e 94 a3 04 	call	0x946	; 0x946 <LED_Init>
     44c:	8b b3       	in	r24, 0x1b	; 27
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	0e 94 a7 04 	call	0x94e	; 0x94e <LED_TurnOn>
     454:	8b b3       	in	r24, 0x1b	; 27
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	0e 94 a3 04 	call	0x946	; 0x946 <LED_Init>
     45c:	0e 94 15 04 	call	0x82a	; 0x82a <BNO055_Init>
     460:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Mouse_init>
     464:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TouchSensor_config>
     468:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <TouchSensor_config+0x1>
     46c:	0e 94 44 05 	call	0xa88	; 0xa88 <Touch_Init>
     470:	08 95       	ret

00000472 <App_OrderMouse>:
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	61 f0       	breq	.+24     	; 0x48e <App_OrderMouse+0x1c>
     476:	28 f4       	brcc	.+10     	; 0x482 <App_OrderMouse+0x10>
     478:	88 23       	and	r24, r24
     47a:	79 f0       	breq	.+30     	; 0x49a <App_OrderMouse+0x28>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	81 f0       	breq	.+32     	; 0x4a0 <App_OrderMouse+0x2e>
     480:	08 95       	ret
     482:	84 30       	cpi	r24, 0x04	; 4
     484:	81 f0       	breq	.+32     	; 0x4a6 <App_OrderMouse+0x34>
     486:	30 f0       	brcs	.+12     	; 0x494 <App_OrderMouse+0x22>
     488:	85 30       	cpi	r24, 0x05	; 5
     48a:	81 f0       	breq	.+32     	; 0x4ac <App_OrderMouse+0x3a>
     48c:	08 95       	ret
     48e:	0e 94 2c 05 	call	0xa58	; 0xa58 <Mouse_MoveLeft>
     492:	08 95       	ret
     494:	0e 94 30 05 	call	0xa60	; 0xa60 <Mouse_MoveRight>
     498:	08 95       	ret
     49a:	0e 94 34 05 	call	0xa68	; 0xa68 <Mouse_MoveUp>
     49e:	08 95       	ret
     4a0:	0e 94 38 05 	call	0xa70	; 0xa70 <Mouse_MoveDown>
     4a4:	08 95       	ret
     4a6:	0e 94 40 05 	call	0xa80	; 0xa80 <Mouse_LeftClick>
     4aa:	08 95       	ret
     4ac:	0e 94 3c 05 	call	0xa78	; 0xa78 <Mouse_RightClick>
     4b0:	08 95       	ret

000004b2 <App_GetTouchSensorState>:
     4b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TouchSensor_config>
     4b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <TouchSensor_config+0x1>
     4ba:	0e 94 49 05 	call	0xa92	; 0xa92 <Touch_Read>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	51 f4       	brne	.+20     	; 0x4d6 <App_GetTouchSensorState+0x24>
     4c2:	8b b3       	in	r24, 0x1b	; 27
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	0e 94 a7 04 	call	0x94e	; 0x94e <LED_TurnOn>
     4ca:	8b b3       	in	r24, 0x1b	; 27
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	0e 94 aa 04 	call	0x954	; 0x954 <LED_TurnOff>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	08 95       	ret
     4d6:	8b b3       	in	r24, 0x1b	; 27
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	0e 94 aa 04 	call	0x954	; 0x954 <LED_TurnOff>
     4de:	8b b3       	in	r24, 0x1b	; 27
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	0e 94 a7 04 	call	0x94e	; 0x94e <LED_TurnOn>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret

000004ea <App_GetImuCalibPoint>:
     4ea:	81 e7       	ldi	r24, 0x71	; 113
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 c9 03 	call	0x792	; 0x792 <BNO055_ReadEulerAngles>
     4f2:	08 95       	ret

000004f4 <App_GetLargestAngle>:
 * return: index of the largest value (1 or 2 or 3) -> u8_t
 * Ex: index = App_GetLargestAngle(54,21,100); -> index=3
 */
u8_t App_GetLargestAngle(s16_t value1,s16_t value2,s16_t value3)
{ // yaw roll pitch
	value1 = abs(value1);
     4f4:	9c 01       	movw	r18, r24
     4f6:	99 23       	and	r25, r25
     4f8:	24 f4       	brge	.+8      	; 0x502 <App_GetLargestAngle+0xe>
     4fa:	22 27       	eor	r18, r18
     4fc:	33 27       	eor	r19, r19
     4fe:	28 1b       	sub	r18, r24
     500:	39 0b       	sbc	r19, r25
	value2 = abs(value2);
     502:	cb 01       	movw	r24, r22
     504:	99 23       	and	r25, r25
     506:	24 f4       	brge	.+8      	; 0x510 <App_GetLargestAngle+0x1c>
     508:	88 27       	eor	r24, r24
     50a:	99 27       	eor	r25, r25
     50c:	86 1b       	sub	r24, r22
     50e:	97 0b       	sbc	r25, r23
	value3 = abs(value3);
     510:	ba 01       	movw	r22, r20
     512:	55 23       	and	r21, r21
     514:	24 f4       	brge	.+8      	; 0x51e <App_GetLargestAngle+0x2a>
     516:	66 27       	eor	r22, r22
     518:	77 27       	eor	r23, r23
     51a:	64 1b       	sub	r22, r20
     51c:	75 0b       	sbc	r23, r21
	if(value1 > value2)
     51e:	82 17       	cp	r24, r18
     520:	93 07       	cpc	r25, r19
     522:	2c f4       	brge	.+10     	; 0x52e <App_GetLargestAngle+0x3a>
	{
		if(value1 > value3)		{ return 1; }
     524:	62 17       	cp	r22, r18
     526:	73 07       	cpc	r23, r19
     528:	3c f4       	brge	.+14     	; 0x538 <App_GetLargestAngle+0x44>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	08 95       	ret
		else 					{ return 3; }
	}
	else
	{
		if(value2 > value3)		{ return 2; }
     52e:	68 17       	cp	r22, r24
     530:	79 07       	cpc	r23, r25
     532:	24 f4       	brge	.+8      	; 0x53c <App_GetLargestAngle+0x48>
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	08 95       	ret
	value2 = abs(value2);
	value3 = abs(value3);
	if(value1 > value2)
	{
		if(value1 > value3)		{ return 1; }
		else 					{ return 3; }
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	08 95       	ret
	}
	else
	{
		if(value2 > value3)		{ return 2; }
		else 					{ return 3; }
     53c:	83 e0       	ldi	r24, 0x03	; 3
	}
     53e:	08 95       	ret

00000540 <App_GetImuGradient>:
 * Args: None
 * Return: u8_t gradient_Direction -> (LEFT, RIGHT, UP, DOWN)
 * Ex: u8_t direction = App_GetImuGradient();
 */				
u8_t App_GetImuGradient(void)
{
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	00 d0       	rcall	.+0      	; 0x552 <App_GetImuGradient+0x12>
     552:	00 d0       	rcall	.+0      	; 0x554 <App_GetImuGradient+0x14>
     554:	00 d0       	rcall	.+0      	; 0x556 <App_GetImuGradient+0x16>
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	static u16_t period = 1000;
	// define cursor speed
	Delay_ms_independent(period);
     55a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     55e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     562:	0e 94 6f 04 	call	0x8de	; 0x8de <Delay_ms_independent>
	s16_t absolute_gradient[3]; // current_reading - reference_point
	//-- get current imu reading
	BNO055_ReadEulerAngles(current_reading);
     566:	8b e6       	ldi	r24, 0x6B	; 107
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 c9 03 	call	0x792	; 0x792 <BNO055_ReadEulerAngles>
	//-- compare this reading to calibration point to know imu (head) gradient
	absolute_gradient[0] = current_reading[0] - reference_angles[0]; // YAW
     56e:	ab e6       	ldi	r26, 0x6B	; 107
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	cd 90       	ld	r12, X+
     574:	dc 90       	ld	r13, X
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	e1 e7       	ldi	r30, 0x71	; 113
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	c8 1a       	sub	r12, r24
     582:	d9 0a       	sbc	r13, r25
     584:	da 82       	std	Y+2, r13	; 0x02
     586:	c9 82       	std	Y+1, r12	; 0x01
	absolute_gradient[1] = current_reading[1] - reference_angles[1]; // ROLL
     588:	12 96       	adiw	r26, 0x02	; 2
     58a:	0d 91       	ld	r16, X+
     58c:	1c 91       	ld	r17, X
     58e:	13 97       	sbiw	r26, 0x03	; 3
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	08 1b       	sub	r16, r24
     596:	19 0b       	sbc	r17, r25
     598:	1c 83       	std	Y+4, r17	; 0x04
     59a:	0b 83       	std	Y+3, r16	; 0x03
	absolute_gradient[2] = current_reading[2] - reference_angles[2]; // PITCH
     59c:	14 96       	adiw	r26, 0x04	; 4
     59e:	ed 90       	ld	r14, X+
     5a0:	fc 90       	ld	r15, X
     5a2:	15 97       	sbiw	r26, 0x05	; 5
     5a4:	84 81       	ldd	r24, Z+4	; 0x04
     5a6:	95 81       	ldd	r25, Z+5	; 0x05
     5a8:	e8 1a       	sub	r14, r24
     5aa:	f9 0a       	sbc	r15, r25
     5ac:	fe 82       	std	Y+6, r15	; 0x06
     5ae:	ed 82       	std	Y+5, r14	; 0x05
	//-- decide depending on calculations to which direction mouse should move
	// get the largest angle of them (sign isn't considered)
	u8_t angle_name = App_GetLargestAngle(absolute_gradient[0],absolute_gradient[1],absolute_gradient[2]);
     5b0:	a7 01       	movw	r20, r14
     5b2:	b8 01       	movw	r22, r16
     5b4:	c6 01       	movw	r24, r12
     5b6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <App_GetLargestAngle>
	switch (absolute_gradient[angle_name])
     5ba:	e8 2f       	mov	r30, r24
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	2c 0f       	add	r18, r28
     5c8:	3d 1f       	adc	r19, r29
     5ca:	e2 0f       	add	r30, r18
     5cc:	f3 1f       	adc	r31, r19
     5ce:	20 81       	ld	r18, Z
     5d0:	31 81       	ldd	r19, Z+1	; 0x01
     5d2:	29 32       	cpi	r18, 0x29	; 41
     5d4:	31 05       	cpc	r19, r1
     5d6:	34 f4       	brge	.+12     	; 0x5e4 <App_GetImuGradient+0xa4>
     5d8:	20 31       	cpi	r18, 0x10	; 16
     5da:	31 05       	cpc	r19, r1
     5dc:	74 f4       	brge	.+28     	; 0x5fa <App_GetImuGradient+0xba>
     5de:	33 23       	and	r19, r19
     5e0:	2c f4       	brge	.+10     	; 0x5ec <App_GetImuGradient+0xac>
     5e2:	19 c0       	rjmp	.+50     	; 0x616 <App_GetImuGradient+0xd6>
     5e4:	2d 33       	cpi	r18, 0x3D	; 61
     5e6:	31 05       	cpc	r19, r1
     5e8:	7c f0       	brlt	.+30     	; 0x608 <App_GetImuGradient+0xc8>
     5ea:	15 c0       	rjmp	.+42     	; 0x616 <App_GetImuGradient+0xd6>
	{
		case 0 ... 15:
			period = 1000;
     5ec:	28 ee       	ldi	r18, 0xE8	; 232
     5ee:	33 e0       	ldi	r19, 0x03	; 3
     5f0:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5f4:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     5f8:	12 c0       	rjmp	.+36     	; 0x61e <App_GetImuGradient+0xde>
		case 16 ... 40:
			period = 400;
     5fa:	20 e9       	ldi	r18, 0x90	; 144
     5fc:	31 e0       	ldi	r19, 0x01	; 1
     5fe:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     602:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     606:	0b c0       	rjmp	.+22     	; 0x61e <App_GetImuGradient+0xde>
		case 41 ... 60:
			period = 200;
     608:	28 ec       	ldi	r18, 0xC8	; 200
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     610:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     614:	04 c0       	rjmp	.+8      	; 0x61e <App_GetImuGradient+0xde>
		default: // larger than 60
			period = 0;
     616:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     61a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
	}
	switch(angle_name)
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	29 f0       	breq	.+10     	; 0x62c <App_GetImuGradient+0xec>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	81 f0       	breq	.+32     	; 0x646 <App_GetImuGradient+0x106>
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	31 f5       	brne	.+76     	; 0x676 <App_GetImuGradient+0x136>
     62a:	18 c0       	rjmp	.+48     	; 0x65c <App_GetImuGradient+0x11c>
	{
		// head is turned around X-axis
		case ROLL:
			// positive angle > threshold?
			if(absolute_gradient[0] >= THRESHOLD_X ){ return RIGHT_CLICK; }
     62c:	3a e0       	ldi	r19, 0x0A	; 10
     62e:	c3 16       	cp	r12, r19
     630:	d1 04       	cpc	r13, r1
     632:	1c f5       	brge	.+70     	; 0x67a <App_GetImuGradient+0x13a>
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[0]) >= THRESHOLD_X ){ return LEFT_CLICK; }
     634:	d1 94       	neg	r13
     636:	c1 94       	neg	r12
     638:	d1 08       	sbc	r13, r1
     63a:	8a e0       	ldi	r24, 0x0A	; 10
     63c:	c8 16       	cp	r12, r24
     63e:	d1 04       	cpc	r13, r1
     640:	f4 f4       	brge	.+60     	; 0x67e <App_GetImuGradient+0x13e>
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
			break;
	}
	//-- no head motion 
	return NOTHING;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	25 c0       	rjmp	.+74     	; 0x690 <App_GetImuGradient+0x150>
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[0]) >= THRESHOLD_X ){ return LEFT_CLICK; }
			break;
		// head is turned around Y-axis
		case PITCH:
			if(absolute_gradient[1] >= THRESHOLD_Y){ return UP; }
     646:	0a 30       	cpi	r16, 0x0A	; 10
     648:	11 05       	cpc	r17, r1
     64a:	dc f4       	brge	.+54     	; 0x682 <App_GetImuGradient+0x142>
			else if ( (-1*absolute_gradient[1]) >= THRESHOLD_Y ){ return DOWN; }
     64c:	11 95       	neg	r17
     64e:	01 95       	neg	r16
     650:	11 09       	sbc	r17, r1
     652:	0a 30       	cpi	r16, 0x0A	; 10
     654:	11 05       	cpc	r17, r1
     656:	bc f4       	brge	.+46     	; 0x686 <App_GetImuGradient+0x146>
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
			break;
	}
	//-- no head motion 
	return NOTHING;
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	1a c0       	rjmp	.+52     	; 0x690 <App_GetImuGradient+0x150>
			if(absolute_gradient[1] >= THRESHOLD_Y){ return UP; }
			else if ( (-1*absolute_gradient[1]) >= THRESHOLD_Y ){ return DOWN; }
			break;
		// head is turned around Z-axis
		case YAW:
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
     65c:	2a e0       	ldi	r18, 0x0A	; 10
     65e:	e2 16       	cp	r14, r18
     660:	f1 04       	cpc	r15, r1
     662:	9c f4       	brge	.+38     	; 0x68a <App_GetImuGradient+0x14a>
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
     664:	f1 94       	neg	r15
     666:	e1 94       	neg	r14
     668:	f1 08       	sbc	r15, r1
     66a:	3a e0       	ldi	r19, 0x0A	; 10
     66c:	e3 16       	cp	r14, r19
     66e:	f1 04       	cpc	r15, r1
     670:	74 f4       	brge	.+28     	; 0x68e <App_GetImuGradient+0x14e>
			break;
	}
	//-- no head motion 
	return NOTHING;
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	0d c0       	rjmp	.+26     	; 0x690 <App_GetImuGradient+0x150>
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	0b c0       	rjmp	.+22     	; 0x690 <App_GetImuGradient+0x150>
	switch(angle_name)
	{
		// head is turned around X-axis
		case ROLL:
			// positive angle > threshold?
			if(absolute_gradient[0] >= THRESHOLD_X ){ return RIGHT_CLICK; }
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	09 c0       	rjmp	.+18     	; 0x690 <App_GetImuGradient+0x150>
			// negative angle > threshold?
			else if ( (-1*absolute_gradient[0]) >= THRESHOLD_X ){ return LEFT_CLICK; }
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	07 c0       	rjmp	.+14     	; 0x690 <App_GetImuGradient+0x150>
			break;
		// head is turned around Y-axis
		case PITCH:
			if(absolute_gradient[1] >= THRESHOLD_Y){ return UP; }
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	05 c0       	rjmp	.+10     	; 0x690 <App_GetImuGradient+0x150>
			else if ( (-1*absolute_gradient[1]) >= THRESHOLD_Y ){ return DOWN; }
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	03 c0       	rjmp	.+6      	; 0x690 <App_GetImuGradient+0x150>
			break;
		// head is turned around Z-axis
		case YAW:
			if(absolute_gradient[2] >= THRESHOLD_Z){ return RIGHT; }
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	01 c0       	rjmp	.+2      	; 0x690 <App_GetImuGradient+0x150>
			else if ( (-1*absolute_gradient[2]) >= THRESHOLD_Z ){ return LEFT; }
     68e:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	//-- no head motion 
	return NOTHING;
}
     690:	26 96       	adiw	r28, 0x06	; 6
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	08 95       	ret

000006ae <BNO055_WriteByte>:
	  BNO055_SetMagOffsets(bias.MAG_OFFSET);
	  BNO055_SetMagRadius(bias.MAG_RADIUS);
	  BNO055_SetAccRadius(bias.ACCEL_RADIUS);
	  BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, NDOF);
	  
}
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	c8 2f       	mov	r28, r24
     6b6:	16 2f       	mov	r17, r22
     6b8:	d4 2f       	mov	r29, r20
     6ba:	0e 94 4c 06 	call	0xc98	; 0xc98 <I2C_Master_Start>
     6be:	81 2f       	mov	r24, r17
     6c0:	0e 94 74 06 	call	0xce8	; 0xce8 <I2C_Master_Write>
     6c4:	8d 2f       	mov	r24, r29
     6c6:	0e 94 74 06 	call	0xce8	; 0xce8 <I2C_Master_Write>
     6ca:	8c 2f       	mov	r24, r28
     6cc:	0e 94 8a 06 	call	0xd14	; 0xd14 <I2C_Repeated_Start>
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	08 95       	ret

000006d8 <BNO055_ReadByte>:
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	c8 2f       	mov	r28, r24
     6de:	d6 2f       	mov	r29, r22
     6e0:	0e 94 4c 06 	call	0xc98	; 0xc98 <I2C_Master_Start>
     6e4:	8d 2f       	mov	r24, r29
     6e6:	0e 94 74 06 	call	0xce8	; 0xce8 <I2C_Master_Write>
     6ea:	8c 2f       	mov	r24, r28
     6ec:	0e 94 8a 06 	call	0xd14	; 0xd14 <I2C_Repeated_Start>
     6f0:	0e 94 b2 06 	call	0xd64	; 0xd64 <I2C_Read_Ack>
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <BNO055_ReadBytes>:
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	c8 2f       	mov	r28, r24
     708:	16 2f       	mov	r17, r22
     70a:	d4 2f       	mov	r29, r20
     70c:	79 01       	movw	r14, r18
     70e:	0e 94 4c 06 	call	0xc98	; 0xc98 <I2C_Master_Start>
     712:	81 2f       	mov	r24, r17
     714:	0e 94 74 06 	call	0xce8	; 0xce8 <I2C_Master_Write>
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 8a 06 	call	0xd14	; 0xd14 <I2C_Repeated_Start>
     71e:	c0 e0       	ldi	r28, 0x00	; 0
     720:	08 c0       	rjmp	.+16     	; 0x732 <BNO055_ReadBytes+0x38>
     722:	87 01       	movw	r16, r14
     724:	0c 0f       	add	r16, r28
     726:	11 1d       	adc	r17, r1
     728:	0e 94 b2 06 	call	0xd64	; 0xd64 <I2C_Read_Ack>
     72c:	f8 01       	movw	r30, r16
     72e:	80 83       	st	Z, r24
     730:	cf 5f       	subi	r28, 0xFF	; 255
     732:	cd 17       	cp	r28, r29
     734:	b0 f3       	brcs	.-20     	; 0x722 <BNO055_ReadBytes+0x28>
     736:	c7 01       	movw	r24, r14
     738:	8d 0f       	add	r24, r29
     73a:	91 1d       	adc	r25, r1
     73c:	ec 01       	movw	r28, r24
     73e:	0e 94 c0 06 	call	0xd80	; 0xd80 <I2C_Read_Nack>
     742:	88 83       	st	Y, r24
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <BNO055_GetCalibStat>:
     752:	cf 93       	push	r28
     754:	c8 2f       	mov	r28, r24
     756:	65 e3       	ldi	r22, 0x35	; 53
     758:	88 e2       	ldi	r24, 0x28	; 40
     75a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <BNO055_ReadByte>
     75e:	c1 11       	cpse	r28, r1
     760:	05 c0       	rjmp	.+10     	; 0x76c <BNO055_GetCalibStat+0x1a>
     762:	82 95       	swap	r24
     764:	86 95       	lsr	r24
     766:	86 95       	lsr	r24
     768:	83 70       	andi	r24, 0x03	; 3
     76a:	11 c0       	rjmp	.+34     	; 0x78e <BNO055_GetCalibStat+0x3c>
     76c:	c1 30       	cpi	r28, 0x01	; 1
     76e:	21 f4       	brne	.+8      	; 0x778 <BNO055_GetCalibStat+0x26>
     770:	80 73       	andi	r24, 0x30	; 48
     772:	82 95       	swap	r24
     774:	8f 70       	andi	r24, 0x0F	; 15
     776:	0b c0       	rjmp	.+22     	; 0x78e <BNO055_GetCalibStat+0x3c>
     778:	c2 30       	cpi	r28, 0x02	; 2
     77a:	21 f4       	brne	.+8      	; 0x784 <BNO055_GetCalibStat+0x32>
     77c:	8c 70       	andi	r24, 0x0C	; 12
     77e:	86 95       	lsr	r24
     780:	86 95       	lsr	r24
     782:	05 c0       	rjmp	.+10     	; 0x78e <BNO055_GetCalibStat+0x3c>
     784:	c3 30       	cpi	r28, 0x03	; 3
     786:	11 f4       	brne	.+4      	; 0x78c <BNO055_GetCalibStat+0x3a>
     788:	83 70       	andi	r24, 0x03	; 3
     78a:	01 c0       	rjmp	.+2      	; 0x78e <BNO055_GetCalibStat+0x3c>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <BNO055_ReadEulerAngles>:
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <BNO055_ReadEulerAngles+0xa>
     79c:	00 d0       	rcall	.+0      	; 0x79e <BNO055_ReadEulerAngles+0xc>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <BNO055_ReadEulerAngles+0xe>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	8c 01       	movw	r16, r24
     7a6:	9e 01       	movw	r18, r28
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	46 e0       	ldi	r20, 0x06	; 6
     7ae:	6a e1       	ldi	r22, 0x1A	; 26
     7b0:	88 e2       	ldi	r24, 0x28	; 40
     7b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <BNO055_ReadBytes>
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	98 2f       	mov	r25, r24
     7bc:	88 27       	eor	r24, r24
     7be:	29 81       	ldd	r18, Y+1	; 0x01
     7c0:	82 2b       	or	r24, r18
     7c2:	f8 01       	movw	r30, r16
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	98 2f       	mov	r25, r24
     7ce:	88 27       	eor	r24, r24
     7d0:	2b 81       	ldd	r18, Y+3	; 0x03
     7d2:	82 2b       	or	r24, r18
     7d4:	93 83       	std	Z+3, r25	; 0x03
     7d6:	82 83       	std	Z+2, r24	; 0x02
     7d8:	8e 81       	ldd	r24, Y+6	; 0x06
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	98 2f       	mov	r25, r24
     7de:	88 27       	eor	r24, r24
     7e0:	2d 81       	ldd	r18, Y+5	; 0x05
     7e2:	82 2b       	or	r24, r18
     7e4:	95 83       	std	Z+5, r25	; 0x05
     7e6:	84 83       	std	Z+4, r24	; 0x04
     7e8:	26 96       	adiw	r28, 0x06	; 6
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <BNO055_SelfTest>:
*Function to Test the sensors see if they fail in hardware or not
*return EN_FAIL_t of the failed sensor (see BNO055.h for definition)
*		return 
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
     7fe:	66 e3       	ldi	r22, 0x36	; 54
     800:	88 e2       	ldi	r24, 0x28	; 40
     802:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <BNO055_ReadByte>
	if(!(selftest & 0x01)) {
     806:	80 ff       	sbrs	r24, 0
     808:	08 c0       	rjmp	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>

		return ACCELOMETER_FAIL;                /*acc fails*/
	}
	if(!(selftest & 0x02)) {
     80a:	81 ff       	sbrs	r24, 1
     80c:	08 c0       	rjmp	.+16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
	}
	if(!(selftest & 0x04)) {
     80e:	82 ff       	sbrs	r24, 2
     810:	08 c0       	rjmp	.+16     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
	}
	if(!(selftest & 0x08)) {
     812:	83 fd       	sbrc	r24, 3
     814:	08 c0       	rjmp	.+16     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		return SYSTEM_FAIL;              /*system fails*/
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	08 95       	ret
*/
EN_FAIL_t BNO055_SelfTest(){
	u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);	
	if(!(selftest & 0x01)) {

		return ACCELOMETER_FAIL;                /*acc fails*/
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	08 95       	ret
	}
	if(!(selftest & 0x02)) {
		return MAGNETOMETER_FAIL;               /*magnetometer fails*/
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	08 95       	ret
	}
	if(!(selftest & 0x04)) {
		return GYROSCOPE_FAIL;              /*gyroscope fails*/
     822:	87 e0       	ldi	r24, 0x07	; 7
     824:	08 95       	ret
	}
	if(!(selftest & 0x08)) {
		return SYSTEM_FAIL;              /*system fails*/
	}

	return BNO055_SUCCESS;
     826:	89 e0       	ldi	r24, 0x09	; 9
}
     828:	08 95       	ret

0000082a <BNO055_Init>:
*to speed up calibration process you can use GetOffsets and Get Radius functions and SetCalibProfile
*Functions to store calibrated offsets after every boot 
*
*/
EN_FAIL_t BNO055_Init()
{	
     82a:	cf 93       	push	r28
	I2C_Init(OPERATION_FREQ,100000);					/*initialize i2c with frequency 100Khz*/
     82c:	40 ea       	ldi	r20, 0xA0	; 160
     82e:	56 e8       	ldi	r21, 0x86	; 134
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	84 e0       	ldi	r24, 0x04	; 4
     836:	0e 94 d2 05 	call	0xba4	; 0xba4 <I2C_Init>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, CONFIGMODE );
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	6d e3       	ldi	r22, 0x3D	; 61
     83e:	88 e2       	ldi	r24, 0x28	; 40
     840:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Select page 1 to configure sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_1);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	67 e0       	ldi	r22, 0x07	; 7
     848:	88 e2       	ldi	r24, 0x28	; 40
     84a:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Configure ACC
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_ACC_CONFIG, ACC_CONFIGS );
     84e:	48 e0       	ldi	r20, 0x08	; 8
     850:	68 e0       	ldi	r22, 0x08	; 8
     852:	88 e2       	ldi	r24, 0x28	; 40
     854:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Configure GYR
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_0, GYRO_BW_RANGE );
     858:	43 e2       	ldi	r20, 0x23	; 35
     85a:	6a e0       	ldi	r22, 0x0A	; 10
     85c:	88 e2       	ldi	r24, 0x28	; 40
     85e:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_GYRO_CONFIG_1, GYRO_POWER_MODE);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	6b e0       	ldi	r22, 0x0B	; 11
     866:	88 e2       	ldi	r24, 0x28	; 40
     868:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Configure MAG
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_MAG_CONFIG, MAG_CONFIGS );
     86c:	4b e0       	ldi	r20, 0x0B	; 11
     86e:	69 e0       	ldi	r22, 0x09	; 9
     870:	88 e2       	ldi	r24, 0x28	; 40
     872:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Select page 0 to read sensors
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_0);
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	67 e0       	ldi	r22, 0x07	; 7
     87a:	88 e2       	ldi	r24, 0x28	; 40
     87c:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Select BNO055 gyro temperature source
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_TEMP_SOURCE, 0x01 );
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	60 e4       	ldi	r22, 0x40	; 64
     884:	88 e2       	ldi	r24, 0x28	; 40
     886:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Select BNO055 sensor units (temperature in degrees C, rate in dps, accel in mg)
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_UNIT_SEL, SYS_UNITS );
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	6b e3       	ldi	r22, 0x3B	; 59
     88e:	88 e2       	ldi	r24, 0x28	; 40
     890:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Select BNO055 system power mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PWR_MODE, PWR_MODE );
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	6e e3       	ldi	r22, 0x3E	; 62
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	// Select BNO055 system operation mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, OP_MODE  );
     89e:	4c e0       	ldi	r20, 0x0C	; 12
     8a0:	6d e3       	ldi	r22, 0x3D	; 61
     8a2:	88 e2       	ldi	r24, 0x28	; 40
     8a4:	0e 94 57 03 	call	0x6ae	; 0x6ae <BNO055_WriteByte>
	
	if (BNO055_SelfTest() != BNO055_SUCCESS){							/*if self test didn't pass on all sensors*/
     8a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <BNO055_SelfTest>
     8ac:	c8 2f       	mov	r28, r24
     8ae:	89 30       	cpi	r24, 0x09	; 9
     8b0:	21 f0       	breq	.+8      	; 0x8ba <__stack+0x5b>
		return BNO055_SelfTest();
     8b2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <BNO055_SelfTest>
     8b6:	c8 2f       	mov	r28, r24
     8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <__stack+0x79>
	}
	while (1){
		if (BNO055_GetCalibStat(SYSTEM) > LOW_CALIBRATED && BNO055_GetCalibStat(GYROSCOPE) > LOW_CALIBRATED){
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 a9 03 	call	0x752	; 0x752 <BNO055_GetCalibStat>
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	d8 f3       	brcs	.-10     	; 0x8ba <__stack+0x5b>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	0e 94 a9 03 	call	0x752	; 0x752 <BNO055_GetCalibStat>
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	b0 f3       	brcs	.-20     	; 0x8ba <__stack+0x5b>
			if(BNO055_GetCalibStat(MAGNETOMETER) > LOW_CALIBRATED )
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	0e 94 a9 03 	call	0x752	; 0x752 <BNO055_GetCalibStat>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	88 f3       	brcs	.-30     	; 0x8ba <__stack+0x5b>
				break;
		}
	}
	return BNO055_SUCCESS;
}
     8d8:	8c 2f       	mov	r24, r28
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <Delay_ms_independent>:
		time_us--;
	}
}

void Delay_ms_independent(u16_t time_ms)
{
     8de:	8f 92       	push	r8
     8e0:	9f 92       	push	r9
     8e2:	af 92       	push	r10
     8e4:	bf 92       	push	r11
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
	u32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
     8f0:	9c 01       	movw	r18, r24
     8f2:	a8 ee       	ldi	r26, 0xE8	; 232
     8f4:	b3 e0       	ldi	r27, 0x03	; 3
     8f6:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__umulhisi3>
     8fa:	2b ea       	ldi	r18, 0xAB	; 171
     8fc:	3a ea       	ldi	r19, 0xAA	; 170
     8fe:	4a ea       	ldi	r20, 0xAA	; 170
     900:	5a ea       	ldi	r21, 0xAA	; 170
     902:	0e 94 08 0c 	call	0x1810	; 0x1810 <__umulsidi3>
     906:	00 e2       	ldi	r16, 0x20	; 32
     908:	0e 94 35 0c 	call	0x186a	; 0x186a <__lshrdi3>
     90c:	82 2e       	mov	r8, r18
     90e:	93 2e       	mov	r9, r19
     910:	a4 2e       	mov	r10, r20
     912:	b5 2e       	mov	r11, r21
     914:	b6 94       	lsr	r11
     916:	a7 94       	ror	r10
     918:	97 94       	ror	r9
     91a:	87 94       	ror	r8
	while (num_of_ticks)
     91c:	05 c0       	rjmp	.+10     	; 0x928 <Delay_ms_independent+0x4a>
	{
		num_of_ticks--;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	88 1a       	sub	r8, r24
     922:	91 08       	sbc	r9, r1
     924:	a1 08       	sbc	r10, r1
     926:	b1 08       	sbc	r11, r1

void Delay_ms_independent(u16_t time_ms)
{
	u32_t num_of_ticks = time_ms;
	num_of_ticks = num_of_ticks*1000/3;
	while (num_of_ticks)
     928:	81 14       	cp	r8, r1
     92a:	91 04       	cpc	r9, r1
     92c:	a1 04       	cpc	r10, r1
     92e:	b1 04       	cpc	r11, r1
     930:	b1 f7       	brne	.-20     	; 0x91e <Delay_ms_independent+0x40>
	{
		num_of_ticks--;
	}
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	08 95       	ret

00000946 <LED_Init>:
#include "LED_interface.h"


void LED_Init(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPinDir(copy_u8Port ,copy_u8Pin, OUT );	
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_setPinDir>
     94c:	08 95       	ret

0000094e <LED_TurnOn>:
}


void LED_TurnOn(u8_t copy_u8Port , u8_t copy_u8Pin)
{
	DIO_setPin( copy_u8Port , copy_u8Pin);
     94e:	0e 94 ab 05 	call	0xb56	; 0xb56 <DIO_setPin>
     952:	08 95       	ret

00000954 <LED_TurnOff>:
}


void LED_TurnOff(u8_t copy_u8Port , u8_t copy_u8Pin)
{
     DIO_clearPin(copy_u8Port , copy_u8Pin);
     954:	0e 94 b8 05 	call	0xb70	; 0xb70 <DIO_clearPin>
     958:	08 95       	ret

0000095a <advanceCircleByFixedAngle>:
void advanceCircleByFixedAngle(void)
{
	char    d;

	#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
	reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
     95a:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <__data_end>
     95e:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <__data_end+0x1>
     962:	14 16       	cp	r1, r20
     964:	15 06       	cpc	r1, r21
     966:	1c f4       	brge	.+6      	; 0x96e <advanceCircleByFixedAngle+0x14>
     968:	20 e2       	ldi	r18, 0x20	; 32
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	02 c0       	rjmp	.+4      	; 0x972 <advanceCircleByFixedAngle+0x18>
     96e:	20 ee       	ldi	r18, 0xE0	; 224
     970:	3f ef       	ldi	r19, 0xFF	; 255
     972:	24 0f       	add	r18, r20
     974:	35 1f       	adc	r19, r21
     976:	02 2e       	mov	r0, r18
     978:	23 2f       	mov	r18, r19
     97a:	00 0c       	add	r0, r0
     97c:	22 1f       	adc	r18, r18
     97e:	33 0b       	sbc	r19, r19
     980:	00 0c       	add	r0, r0
     982:	22 1f       	adc	r18, r18
     984:	33 1f       	adc	r19, r19
     986:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <reportBuffer+0x1>
	sinus += d;
     98a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sinus>
     98e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <sinus+0x1>
     992:	82 0f       	add	r24, r18
     994:	91 1d       	adc	r25, r1
     996:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <sinus+0x1>
     99a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <sinus>
	reportBuffer.dy = d = DIVIDE_BY_64(sinus);
     99e:	18 16       	cp	r1, r24
     9a0:	19 06       	cpc	r1, r25
     9a2:	1c f4       	brge	.+6      	; 0x9aa <advanceCircleByFixedAngle+0x50>
     9a4:	20 e2       	ldi	r18, 0x20	; 32
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <advanceCircleByFixedAngle+0x54>
     9aa:	20 ee       	ldi	r18, 0xE0	; 224
     9ac:	3f ef       	ldi	r19, 0xFF	; 255
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	08 2e       	mov	r0, r24
     9b4:	89 2f       	mov	r24, r25
     9b6:	00 0c       	add	r0, r0
     9b8:	88 1f       	adc	r24, r24
     9ba:	99 0b       	sbc	r25, r25
     9bc:	00 0c       	add	r0, r0
     9be:	88 1f       	adc	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <reportBuffer+0x2>
	cosinus -= d;
     9c6:	48 1b       	sub	r20, r24
     9c8:	51 09       	sbc	r21, r1
     9ca:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x1>
     9ce:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end>
     9d2:	08 95       	ret

000009d4 <usbFunctionSetup>:
}

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     9d4:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     9d6:	90 81       	ld	r25, Z
     9d8:	90 76       	andi	r25, 0x60	; 96
     9da:	90 32       	cpi	r25, 0x20	; 32
     9dc:	e1 f4       	brne	.+56     	; 0xa16 <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     9de:	81 81       	ldd	r24, Z+1	; 0x01
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	41 f4       	brne	.+16     	; 0x9f4 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
     9e4:	88 e7       	ldi	r24, 0x78	; 120
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     9ec:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
            return sizeof(reportBuffer);
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	41 f4       	brne	.+16     	; 0xa08 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
     9f8:	87 e7       	ldi	r24, 0x77	; 119
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     a00:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
            return 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     a08:	8a 30       	cpi	r24, 0x0A	; 10
     a0a:	39 f4       	brne	.+14     	; 0xa1a <usbFunctionSetup+0x46>
            idleRate = rq->wValue.bytes[1];
     a0c:	83 81       	ldd	r24, Z+3	; 0x03
     a0e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	08 95       	ret
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
     a1a:	80 e0       	ldi	r24, 0x00	; 0
}
     a1c:	08 95       	ret

00000a1e <Mouse_init>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     a1e:	9e e0       	ldi	r25, 0x0E	; 14
     a20:	88 e1       	ldi	r24, 0x18	; 24
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	a8 95       	wdr
     a28:	81 bd       	out	0x21, r24	; 33
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	91 bd       	out	0x21, r25	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
     a2e:	0e 94 16 08 	call	0x102c	; 0x102c <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
     a32:	81 b3       	in	r24, 0x11	; 17
     a34:	80 61       	ori	r24, 0x10	; 16
     a36:	81 bb       	out	0x11, r24	; 17
	
	 i = 0;
     a38:	80 e0       	ldi	r24, 0x00	; 0
	 while(--i){             /* fake USB disconnect for > 250 ms */
     a3a:	07 c0       	rjmp	.+14     	; 0xa4a <Mouse_init+0x2c>
	   wdt_reset();
     a3c:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3e:	e7 eb       	ldi	r30, 0xB7	; 183
     a40:	fb e0       	ldi	r31, 0x0B	; 11
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <Mouse_init+0x24>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <Mouse_init+0x2a>
     a48:	00 00       	nop
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
	
	 i = 0;
	 while(--i){             /* fake USB disconnect for > 250 ms */
     a4a:	81 50       	subi	r24, 0x01	; 1
     a4c:	b9 f7       	brne	.-18     	; 0xa3c <Mouse_init+0x1e>
	   wdt_reset();
	  _delay_ms(1);
	  }
	 usbDeviceConnect();
     a4e:	81 b3       	in	r24, 0x11	; 17
     a50:	8f 7e       	andi	r24, 0xEF	; 239
     a52:	81 bb       	out	0x11, r24	; 17
	 sei();
     a54:	78 94       	sei
     a56:	08 95       	ret

00000a58 <Mouse_MoveLeft>:
	 DBG1(0x01, 0, 0);       /* debug output: main loop starts */
	
}
void Mouse_MoveLeft(void) {
	reportBuffer.dx = -1 ;
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <reportBuffer+0x1>
     a5e:	08 95       	ret

00000a60 <Mouse_MoveRight>:
}
void Mouse_MoveRight(void) {
	reportBuffer.dx = 1 ; 
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <reportBuffer+0x1>
     a66:	08 95       	ret

00000a68 <Mouse_MoveUp>:
}
void Mouse_MoveUp(void) {
	reportBuffer.dy = -1 ; 
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <reportBuffer+0x2>
     a6e:	08 95       	ret

00000a70 <Mouse_MoveDown>:
}
void Mouse_MoveDown(void) {
	reportBuffer.dy = 1 ;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <reportBuffer+0x2>
     a76:	08 95       	ret

00000a78 <Mouse_RightClick>:
}
void Mouse_RightClick(void) {
	reportBuffer.buttonMask = 1 ; 
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <reportBuffer>
     a7e:	08 95       	ret

00000a80 <Mouse_LeftClick>:
}
void Mouse_LeftClick(void) {
	reportBuffer.buttonMask = 2 ;
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <reportBuffer>
     a86:	08 95       	ret

00000a88 <Touch_Init>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*EX :	 ST_TouchConfig_t TouchConfig = {PORTA,PIN0};
		 Touch_Init(TouchConfig);
**/
void Touch_Init(ST_TouchConfig_t config){
	DIO_setPinDir(config.TOUCH_PORT,config.TOUCH_PIN,IN);
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	69 2f       	mov	r22, r25
     a8c:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_setPinDir>
     a90:	08 95       	ret

00000a92 <Touch_Read>:
*inputs: ST_TouchConfig_t configuaration struct in touch.h
*Return 1 if pressed , 0 otherwise
*
*/
u8_t Touch_Read(ST_TouchConfig_t config){
	return DIO_getPin(config.TOUCH_PORT,config.TOUCH_PIN);
     a92:	69 2f       	mov	r22, r25
     a94:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_getPin>
     a98:	08 95       	ret

00000a9a <main>:

int main()
{
	u8_t key = OPENED;
	/* Init application */
	App_Init();
     a9a:	0e 94 22 02 	call	0x444	; 0x444 <App_Init>
#define OPENED  1
#define CLOSED  0

int main()
{
	u8_t key = OPENED;
     a9e:	c1 e0       	ldi	r28, 0x01	; 1
	
	while(1)
	{
		// Ensure usb is always up
		DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
		wdt_reset();
     aa0:	a8 95       	wdr
		usbPoll();
     aa2:	0e 94 1a 07 	call	0xe34	; 0xe34 <usbPoll>
		if(usbInterruptIsReady())
     aa6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <usbTxStatus1>
     aaa:	84 ff       	sbrs	r24, 4
     aac:	07 c0       	rjmp	.+14     	; 0xabc <main+0x22>
		{
		/* called after every poll of the interrupt endpoint */
	    advanceCircleByFixedAngle();
     aae:	0e 94 ad 04 	call	0x95a	; 0x95a <advanceCircleByFixedAngle>
	    DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
	    usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
     ab2:	64 e0       	ldi	r22, 0x04	; 4
     ab4:	88 e7       	ldi	r24, 0x78	; 120
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 15 07 	call	0xe2a	; 0xe2a <usbSetInterrupt>
		}
		//------------------------------------------
		// START LOGIC
		/* Check touch sensor state */
		u8_t state = App_GetTouchSensorState();
     abc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <App_GetTouchSensorState>
		
		if(state == CONTACT)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	71 f7       	brne	.-36     	; 0xaa0 <main+0x6>
		{
			// enter this block once to get the reference point
			if(key == OPENED)
     ac4:	c1 30       	cpi	r28, 0x01	; 1
     ac6:	19 f4       	brne	.+6      	; 0xace <main+0x34>
			{
				// Get reference point from imu
				App_GetImuCalibPoint();
     ac8:	0e 94 75 02 	call	0x4ea	; 0x4ea <App_GetImuCalibPoint>
				key = CLOSED;
     acc:	c0 e0       	ldi	r28, 0x00	; 0
			
			}
			
			// Get current gradient of imu (required mouse motion direction)
			u8_t motion_direction = App_GetImuGradient();
     ace:	0e 94 a0 02 	call	0x540	; 0x540 <App_GetImuGradient>
			// move mouse
			App_OrderMouse(motion_direction);
     ad2:	0e 94 39 02 	call	0x472	; 0x472 <App_OrderMouse>
     ad6:	e4 cf       	rjmp	.-56     	; 0xaa0 <main+0x6>

00000ad8 <DIO_setPinDir>:
* this example set the first 4 bits to 0xF HIGH and the last 4 bits to 0x0 LOW
* void return.
*/
void DIO_writePort(EN_PORTS_t port,u8_t bin_pins)
{
	REG(port)=bin_pins;
     ad8:	41 30       	cpi	r20, 0x01	; 1
     ada:	69 f4       	brne	.+26     	; 0xaf6 <DIO_setPinDir+0x1e>
     adc:	e8 2f       	mov	r30, r24
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	22 91       	ld	r18, -Z
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <DIO_setPinDir+0x14>
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	6a 95       	dec	r22
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <DIO_setPinDir+0x10>
     af0:	82 2b       	or	r24, r18
     af2:	80 83       	st	Z, r24
     af4:	08 95       	ret
     af6:	41 11       	cpse	r20, r1
     af8:	16 c0       	rjmp	.+44     	; 0xb26 <DIO_setPinDir+0x4e>
     afa:	e8 2f       	mov	r30, r24
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	df 01       	movw	r26, r30
     b00:	2e 91       	ld	r18, -X
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_setPinDir+0x34>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	6a 95       	dec	r22
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_setPinDir+0x30>
     b10:	98 2f       	mov	r25, r24
     b12:	90 95       	com	r25
     b14:	92 23       	and	r25, r18
     b16:	9c 93       	st	X, r25
     b18:	90 b7       	in	r25, 0x30	; 48
     b1a:	94 60       	ori	r25, 0x04	; 4
     b1c:	90 bf       	out	0x30, r25	; 48
     b1e:	90 81       	ld	r25, Z
     b20:	89 2b       	or	r24, r25
     b22:	80 83       	st	Z, r24
     b24:	08 95       	ret
     b26:	42 30       	cpi	r20, 0x02	; 2
     b28:	a9 f4       	brne	.+42     	; 0xb54 <DIO_setPinDir+0x7c>
     b2a:	e8 2f       	mov	r30, r24
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	df 01       	movw	r26, r30
     b30:	2e 91       	ld	r18, -X
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <DIO_setPinDir+0x64>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	6a 95       	dec	r22
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <DIO_setPinDir+0x60>
     b40:	98 2f       	mov	r25, r24
     b42:	90 95       	com	r25
     b44:	92 23       	and	r25, r18
     b46:	9c 93       	st	X, r25
     b48:	90 b7       	in	r25, 0x30	; 48
     b4a:	9b 7f       	andi	r25, 0xFB	; 251
     b4c:	90 bf       	out	0x30, r25	; 48
     b4e:	90 81       	ld	r25, Z
     b50:	89 2b       	or	r24, r25
     b52:	80 83       	st	Z, r24
     b54:	08 95       	ret

00000b56 <DIO_setPin>:
     b56:	e8 2f       	mov	r30, r24
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_setPin+0x10>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	6a 95       	dec	r22
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_setPin+0xc>
     b6a:	28 2b       	or	r18, r24
     b6c:	20 83       	st	Z, r18
     b6e:	08 95       	ret

00000b70 <DIO_clearPin>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
     b70:	e8 2f       	mov	r30, r24
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_clearPin+0x10>
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	6a 95       	dec	r22
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_clearPin+0xc>
     b84:	20 95       	com	r18
     b86:	28 23       	and	r18, r24
     b88:	20 83       	st	Z, r18
     b8a:	08 95       	ret

00000b8c <DIO_getPin>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return u8_t that holds the input value
*/	
u8_t DIO_getPin(EN_PORTS_t port,EN_PINS_t pin)
{
	return GETBIT(REG(port-0x02),(u8_t)pin);
     b8c:	e8 2f       	mov	r30, r24
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	32 97       	sbiw	r30, 0x02	; 2
     b92:	80 81       	ld	r24, Z
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_getPin+0x10>
     b98:	95 95       	asr	r25
     b9a:	87 95       	ror	r24
     b9c:	6a 95       	dec	r22
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_getPin+0xc>
}
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	08 95       	ret

00000ba4 <I2C_Init>:
			I2C_Stop();
			continue;
		}
		break;						
	}
}
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	cf 93       	push	r28
     bb6:	9a 01       	movw	r18, r20
     bb8:	ab 01       	movw	r20, r22
     bba:	68 2f       	mov	r22, r24
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__divmodsi4>
     bc6:	69 01       	movw	r12, r18
     bc8:	7a 01       	movw	r14, r20
     bca:	80 e1       	ldi	r24, 0x10	; 16
     bcc:	c8 1a       	sub	r12, r24
     bce:	d1 08       	sbc	r13, r1
     bd0:	e1 08       	sbc	r14, r1
     bd2:	f1 08       	sbc	r15, r1
     bd4:	c7 01       	movw	r24, r14
     bd6:	b6 01       	movw	r22, r12
     bd8:	2e ef       	ldi	r18, 0xFE	; 254
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__divmodsi4>
     be4:	ca 01       	movw	r24, r20
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatsisf>
     bec:	28 e1       	ldi	r18, 0x18	; 24
     bee:	32 e7       	ldi	r19, 0x72	; 114
     bf0:	41 eb       	ldi	r20, 0xB1	; 177
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__mulsf3>
     bf8:	4b 01       	movw	r8, r22
     bfa:	5c 01       	movw	r10, r24
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	a9 01       	movw	r20, r18
     c02:	0e 94 90 08 	call	0x1120	; 0x1120 <__cmpsf2>
     c06:	88 23       	and	r24, r24
     c08:	d4 f1       	brlt	.+116    	; 0xc7e <I2C_Init+0xda>
     c0a:	c0 e0       	ldi	r28, 0x00	; 0
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <I2C_Init+0x8e>
     c0e:	6c 2f       	mov	r22, r28
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 36 09 	call	0x126c	; 0x126c <__floatunsisf>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	c5 01       	movw	r24, r10
     c20:	b4 01       	movw	r22, r8
     c22:	0e 94 90 08 	call	0x1120	; 0x1120 <__cmpsf2>
     c26:	18 16       	cp	r1, r24
     c28:	1c f0       	brlt	.+6      	; 0xc30 <I2C_Init+0x8c>
     c2a:	c1 b9       	out	0x01, r28	; 1
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <I2C_Init+0x94>
     c30:	cf 5f       	subi	r28, 0xFF	; 255
     c32:	c5 30       	cpi	r28, 0x05	; 5
     c34:	60 f3       	brcs	.-40     	; 0xc0e <I2C_Init+0x6a>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	19 f5       	brne	.+70     	; 0xc82 <I2C_Init+0xde>
     c3c:	6c 2f       	mov	r22, r28
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 36 09 	call	0x126c	; 0x126c <__floatunsisf>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e8       	ldi	r24, 0x80	; 128
     c52:	90 e4       	ldi	r25, 0x40	; 64
     c54:	0e 94 55 0a 	call	0x14aa	; 0x14aa <pow>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	0e 94 24 08 	call	0x1048	; 0x1048 <__addsf3>
     c60:	4b 01       	movw	r8, r22
     c62:	5c 01       	movw	r10, r24
     c64:	c7 01       	movw	r24, r14
     c66:	b6 01       	movw	r22, r12
     c68:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatsisf>
     c6c:	a5 01       	movw	r20, r10
     c6e:	94 01       	movw	r18, r8
     c70:	0e 94 95 08 	call	0x112a	; 0x112a <__divsf3>
     c74:	0e 94 07 09 	call	0x120e	; 0x120e <__fixunssfsi>
     c78:	60 b9       	out	0x00, r22	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <I2C_Init+0xe0>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <I2C_Init+0xe0>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	cf 91       	pop	r28
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	bf 90       	pop	r11
     c90:	af 90       	pop	r10
     c92:	9f 90       	pop	r9
     c94:	8f 90       	pop	r8
     c96:	08 95       	ret

00000c98 <I2C_Master_Start>:
     c98:	96 b7       	in	r25, 0x36	; 54
     c9a:	90 62       	ori	r25, 0x20	; 32
     c9c:	96 bf       	out	0x36, r25	; 54
     c9e:	96 b7       	in	r25, 0x36	; 54
     ca0:	94 60       	ori	r25, 0x04	; 4
     ca2:	96 bf       	out	0x36, r25	; 54
     ca4:	96 b7       	in	r25, 0x36	; 54
     ca6:	90 68       	ori	r25, 0x80	; 128
     ca8:	96 bf       	out	0x36, r25	; 54
     caa:	06 b6       	in	r0, 0x36	; 54
     cac:	07 fe       	sbrs	r0, 7
     cae:	fd cf       	rjmp	.-6      	; 0xcaa <I2C_Master_Start+0x12>
     cb0:	91 b1       	in	r25, 0x01	; 1
     cb2:	98 7f       	andi	r25, 0xF8	; 248
     cb4:	98 30       	cpi	r25, 0x08	; 8
     cb6:	91 f4       	brne	.+36     	; 0xcdc <I2C_Master_Start+0x44>
     cb8:	83 b9       	out	0x03, r24	; 3
     cba:	86 b7       	in	r24, 0x36	; 54
     cbc:	84 60       	ori	r24, 0x04	; 4
     cbe:	86 bf       	out	0x36, r24	; 54
     cc0:	86 b7       	in	r24, 0x36	; 54
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	86 bf       	out	0x36, r24	; 54
     cc6:	06 b6       	in	r0, 0x36	; 54
     cc8:	07 fe       	sbrs	r0, 7
     cca:	fd cf       	rjmp	.-6      	; 0xcc6 <I2C_Master_Start+0x2e>
     ccc:	81 b1       	in	r24, 0x01	; 1
     cce:	88 7f       	andi	r24, 0xF8	; 248
     cd0:	88 31       	cpi	r24, 0x18	; 24
     cd2:	31 f0       	breq	.+12     	; 0xce0 <I2C_Master_Start+0x48>
     cd4:	80 32       	cpi	r24, 0x20	; 32
     cd6:	31 f4       	brne	.+12     	; 0xce4 <I2C_Master_Start+0x4c>
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	08 95       	ret
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	08 95       	ret
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	08 95       	ret
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	08 95       	ret

00000ce8 <I2C_Master_Write>:
     ce8:	83 b9       	out	0x03, r24	; 3
     cea:	86 b7       	in	r24, 0x36	; 54
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	86 bf       	out	0x36, r24	; 54
     cf0:	86 b7       	in	r24, 0x36	; 54
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	86 bf       	out	0x36, r24	; 54
     cf6:	06 b6       	in	r0, 0x36	; 54
     cf8:	07 fe       	sbrs	r0, 7
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <I2C_Master_Write+0xe>
     cfc:	81 b1       	in	r24, 0x01	; 1
     cfe:	88 7f       	andi	r24, 0xF8	; 248
     d00:	88 32       	cpi	r24, 0x28	; 40
     d02:	21 f0       	breq	.+8      	; 0xd0c <I2C_Master_Write+0x24>
     d04:	80 33       	cpi	r24, 0x30	; 48
     d06:	21 f4       	brne	.+8      	; 0xd10 <I2C_Master_Write+0x28>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	08 95       	ret

00000d14 <I2C_Repeated_Start>:
     d14:	96 b7       	in	r25, 0x36	; 54
     d16:	94 60       	ori	r25, 0x04	; 4
     d18:	96 bf       	out	0x36, r25	; 54
     d1a:	96 b7       	in	r25, 0x36	; 54
     d1c:	90 68       	ori	r25, 0x80	; 128
     d1e:	96 bf       	out	0x36, r25	; 54
     d20:	96 b7       	in	r25, 0x36	; 54
     d22:	90 62       	ori	r25, 0x20	; 32
     d24:	96 bf       	out	0x36, r25	; 54
     d26:	06 b6       	in	r0, 0x36	; 54
     d28:	07 fe       	sbrs	r0, 7
     d2a:	fd cf       	rjmp	.-6      	; 0xd26 <I2C_Repeated_Start+0x12>
     d2c:	91 b1       	in	r25, 0x01	; 1
     d2e:	98 7f       	andi	r25, 0xF8	; 248
     d30:	90 31       	cpi	r25, 0x10	; 16
     d32:	91 f4       	brne	.+36     	; 0xd58 <I2C_Repeated_Start+0x44>
     d34:	83 b9       	out	0x03, r24	; 3
     d36:	86 b7       	in	r24, 0x36	; 54
     d38:	84 60       	ori	r24, 0x04	; 4
     d3a:	86 bf       	out	0x36, r24	; 54
     d3c:	86 b7       	in	r24, 0x36	; 54
     d3e:	80 68       	ori	r24, 0x80	; 128
     d40:	86 bf       	out	0x36, r24	; 54
     d42:	06 b6       	in	r0, 0x36	; 54
     d44:	07 fe       	sbrs	r0, 7
     d46:	fd cf       	rjmp	.-6      	; 0xd42 <I2C_Repeated_Start+0x2e>
     d48:	81 b1       	in	r24, 0x01	; 1
     d4a:	88 7f       	andi	r24, 0xF8	; 248
     d4c:	80 34       	cpi	r24, 0x40	; 64
     d4e:	31 f0       	breq	.+12     	; 0xd5c <I2C_Repeated_Start+0x48>
     d50:	88 34       	cpi	r24, 0x48	; 72
     d52:	31 f4       	brne	.+12     	; 0xd60 <I2C_Repeated_Start+0x4c>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	08 95       	ret
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	08 95       	ret
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	08 95       	ret

00000d64 <I2C_Read_Ack>:
	SETBIT(I2C_CONTROL_REG,TWSTO);
	while(GETBIT(I2C_CONTROL_REG,TWSTO));								
}
s8_t I2C_Read_Ack()											
{
	ENABLE_I2C;
     d64:	86 b7       	in	r24, 0x36	; 54
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     d6a:	86 b7       	in	r24, 0x36	; 54
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	86 bf       	out	0x36, r24	; 54
	GENERATE_ACK;
     d70:	86 b7       	in	r24, 0x36	; 54
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	86 bf       	out	0x36, r24	; 54
		
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     d76:	06 b6       	in	r0, 0x36	; 54
     d78:	07 fe       	sbrs	r0, 7
     d7a:	fd cf       	rjmp	.-6      	; 0xd76 <I2C_Read_Ack+0x12>
	return TWDR_REG;											
     d7c:	83 b1       	in	r24, 0x03	; 3
}
     d7e:	08 95       	ret

00000d80 <I2C_Read_Nack>:

s8_t I2C_Read_Nack()										
{
	ENABLE_I2C;
     d80:	86 b7       	in	r24, 0x36	; 54
     d82:	84 60       	ori	r24, 0x04	; 4
     d84:	86 bf       	out	0x36, r24	; 54
	CLEAR_IF;
     d86:	86 b7       	in	r24, 0x36	; 54
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	86 bf       	out	0x36, r24	; 54
	
	while (!GETBIT(I2C_CONTROL_REG,I2C_IF));							
     d8c:	06 b6       	in	r0, 0x36	; 54
     d8e:	07 fe       	sbrs	r0, 7
     d90:	fd cf       	rjmp	.-6      	; 0xd8c <I2C_Read_Nack+0xc>
	return TWDR_REG;											
     d92:	83 b1       	in	r24, 0x03	; 3
}
     d94:	08 95       	ret

00000d96 <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     d96:	dc 01       	movw	r26, r24
     d98:	86 2f       	mov	r24, r22
    if(len > 0){    /* don't bother app with 0 sized reads */
     d9a:	66 23       	and	r22, r22
     d9c:	e1 f0       	breq	.+56     	; 0xdd6 <usbDeviceRead+0x40>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     d9e:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <usbMsgPtr>
     da2:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     da6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <usbMsgFlags>
     daa:	96 ff       	sbrs	r25, 6
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <usbDeviceRead+0x2a>
     dae:	96 2f       	mov	r25, r22
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     db0:	24 91       	lpm	r18, Z
                    *data++ = c;
     db2:	2c 93       	st	X, r18
                    r++;
     db4:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     db6:	91 50       	subi	r25, 0x01	; 1
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
                    *data++ = c;
     db8:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     dba:	91 11       	cpse	r25, r1
     dbc:	f9 cf       	rjmp	.-14     	; 0xdb0 <usbDeviceRead+0x1a>
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <usbDeviceRead+0x38>
     dc0:	96 2f       	mov	r25, r22
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     dc2:	21 91       	ld	r18, Z+
     dc4:	2c 93       	st	X, r18
                    r++;
                }while(--i);
     dc6:	91 50       	subi	r25, 0x01	; 1
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     dc8:	11 96       	adiw	r26, 0x01	; 1
                    r++;
                }while(--i);
     dca:	91 11       	cpse	r25, r1
     dcc:	fa cf       	rjmp	.-12     	; 0xdc2 <usbDeviceRead+0x2c>
            }
            usbMsgPtr = r;
     dce:	f0 93 97 00 	sts	0x0097, r31	; 0x800097 <usbMsgPtr+0x1>
     dd2:	e0 93 96 00 	sts	0x0096, r30	; 0x800096 <usbMsgPtr>
        }
    }
    return len;
}
     dd6:	08 95       	ret

00000dd8 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	dc 01       	movw	r26, r24
     de0:	c6 2f       	mov	r28, r22
     de2:	8a 01       	movw	r16, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     de4:	fa 01       	movw	r30, r20
     de6:	80 81       	ld	r24, Z
     de8:	84 ff       	sbrs	r24, 4
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <usbGenericSetInterrupt+0x1e>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	88 e8       	ldi	r24, 0x88	; 136
     df0:	89 27       	eor	r24, r25
     df2:	81 83       	std	Z+1, r24	; 0x01
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <usbGenericSetInterrupt+0x24>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     df6:	8a e5       	ldi	r24, 0x5A	; 90
     df8:	fa 01       	movw	r30, r20
     dfa:	80 83       	st	Z, r24
    }
    p = txStatus->buffer + 1;
     dfc:	a8 01       	movw	r20, r16
     dfe:	4e 5f       	subi	r20, 0xFE	; 254
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
    i = len;
     e02:	9c 2f       	mov	r25, r28
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
     e04:	fa 01       	movw	r30, r20
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     e06:	2c 91       	ld	r18, X
     e08:	20 83       	st	Z, r18
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     e0a:	91 50       	subi	r25, 0x01	; 1
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	31 96       	adiw	r30, 0x01	; 1
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     e10:	91 11       	cpse	r25, r1
     e12:	f9 cf       	rjmp	.-14     	; 0xe06 <usbGenericSetInterrupt+0x2e>
    usbCrc16Append(&txStatus->buffer[1], len);
     e14:	6c 2f       	mov	r22, r28
     e16:	ca 01       	movw	r24, r20
     e18:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     e1c:	cc 5f       	subi	r28, 0xFC	; 252
     e1e:	f8 01       	movw	r30, r16
     e20:	c0 83       	st	Z, r28
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
     e2a:	47 e8       	ldi	r20, 0x87	; 135
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <usbGenericSetInterrupt>
     e32:	08 95       	ret

00000e34 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     e38:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <usbRxLen>
     e3c:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
     e3e:	0a f4       	brpl	.+2      	; 0xe42 <usbPoll+0xe>
     e40:	b7 c0       	rjmp	.+366    	; 0xfb0 <usbPoll+0x17c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     e42:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <usbInputBufOffset>
     e46:	2c e0       	ldi	r18, 0x0C	; 12
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	29 1b       	sub	r18, r25
     e4c:	31 09       	sbc	r19, r1
     e4e:	e9 01       	movw	r28, r18
     e50:	c4 56       	subi	r28, 0x64	; 100
     e52:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     e54:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <usbRxToken>
     e58:	9d 32       	cpi	r25, 0x2D	; 45
     e5a:	09 f0       	breq	.+2      	; 0xe5e <usbPoll+0x2a>
     e5c:	a7 c0       	rjmp	.+334    	; 0xfac <usbPoll+0x178>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	09 f0       	breq	.+2      	; 0xe64 <usbPoll+0x30>
     e62:	a4 c0       	rjmp	.+328    	; 0xfac <usbPoll+0x178>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     e64:	83 ec       	ldi	r24, 0xC3	; 195
     e66:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     e6a:	8a e5       	ldi	r24, 0x5A	; 90
     e6c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <usbTxLen>
        usbMsgFlags = 0;
     e70:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     e74:	88 81       	ld	r24, Y
     e76:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     e78:	21 f0       	breq	.+8      	; 0xe82 <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
     e7a:	ce 01       	movw	r24, r28
     e7c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <usbFunctionSetup>
     e80:	8c c0       	rjmp	.+280    	; 0xf9a <usbPoll+0x166>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     e84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     e8a:	81 11       	cpse	r24, r1
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <usbPoll+0x66>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     e8e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     e92:	25 e8       	ldi	r18, 0x85	; 133
     e94:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	7c c0       	rjmp	.+248    	; 0xf92 <usbPoll+0x15e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	31 f4       	brne	.+12     	; 0xeaa <usbPoll+0x76>
        usbNewDeviceAddr = value;
     e9e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     ea2:	25 e8       	ldi	r18, 0x85	; 133
     ea4:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	74 c0       	rjmp	.+232    	; 0xf92 <usbPoll+0x15e>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     eaa:	86 30       	cpi	r24, 0x06	; 6
     eac:	09 f0       	breq	.+2      	; 0xeb0 <usbPoll+0x7c>
     eae:	51 c0       	rjmp	.+162    	; 0xf52 <usbPoll+0x11e>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	41 f4       	brne	.+16     	; 0xec6 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     eb6:	8c e2       	ldi	r24, 0x2C	; 44
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     ebe:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     ec2:	82 e1       	ldi	r24, 0x12	; 18
     ec4:	42 c0       	rjmp	.+132    	; 0xf4a <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	41 f4       	brne	.+16     	; 0xeda <usbPoll+0xa6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     eca:	8a e0       	ldi	r24, 0x0A	; 10
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     ed2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     ed6:	82 e2       	ldi	r24, 0x22	; 34
     ed8:	38 c0       	rjmp	.+112    	; 0xf4a <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	f9 f4       	brne	.+62     	; 0xf1c <usbPoll+0xe8>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     ee0:	81 11       	cpse	r24, r1
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     ee4:	8c e5       	ldi	r24, 0x5C	; 92
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     eec:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	2b c0       	rjmp	.+86     	; 0xf4a <usbPoll+0x116>
        SWITCH_CASE(1)
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	41 f4       	brne	.+16     	; 0xf08 <usbPoll+0xd4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     ef8:	8a e4       	ldi	r24, 0x4A	; 74
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     f00:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     f04:	82 e1       	ldi	r24, 0x12	; 18
     f06:	21 c0       	rjmp	.+66     	; 0xf4a <usbPoll+0x116>
        SWITCH_CASE(2)
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	e1 f4       	brne	.+56     	; 0xf44 <usbPoll+0x110>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     f0c:	8e e3       	ldi	r24, 0x3E	; 62
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     f14:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     f18:	8c e0       	ldi	r24, 0x0C	; 12
     f1a:	17 c0       	rjmp	.+46     	; 0xf4a <usbPoll+0x116>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     f1c:	81 32       	cpi	r24, 0x21	; 33
     f1e:	41 f4       	brne	.+16     	; 0xf30 <usbPoll+0xfc>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     f20:	8c e1       	ldi	r24, 0x1C	; 28
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     f28:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     f2c:	89 e0       	ldi	r24, 0x09	; 9
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <usbPoll+0x116>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     f30:	82 32       	cpi	r24, 0x22	; 34
     f32:	51 f4       	brne	.+20     	; 0xf48 <usbPoll+0x114>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     f34:	86 ed       	ldi	r24, 0xD6	; 214
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbMsgPtr+0x1>
     f3c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <usbMsgPtr>
     f40:	84 e3       	ldi	r24, 0x34	; 52
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <usbPoll+0x116>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <usbPoll+0x116>
     f48:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     f4a:	90 e4       	ldi	r25, 0x40	; 64
     f4c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <usbMsgFlags>
     f50:	24 c0       	rjmp	.+72     	; 0xf9a <usbPoll+0x166>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     f52:	88 30       	cpi	r24, 0x08	; 8
     f54:	99 f0       	breq	.+38     	; 0xf7c <usbPoll+0x148>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     f56:	89 30       	cpi	r24, 0x09	; 9
     f58:	31 f4       	brne	.+12     	; 0xf66 <usbPoll+0x132>
        usbConfiguration = value;
     f5a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     f5e:	25 e8       	ldi	r18, 0x85	; 133
     f60:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <usbPoll+0x15e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     f66:	8a 30       	cpi	r24, 0x0A	; 10
     f68:	69 f0       	breq	.+26     	; 0xf84 <usbPoll+0x150>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     f6a:	8b 30       	cpi	r24, 0x0B	; 11
     f6c:	79 f4       	brne	.+30     	; 0xf8c <usbPoll+0x158>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     f6e:	8b e4       	ldi	r24, 0x4B	; 75
     f70:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     f74:	25 e8       	ldi	r18, 0x85	; 133
     f76:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0b c0       	rjmp	.+22     	; 0xf92 <usbPoll+0x15e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     f7c:	2b e9       	ldi	r18, 0x9B	; 155
     f7e:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     f84:	25 e8       	ldi	r18, 0x85	; 133
     f86:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     f8c:	25 e8       	ldi	r18, 0x85	; 133
     f8e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     f90:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     f92:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <usbMsgPtr+0x1>
     f96:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	91 11       	cpse	r25, r1
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <usbPoll+0x174>
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	98 17       	cp	r25, r24
     fa4:	08 f4       	brcc	.+2      	; 0xfa8 <usbPoll+0x174>
                replyLen = rq->wLength.bytes[0];
     fa6:	89 2f       	mov	r24, r25
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     fa8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     fac:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     fb0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <usbTxLen>
     fb4:	84 ff       	sbrs	r24, 4
     fb6:	2b c0       	rjmp	.+86     	; 0x100e <usbPoll+0x1da>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     fb8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <usbMsgLen>
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	39 f1       	breq	.+78     	; 0x100e <usbPoll+0x1da>
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
     fc0:	89 30       	cpi	r24, 0x09	; 9
     fc2:	10 f4       	brcc	.+4      	; 0xfc8 <usbPoll+0x194>
static inline void usbBuildTxBlock(void)
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
     fc4:	68 2f       	mov	r22, r24
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <usbPoll+0x196>
    if(wantLen > 8)
        wantLen = 8;
     fc8:	68 e0       	ldi	r22, 0x08	; 8
    usbMsgLen -= wantLen;
     fca:	86 1b       	sub	r24, r22
     fcc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     fd0:	ec e7       	ldi	r30, 0x7C	; 124
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	90 81       	ld	r25, Z
     fd6:	88 e8       	ldi	r24, 0x88	; 136
     fd8:	89 27       	eor	r24, r25
     fda:	80 83       	st	Z, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
     fdc:	8d e7       	ldi	r24, 0x7D	; 125
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 cb 06 	call	0xd96	; 0xd96 <usbDeviceRead>
     fe4:	c8 2f       	mov	r28, r24
    if(len <= 8){           /* valid data packet */
     fe6:	89 30       	cpi	r24, 0x09	; 9
     fe8:	60 f4       	brcc	.+24     	; 0x1002 <usbPoll+0x1ce>
        usbCrc16Append(&usbTxBuf[1], len);
     fea:	68 2f       	mov	r22, r24
     fec:	8d e7       	ldi	r24, 0x7D	; 125
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     ff4:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     ff6:	cc 30       	cpi	r28, 0x0C	; 12
     ff8:	40 f4       	brcc	.+16     	; 0x100a <usbPoll+0x1d6>
            usbMsgLen = USB_NO_MSG;
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
    1000:	04 c0       	rjmp	.+8      	; 0x100a <usbPoll+0x1d6>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    1008:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    100a:	c0 93 67 00 	sts	0x0067, r28	; 0x800067 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    100e:	94 e1       	ldi	r25, 0x14	; 20
    1010:	04 c0       	rjmp	.+8      	; 0x101a <usbPoll+0x1e6>
        uchar usbLineStatus = USBIN & USBMASK;
    1012:	80 b3       	in	r24, 0x10	; 16
    1014:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
    1016:	39 f4       	brne	.+14     	; 0x1026 <usbPoll+0x1f2>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    1018:	91 50       	subi	r25, 0x01	; 1
    101a:	91 11       	cpse	r25, r1
    101c:	fa cf       	rjmp	.-12     	; 0x1012 <usbPoll+0x1de>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    101e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    1022:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    102c:	85 b7       	in	r24, 0x35	; 53
    102e:	82 60       	ori	r24, 0x02	; 2
    1030:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    1032:	8b b7       	in	r24, 0x3b	; 59
    1034:	80 64       	ori	r24, 0x40	; 64
    1036:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1038:	e7 e8       	ldi	r30, 0x87	; 135
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8b e4       	ldi	r24, 0x4B	; 75
    103e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    1040:	8a e5       	ldi	r24, 0x5A	; 90
    1042:	80 83       	st	Z, r24
    1044:	08 95       	ret

00001046 <__subsf3>:
    1046:	50 58       	subi	r21, 0x80	; 128

00001048 <__addsf3>:
    1048:	bb 27       	eor	r27, r27
    104a:	aa 27       	eor	r26, r26
    104c:	0e 94 3b 08 	call	0x1076	; 0x1076 <__addsf3x>
    1050:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__fp_round>
    1054:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_pscA>
    1058:	38 f0       	brcs	.+14     	; 0x1068 <__addsf3+0x20>
    105a:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_pscB>
    105e:	20 f0       	brcs	.+8      	; 0x1068 <__addsf3+0x20>
    1060:	39 f4       	brne	.+14     	; 0x1070 <__addsf3+0x28>
    1062:	9f 3f       	cpi	r25, 0xFF	; 255
    1064:	19 f4       	brne	.+6      	; 0x106c <__addsf3+0x24>
    1066:	26 f4       	brtc	.+8      	; 0x1070 <__addsf3+0x28>
    1068:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    106c:	0e f4       	brtc	.+2      	; 0x1070 <__addsf3+0x28>
    106e:	e0 95       	com	r30
    1070:	e7 fb       	bst	r30, 7
    1072:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>

00001076 <__addsf3x>:
    1076:	e9 2f       	mov	r30, r25
    1078:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_split3>
    107c:	58 f3       	brcs	.-42     	; 0x1054 <__addsf3+0xc>
    107e:	ba 17       	cp	r27, r26
    1080:	62 07       	cpc	r22, r18
    1082:	73 07       	cpc	r23, r19
    1084:	84 07       	cpc	r24, r20
    1086:	95 07       	cpc	r25, r21
    1088:	20 f0       	brcs	.+8      	; 0x1092 <__addsf3x+0x1c>
    108a:	79 f4       	brne	.+30     	; 0x10aa <__addsf3x+0x34>
    108c:	a6 f5       	brtc	.+104    	; 0x10f6 <__addsf3x+0x80>
    108e:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_zero>
    1092:	0e f4       	brtc	.+2      	; 0x1096 <__addsf3x+0x20>
    1094:	e0 95       	com	r30
    1096:	0b 2e       	mov	r0, r27
    1098:	ba 2f       	mov	r27, r26
    109a:	a0 2d       	mov	r26, r0
    109c:	0b 01       	movw	r0, r22
    109e:	b9 01       	movw	r22, r18
    10a0:	90 01       	movw	r18, r0
    10a2:	0c 01       	movw	r0, r24
    10a4:	ca 01       	movw	r24, r20
    10a6:	a0 01       	movw	r20, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	ff 27       	eor	r31, r31
    10ac:	59 1b       	sub	r21, r25
    10ae:	99 f0       	breq	.+38     	; 0x10d6 <__addsf3x+0x60>
    10b0:	59 3f       	cpi	r21, 0xF9	; 249
    10b2:	50 f4       	brcc	.+20     	; 0x10c8 <__addsf3x+0x52>
    10b4:	50 3e       	cpi	r21, 0xE0	; 224
    10b6:	68 f1       	brcs	.+90     	; 0x1112 <__addsf3x+0x9c>
    10b8:	1a 16       	cp	r1, r26
    10ba:	f0 40       	sbci	r31, 0x00	; 0
    10bc:	a2 2f       	mov	r26, r18
    10be:	23 2f       	mov	r18, r19
    10c0:	34 2f       	mov	r19, r20
    10c2:	44 27       	eor	r20, r20
    10c4:	58 5f       	subi	r21, 0xF8	; 248
    10c6:	f3 cf       	rjmp	.-26     	; 0x10ae <__addsf3x+0x38>
    10c8:	46 95       	lsr	r20
    10ca:	37 95       	ror	r19
    10cc:	27 95       	ror	r18
    10ce:	a7 95       	ror	r26
    10d0:	f0 40       	sbci	r31, 0x00	; 0
    10d2:	53 95       	inc	r21
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__addsf3x+0x52>
    10d6:	7e f4       	brtc	.+30     	; 0x10f6 <__addsf3x+0x80>
    10d8:	1f 16       	cp	r1, r31
    10da:	ba 0b       	sbc	r27, r26
    10dc:	62 0b       	sbc	r22, r18
    10de:	73 0b       	sbc	r23, r19
    10e0:	84 0b       	sbc	r24, r20
    10e2:	ba f0       	brmi	.+46     	; 0x1112 <__addsf3x+0x9c>
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <__addsf3x+0x9a>
    10e8:	ff 0f       	add	r31, r31
    10ea:	bb 1f       	adc	r27, r27
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	c2 f7       	brpl	.-16     	; 0x10e4 <__addsf3x+0x6e>
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <__addsf3x+0x9c>
    10f6:	ba 0f       	add	r27, r26
    10f8:	62 1f       	adc	r22, r18
    10fa:	73 1f       	adc	r23, r19
    10fc:	84 1f       	adc	r24, r20
    10fe:	48 f4       	brcc	.+18     	; 0x1112 <__addsf3x+0x9c>
    1100:	87 95       	ror	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b7 95       	ror	r27
    1108:	f7 95       	ror	r31
    110a:	9e 3f       	cpi	r25, 0xFE	; 254
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__addsf3x+0x9a>
    110e:	b0 cf       	rjmp	.-160    	; 0x1070 <__addsf3+0x28>
    1110:	93 95       	inc	r25
    1112:	88 0f       	add	r24, r24
    1114:	08 f0       	brcs	.+2      	; 0x1118 <__addsf3x+0xa2>
    1116:	99 27       	eor	r25, r25
    1118:	ee 0f       	add	r30, r30
    111a:	97 95       	ror	r25
    111c:	87 95       	ror	r24
    111e:	08 95       	ret

00001120 <__cmpsf2>:
    1120:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fp_cmp>
    1124:	08 f4       	brcc	.+2      	; 0x1128 <__cmpsf2+0x8>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	08 95       	ret

0000112a <__divsf3>:
    112a:	0e 94 a9 08 	call	0x1152	; 0x1152 <__divsf3x>
    112e:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__fp_round>
    1132:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_pscB>
    1136:	58 f0       	brcs	.+22     	; 0x114e <__divsf3+0x24>
    1138:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_pscA>
    113c:	40 f0       	brcs	.+16     	; 0x114e <__divsf3+0x24>
    113e:	29 f4       	brne	.+10     	; 0x114a <__divsf3+0x20>
    1140:	5f 3f       	cpi	r21, 0xFF	; 255
    1142:	29 f0       	breq	.+10     	; 0x114e <__divsf3+0x24>
    1144:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    1148:	51 11       	cpse	r21, r1
    114a:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_szero>
    114e:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>

00001152 <__divsf3x>:
    1152:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_split3>
    1156:	68 f3       	brcs	.-38     	; 0x1132 <__divsf3+0x8>

00001158 <__divsf3_pse>:
    1158:	99 23       	and	r25, r25
    115a:	b1 f3       	breq	.-20     	; 0x1148 <__divsf3+0x1e>
    115c:	55 23       	and	r21, r21
    115e:	91 f3       	breq	.-28     	; 0x1144 <__divsf3+0x1a>
    1160:	95 1b       	sub	r25, r21
    1162:	55 0b       	sbc	r21, r21
    1164:	bb 27       	eor	r27, r27
    1166:	aa 27       	eor	r26, r26
    1168:	62 17       	cp	r22, r18
    116a:	73 07       	cpc	r23, r19
    116c:	84 07       	cpc	r24, r20
    116e:	38 f0       	brcs	.+14     	; 0x117e <__divsf3_pse+0x26>
    1170:	9f 5f       	subi	r25, 0xFF	; 255
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	44 1f       	adc	r20, r20
    117a:	aa 1f       	adc	r26, r26
    117c:	a9 f3       	breq	.-22     	; 0x1168 <__divsf3_pse+0x10>
    117e:	35 d0       	rcall	.+106    	; 0x11ea <__divsf3_pse+0x92>
    1180:	0e 2e       	mov	r0, r30
    1182:	3a f0       	brmi	.+14     	; 0x1192 <__divsf3_pse+0x3a>
    1184:	e0 e8       	ldi	r30, 0x80	; 128
    1186:	32 d0       	rcall	.+100    	; 0x11ec <__divsf3_pse+0x94>
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	50 40       	sbci	r21, 0x00	; 0
    118c:	e6 95       	lsr	r30
    118e:	00 1c       	adc	r0, r0
    1190:	ca f7       	brpl	.-14     	; 0x1184 <__divsf3_pse+0x2c>
    1192:	2b d0       	rcall	.+86     	; 0x11ea <__divsf3_pse+0x92>
    1194:	fe 2f       	mov	r31, r30
    1196:	29 d0       	rcall	.+82     	; 0x11ea <__divsf3_pse+0x92>
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	bb 1f       	adc	r27, r27
    11a0:	26 17       	cp	r18, r22
    11a2:	37 07       	cpc	r19, r23
    11a4:	48 07       	cpc	r20, r24
    11a6:	ab 07       	cpc	r26, r27
    11a8:	b0 e8       	ldi	r27, 0x80	; 128
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__divsf3_pse+0x56>
    11ac:	bb 0b       	sbc	r27, r27
    11ae:	80 2d       	mov	r24, r0
    11b0:	bf 01       	movw	r22, r30
    11b2:	ff 27       	eor	r31, r31
    11b4:	93 58       	subi	r25, 0x83	; 131
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	3a f0       	brmi	.+14     	; 0x11c8 <__divsf3_pse+0x70>
    11ba:	9e 3f       	cpi	r25, 0xFE	; 254
    11bc:	51 05       	cpc	r21, r1
    11be:	78 f0       	brcs	.+30     	; 0x11de <__divsf3_pse+0x86>
    11c0:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    11c4:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_szero>
    11c8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ca:	e4 f3       	brlt	.-8      	; 0x11c4 <__divsf3_pse+0x6c>
    11cc:	98 3e       	cpi	r25, 0xE8	; 232
    11ce:	d4 f3       	brlt	.-12     	; 0x11c4 <__divsf3_pse+0x6c>
    11d0:	86 95       	lsr	r24
    11d2:	77 95       	ror	r23
    11d4:	67 95       	ror	r22
    11d6:	b7 95       	ror	r27
    11d8:	f7 95       	ror	r31
    11da:	9f 5f       	subi	r25, 0xFF	; 255
    11dc:	c9 f7       	brne	.-14     	; 0x11d0 <__divsf3_pse+0x78>
    11de:	88 0f       	add	r24, r24
    11e0:	91 1d       	adc	r25, r1
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret
    11ea:	e1 e0       	ldi	r30, 0x01	; 1
    11ec:	66 0f       	add	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	bb 1f       	adc	r27, r27
    11f4:	62 17       	cp	r22, r18
    11f6:	73 07       	cpc	r23, r19
    11f8:	84 07       	cpc	r24, r20
    11fa:	ba 07       	cpc	r27, r26
    11fc:	20 f0       	brcs	.+8      	; 0x1206 <__divsf3_pse+0xae>
    11fe:	62 1b       	sub	r22, r18
    1200:	73 0b       	sbc	r23, r19
    1202:	84 0b       	sbc	r24, r20
    1204:	ba 0b       	sbc	r27, r26
    1206:	ee 1f       	adc	r30, r30
    1208:	88 f7       	brcc	.-30     	; 0x11ec <__divsf3_pse+0x94>
    120a:	e0 95       	com	r30
    120c:	08 95       	ret

0000120e <__fixunssfsi>:
    120e:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_splitA>
    1212:	88 f0       	brcs	.+34     	; 0x1236 <__fixunssfsi+0x28>
    1214:	9f 57       	subi	r25, 0x7F	; 127
    1216:	98 f0       	brcs	.+38     	; 0x123e <__fixunssfsi+0x30>
    1218:	b9 2f       	mov	r27, r25
    121a:	99 27       	eor	r25, r25
    121c:	b7 51       	subi	r27, 0x17	; 23
    121e:	b0 f0       	brcs	.+44     	; 0x124c <__fixunssfsi+0x3e>
    1220:	e1 f0       	breq	.+56     	; 0x125a <__fixunssfsi+0x4c>
    1222:	66 0f       	add	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	1a f0       	brmi	.+6      	; 0x1232 <__fixunssfsi+0x24>
    122c:	ba 95       	dec	r27
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__fixunssfsi+0x14>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <__fixunssfsi+0x4c>
    1232:	b1 30       	cpi	r27, 0x01	; 1
    1234:	91 f0       	breq	.+36     	; 0x125a <__fixunssfsi+0x4c>
    1236:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_zero>
    123a:	b1 e0       	ldi	r27, 0x01	; 1
    123c:	08 95       	ret
    123e:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_zero>
    1242:	67 2f       	mov	r22, r23
    1244:	78 2f       	mov	r23, r24
    1246:	88 27       	eor	r24, r24
    1248:	b8 5f       	subi	r27, 0xF8	; 248
    124a:	39 f0       	breq	.+14     	; 0x125a <__fixunssfsi+0x4c>
    124c:	b9 3f       	cpi	r27, 0xF9	; 249
    124e:	cc f3       	brlt	.-14     	; 0x1242 <__fixunssfsi+0x34>
    1250:	86 95       	lsr	r24
    1252:	77 95       	ror	r23
    1254:	67 95       	ror	r22
    1256:	b3 95       	inc	r27
    1258:	d9 f7       	brne	.-10     	; 0x1250 <__fixunssfsi+0x42>
    125a:	3e f4       	brtc	.+14     	; 0x126a <__fixunssfsi+0x5c>
    125c:	90 95       	com	r25
    125e:	80 95       	com	r24
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	08 95       	ret

0000126c <__floatunsisf>:
    126c:	e8 94       	clt
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <__floatsisf+0x12>

00001270 <__floatsisf>:
    1270:	97 fb       	bst	r25, 7
    1272:	3e f4       	brtc	.+14     	; 0x1282 <__floatsisf+0x12>
    1274:	90 95       	com	r25
    1276:	80 95       	com	r24
    1278:	70 95       	com	r23
    127a:	61 95       	neg	r22
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	99 23       	and	r25, r25
    1284:	a9 f0       	breq	.+42     	; 0x12b0 <__floatsisf+0x40>
    1286:	f9 2f       	mov	r31, r25
    1288:	96 e9       	ldi	r25, 0x96	; 150
    128a:	bb 27       	eor	r27, r27
    128c:	93 95       	inc	r25
    128e:	f6 95       	lsr	r31
    1290:	87 95       	ror	r24
    1292:	77 95       	ror	r23
    1294:	67 95       	ror	r22
    1296:	b7 95       	ror	r27
    1298:	f1 11       	cpse	r31, r1
    129a:	f8 cf       	rjmp	.-16     	; 0x128c <__floatsisf+0x1c>
    129c:	fa f4       	brpl	.+62     	; 0x12dc <__floatsisf+0x6c>
    129e:	bb 0f       	add	r27, r27
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <__floatsisf+0x36>
    12a2:	60 ff       	sbrs	r22, 0
    12a4:	1b c0       	rjmp	.+54     	; 0x12dc <__floatsisf+0x6c>
    12a6:	6f 5f       	subi	r22, 0xFF	; 255
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	16 c0       	rjmp	.+44     	; 0x12dc <__floatsisf+0x6c>
    12b0:	88 23       	and	r24, r24
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <__floatsisf+0x48>
    12b4:	96 e9       	ldi	r25, 0x96	; 150
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <__floatsisf+0x6a>
    12b8:	77 23       	and	r23, r23
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <__floatsisf+0x54>
    12bc:	9e e8       	ldi	r25, 0x8E	; 142
    12be:	87 2f       	mov	r24, r23
    12c0:	76 2f       	mov	r23, r22
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <__floatsisf+0x5e>
    12c4:	66 23       	and	r22, r22
    12c6:	71 f0       	breq	.+28     	; 0x12e4 <__floatsisf+0x74>
    12c8:	96 e8       	ldi	r25, 0x86	; 134
    12ca:	86 2f       	mov	r24, r22
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	2a f0       	brmi	.+10     	; 0x12dc <__floatsisf+0x6c>
    12d2:	9a 95       	dec	r25
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	da f7       	brpl	.-10     	; 0x12d2 <__floatsisf+0x62>
    12dc:	88 0f       	add	r24, r24
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret

000012e6 <__fp_cmp>:
    12e6:	99 0f       	add	r25, r25
    12e8:	00 08       	sbc	r0, r0
    12ea:	55 0f       	add	r21, r21
    12ec:	aa 0b       	sbc	r26, r26
    12ee:	e0 e8       	ldi	r30, 0x80	; 128
    12f0:	fe ef       	ldi	r31, 0xFE	; 254
    12f2:	16 16       	cp	r1, r22
    12f4:	17 06       	cpc	r1, r23
    12f6:	e8 07       	cpc	r30, r24
    12f8:	f9 07       	cpc	r31, r25
    12fa:	c0 f0       	brcs	.+48     	; 0x132c <__fp_cmp+0x46>
    12fc:	12 16       	cp	r1, r18
    12fe:	13 06       	cpc	r1, r19
    1300:	e4 07       	cpc	r30, r20
    1302:	f5 07       	cpc	r31, r21
    1304:	98 f0       	brcs	.+38     	; 0x132c <__fp_cmp+0x46>
    1306:	62 1b       	sub	r22, r18
    1308:	73 0b       	sbc	r23, r19
    130a:	84 0b       	sbc	r24, r20
    130c:	95 0b       	sbc	r25, r21
    130e:	39 f4       	brne	.+14     	; 0x131e <__fp_cmp+0x38>
    1310:	0a 26       	eor	r0, r26
    1312:	61 f0       	breq	.+24     	; 0x132c <__fp_cmp+0x46>
    1314:	23 2b       	or	r18, r19
    1316:	24 2b       	or	r18, r20
    1318:	25 2b       	or	r18, r21
    131a:	21 f4       	brne	.+8      	; 0x1324 <__fp_cmp+0x3e>
    131c:	08 95       	ret
    131e:	0a 26       	eor	r0, r26
    1320:	09 f4       	brne	.+2      	; 0x1324 <__fp_cmp+0x3e>
    1322:	a1 40       	sbci	r26, 0x01	; 1
    1324:	a6 95       	lsr	r26
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	81 1d       	adc	r24, r1
    132a:	81 1d       	adc	r24, r1
    132c:	08 95       	ret

0000132e <__fp_inf>:
    132e:	97 f9       	bld	r25, 7
    1330:	9f 67       	ori	r25, 0x7F	; 127
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	08 95       	ret

0000133a <__fp_nan>:
    133a:	9f ef       	ldi	r25, 0xFF	; 255
    133c:	80 ec       	ldi	r24, 0xC0	; 192
    133e:	08 95       	ret

00001340 <__fp_pscA>:
    1340:	00 24       	eor	r0, r0
    1342:	0a 94       	dec	r0
    1344:	16 16       	cp	r1, r22
    1346:	17 06       	cpc	r1, r23
    1348:	18 06       	cpc	r1, r24
    134a:	09 06       	cpc	r0, r25
    134c:	08 95       	ret

0000134e <__fp_pscB>:
    134e:	00 24       	eor	r0, r0
    1350:	0a 94       	dec	r0
    1352:	12 16       	cp	r1, r18
    1354:	13 06       	cpc	r1, r19
    1356:	14 06       	cpc	r1, r20
    1358:	05 06       	cpc	r0, r21
    135a:	08 95       	ret

0000135c <__fp_round>:
    135c:	09 2e       	mov	r0, r25
    135e:	03 94       	inc	r0
    1360:	00 0c       	add	r0, r0
    1362:	11 f4       	brne	.+4      	; 0x1368 <__fp_round+0xc>
    1364:	88 23       	and	r24, r24
    1366:	52 f0       	brmi	.+20     	; 0x137c <__fp_round+0x20>
    1368:	bb 0f       	add	r27, r27
    136a:	40 f4       	brcc	.+16     	; 0x137c <__fp_round+0x20>
    136c:	bf 2b       	or	r27, r31
    136e:	11 f4       	brne	.+4      	; 0x1374 <__fp_round+0x18>
    1370:	60 ff       	sbrs	r22, 0
    1372:	04 c0       	rjmp	.+8      	; 0x137c <__fp_round+0x20>
    1374:	6f 5f       	subi	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	8f 4f       	sbci	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	08 95       	ret

0000137e <__fp_split3>:
    137e:	57 fd       	sbrc	r21, 7
    1380:	90 58       	subi	r25, 0x80	; 128
    1382:	44 0f       	add	r20, r20
    1384:	55 1f       	adc	r21, r21
    1386:	59 f0       	breq	.+22     	; 0x139e <__fp_splitA+0x10>
    1388:	5f 3f       	cpi	r21, 0xFF	; 255
    138a:	71 f0       	breq	.+28     	; 0x13a8 <__fp_splitA+0x1a>
    138c:	47 95       	ror	r20

0000138e <__fp_splitA>:
    138e:	88 0f       	add	r24, r24
    1390:	97 fb       	bst	r25, 7
    1392:	99 1f       	adc	r25, r25
    1394:	61 f0       	breq	.+24     	; 0x13ae <__fp_splitA+0x20>
    1396:	9f 3f       	cpi	r25, 0xFF	; 255
    1398:	79 f0       	breq	.+30     	; 0x13b8 <__fp_splitA+0x2a>
    139a:	87 95       	ror	r24
    139c:	08 95       	ret
    139e:	12 16       	cp	r1, r18
    13a0:	13 06       	cpc	r1, r19
    13a2:	14 06       	cpc	r1, r20
    13a4:	55 1f       	adc	r21, r21
    13a6:	f2 cf       	rjmp	.-28     	; 0x138c <__fp_split3+0xe>
    13a8:	46 95       	lsr	r20
    13aa:	f1 df       	rcall	.-30     	; 0x138e <__fp_splitA>
    13ac:	08 c0       	rjmp	.+16     	; 0x13be <__fp_splitA+0x30>
    13ae:	16 16       	cp	r1, r22
    13b0:	17 06       	cpc	r1, r23
    13b2:	18 06       	cpc	r1, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	f1 cf       	rjmp	.-30     	; 0x139a <__fp_splitA+0xc>
    13b8:	86 95       	lsr	r24
    13ba:	71 05       	cpc	r23, r1
    13bc:	61 05       	cpc	r22, r1
    13be:	08 94       	sec
    13c0:	08 95       	ret

000013c2 <__fp_zero>:
    13c2:	e8 94       	clt

000013c4 <__fp_szero>:
    13c4:	bb 27       	eor	r27, r27
    13c6:	66 27       	eor	r22, r22
    13c8:	77 27       	eor	r23, r23
    13ca:	cb 01       	movw	r24, r22
    13cc:	97 f9       	bld	r25, 7
    13ce:	08 95       	ret

000013d0 <__mulsf3>:
    13d0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__mulsf3x>
    13d4:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__fp_round>
    13d8:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_pscA>
    13dc:	38 f0       	brcs	.+14     	; 0x13ec <__mulsf3+0x1c>
    13de:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_pscB>
    13e2:	20 f0       	brcs	.+8      	; 0x13ec <__mulsf3+0x1c>
    13e4:	95 23       	and	r25, r21
    13e6:	11 f0       	breq	.+4      	; 0x13ec <__mulsf3+0x1c>
    13e8:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    13ec:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    13f0:	11 24       	eor	r1, r1
    13f2:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_szero>

000013f6 <__mulsf3x>:
    13f6:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_split3>
    13fa:	70 f3       	brcs	.-36     	; 0x13d8 <__mulsf3+0x8>

000013fc <__mulsf3_pse>:
    13fc:	95 9f       	mul	r25, r21
    13fe:	c1 f3       	breq	.-16     	; 0x13f0 <__mulsf3+0x20>
    1400:	95 0f       	add	r25, r21
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	55 1f       	adc	r21, r21
    1406:	62 9f       	mul	r22, r18
    1408:	f0 01       	movw	r30, r0
    140a:	72 9f       	mul	r23, r18
    140c:	bb 27       	eor	r27, r27
    140e:	f0 0d       	add	r31, r0
    1410:	b1 1d       	adc	r27, r1
    1412:	63 9f       	mul	r22, r19
    1414:	aa 27       	eor	r26, r26
    1416:	f0 0d       	add	r31, r0
    1418:	b1 1d       	adc	r27, r1
    141a:	aa 1f       	adc	r26, r26
    141c:	64 9f       	mul	r22, r20
    141e:	66 27       	eor	r22, r22
    1420:	b0 0d       	add	r27, r0
    1422:	a1 1d       	adc	r26, r1
    1424:	66 1f       	adc	r22, r22
    1426:	82 9f       	mul	r24, r18
    1428:	22 27       	eor	r18, r18
    142a:	b0 0d       	add	r27, r0
    142c:	a1 1d       	adc	r26, r1
    142e:	62 1f       	adc	r22, r18
    1430:	73 9f       	mul	r23, r19
    1432:	b0 0d       	add	r27, r0
    1434:	a1 1d       	adc	r26, r1
    1436:	62 1f       	adc	r22, r18
    1438:	83 9f       	mul	r24, r19
    143a:	a0 0d       	add	r26, r0
    143c:	61 1d       	adc	r22, r1
    143e:	22 1f       	adc	r18, r18
    1440:	74 9f       	mul	r23, r20
    1442:	33 27       	eor	r19, r19
    1444:	a0 0d       	add	r26, r0
    1446:	61 1d       	adc	r22, r1
    1448:	23 1f       	adc	r18, r19
    144a:	84 9f       	mul	r24, r20
    144c:	60 0d       	add	r22, r0
    144e:	21 1d       	adc	r18, r1
    1450:	82 2f       	mov	r24, r18
    1452:	76 2f       	mov	r23, r22
    1454:	6a 2f       	mov	r22, r26
    1456:	11 24       	eor	r1, r1
    1458:	9f 57       	subi	r25, 0x7F	; 127
    145a:	50 40       	sbci	r21, 0x00	; 0
    145c:	9a f0       	brmi	.+38     	; 0x1484 <__mulsf3_pse+0x88>
    145e:	f1 f0       	breq	.+60     	; 0x149c <__mulsf3_pse+0xa0>
    1460:	88 23       	and	r24, r24
    1462:	4a f0       	brmi	.+18     	; 0x1476 <__mulsf3_pse+0x7a>
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	bb 1f       	adc	r27, r27
    146a:	66 1f       	adc	r22, r22
    146c:	77 1f       	adc	r23, r23
    146e:	88 1f       	adc	r24, r24
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	a9 f7       	brne	.-22     	; 0x1460 <__mulsf3_pse+0x64>
    1476:	9e 3f       	cpi	r25, 0xFE	; 254
    1478:	51 05       	cpc	r21, r1
    147a:	80 f0       	brcs	.+32     	; 0x149c <__mulsf3_pse+0xa0>
    147c:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    1480:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_szero>
    1484:	5f 3f       	cpi	r21, 0xFF	; 255
    1486:	e4 f3       	brlt	.-8      	; 0x1480 <__mulsf3_pse+0x84>
    1488:	98 3e       	cpi	r25, 0xE8	; 232
    148a:	d4 f3       	brlt	.-12     	; 0x1480 <__mulsf3_pse+0x84>
    148c:	86 95       	lsr	r24
    148e:	77 95       	ror	r23
    1490:	67 95       	ror	r22
    1492:	b7 95       	ror	r27
    1494:	f7 95       	ror	r31
    1496:	e7 95       	ror	r30
    1498:	9f 5f       	subi	r25, 0xFF	; 255
    149a:	c1 f7       	brne	.-16     	; 0x148c <__mulsf3_pse+0x90>
    149c:	fe 2b       	or	r31, r30
    149e:	88 0f       	add	r24, r24
    14a0:	91 1d       	adc	r25, r1
    14a2:	96 95       	lsr	r25
    14a4:	87 95       	ror	r24
    14a6:	97 f9       	bld	r25, 7
    14a8:	08 95       	ret

000014aa <pow>:
    14aa:	fa 01       	movw	r30, r20
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	30 96       	adiw	r30, 0x00	; 0
    14b2:	21 05       	cpc	r18, r1
    14b4:	31 05       	cpc	r19, r1
    14b6:	a1 f1       	breq	.+104    	; 0x1520 <pow+0x76>
    14b8:	61 15       	cp	r22, r1
    14ba:	71 05       	cpc	r23, r1
    14bc:	61 f4       	brne	.+24     	; 0x14d6 <pow+0x2c>
    14be:	80 38       	cpi	r24, 0x80	; 128
    14c0:	bf e3       	ldi	r27, 0x3F	; 63
    14c2:	9b 07       	cpc	r25, r27
    14c4:	49 f1       	breq	.+82     	; 0x1518 <pow+0x6e>
    14c6:	68 94       	set
    14c8:	90 38       	cpi	r25, 0x80	; 128
    14ca:	81 05       	cpc	r24, r1
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <pow+0x3c>
    14ce:	80 38       	cpi	r24, 0x80	; 128
    14d0:	bf ef       	ldi	r27, 0xFF	; 255
    14d2:	9b 07       	cpc	r25, r27
    14d4:	41 f0       	breq	.+16     	; 0x14e6 <pow+0x3c>
    14d6:	99 23       	and	r25, r25
    14d8:	4a f5       	brpl	.+82     	; 0x152c <pow+0x82>
    14da:	ff 3f       	cpi	r31, 0xFF	; 255
    14dc:	e1 05       	cpc	r30, r1
    14de:	31 05       	cpc	r19, r1
    14e0:	21 05       	cpc	r18, r1
    14e2:	19 f1       	breq	.+70     	; 0x152a <pow+0x80>
    14e4:	e8 94       	clt
    14e6:	08 94       	sec
    14e8:	e7 95       	ror	r30
    14ea:	d9 01       	movw	r26, r18
    14ec:	aa 23       	and	r26, r26
    14ee:	29 f4       	brne	.+10     	; 0x14fa <pow+0x50>
    14f0:	ab 2f       	mov	r26, r27
    14f2:	be 2f       	mov	r27, r30
    14f4:	f8 5f       	subi	r31, 0xF8	; 248
    14f6:	d0 f3       	brcs	.-12     	; 0x14ec <pow+0x42>
    14f8:	10 c0       	rjmp	.+32     	; 0x151a <pow+0x70>
    14fa:	ff 5f       	subi	r31, 0xFF	; 255
    14fc:	70 f4       	brcc	.+28     	; 0x151a <pow+0x70>
    14fe:	a6 95       	lsr	r26
    1500:	e0 f7       	brcc	.-8      	; 0x14fa <pow+0x50>
    1502:	f7 39       	cpi	r31, 0x97	; 151
    1504:	50 f0       	brcs	.+20     	; 0x151a <pow+0x70>
    1506:	19 f0       	breq	.+6      	; 0x150e <pow+0x64>
    1508:	ff 3a       	cpi	r31, 0xAF	; 175
    150a:	38 f4       	brcc	.+14     	; 0x151a <pow+0x70>
    150c:	9f 77       	andi	r25, 0x7F	; 127
    150e:	9f 93       	push	r25
    1510:	0d d0       	rcall	.+26     	; 0x152c <pow+0x82>
    1512:	0f 90       	pop	r0
    1514:	07 fc       	sbrc	r0, 7
    1516:	90 58       	subi	r25, 0x80	; 128
    1518:	08 95       	ret
    151a:	46 f0       	brts	.+16     	; 0x152c <pow+0x82>
    151c:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	80 e8       	ldi	r24, 0x80	; 128
    1526:	9f e3       	ldi	r25, 0x3F	; 63
    1528:	08 95       	ret
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	9f 77       	andi	r25, 0x7F	; 127
    152e:	5f 93       	push	r21
    1530:	4f 93       	push	r20
    1532:	3f 93       	push	r19
    1534:	2f 93       	push	r18
    1536:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <log>
    153a:	2f 91       	pop	r18
    153c:	3f 91       	pop	r19
    153e:	4f 91       	pop	r20
    1540:	5f 91       	pop	r21
    1542:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__mulsf3>
    1546:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <exp>
    154a:	29 f4       	brne	.+10     	; 0x1556 <pow+0xac>
    154c:	16 f0       	brts	.+4      	; 0x1552 <pow+0xa8>
    154e:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    1552:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_zero>
    1556:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>

0000155a <exp>:
    155a:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_splitA>
    155e:	a8 f3       	brcs	.-22     	; 0x154a <pow+0xa0>
    1560:	96 38       	cpi	r25, 0x86	; 134
    1562:	a0 f7       	brcc	.-24     	; 0x154c <pow+0xa2>
    1564:	07 f8       	bld	r0, 7
    1566:	0f 92       	push	r0
    1568:	e8 94       	clt
    156a:	2b e3       	ldi	r18, 0x3B	; 59
    156c:	3a ea       	ldi	r19, 0xAA	; 170
    156e:	48 eb       	ldi	r20, 0xB8	; 184
    1570:	5f e7       	ldi	r21, 0x7F	; 127
    1572:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__mulsf3_pse>
    1576:	0f 92       	push	r0
    1578:	0f 92       	push	r0
    157a:	0f 92       	push	r0
    157c:	4d b7       	in	r20, 0x3d	; 61
    157e:	5e b7       	in	r21, 0x3e	; 62
    1580:	0f 92       	push	r0
    1582:	0e 94 98 0b 	call	0x1730	; 0x1730 <modf>
    1586:	e4 e5       	ldi	r30, 0x54	; 84
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_powser>
    158e:	4f 91       	pop	r20
    1590:	5f 91       	pop	r21
    1592:	ef 91       	pop	r30
    1594:	ff 91       	pop	r31
    1596:	e5 95       	asr	r30
    1598:	ee 1f       	adc	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	49 f0       	breq	.+18     	; 0x15b0 <exp+0x56>
    159e:	fe 57       	subi	r31, 0x7E	; 126
    15a0:	e0 68       	ori	r30, 0x80	; 128
    15a2:	44 27       	eor	r20, r20
    15a4:	ee 0f       	add	r30, r30
    15a6:	44 1f       	adc	r20, r20
    15a8:	fa 95       	dec	r31
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <exp+0x4a>
    15ac:	41 95       	neg	r20
    15ae:	55 0b       	sbc	r21, r21
    15b0:	0e 94 12 0b 	call	0x1624	; 0x1624 <ldexp>
    15b4:	0f 90       	pop	r0
    15b6:	07 fe       	sbrs	r0, 7
    15b8:	0c 94 06 0b 	jmp	0x160c	; 0x160c <inverse>
    15bc:	08 95       	ret

000015be <__fp_powser>:
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	1f 93       	push	r17
    15c4:	0f 93       	push	r16
    15c6:	ff 92       	push	r15
    15c8:	ef 92       	push	r14
    15ca:	df 92       	push	r13
    15cc:	7b 01       	movw	r14, r22
    15ce:	8c 01       	movw	r16, r24
    15d0:	68 94       	set
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <__fp_powser+0x22>
    15d4:	da 2e       	mov	r13, r26
    15d6:	ef 01       	movw	r28, r30
    15d8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__mulsf3x>
    15dc:	fe 01       	movw	r30, r28
    15de:	e8 94       	clt
    15e0:	a5 91       	lpm	r26, Z+
    15e2:	25 91       	lpm	r18, Z+
    15e4:	35 91       	lpm	r19, Z+
    15e6:	45 91       	lpm	r20, Z+
    15e8:	55 91       	lpm	r21, Z+
    15ea:	a6 f3       	brts	.-24     	; 0x15d4 <__fp_powser+0x16>
    15ec:	ef 01       	movw	r28, r30
    15ee:	0e 94 3b 08 	call	0x1076	; 0x1076 <__addsf3x>
    15f2:	fe 01       	movw	r30, r28
    15f4:	97 01       	movw	r18, r14
    15f6:	a8 01       	movw	r20, r16
    15f8:	da 94       	dec	r13
    15fa:	69 f7       	brne	.-38     	; 0x15d6 <__fp_powser+0x18>
    15fc:	df 90       	pop	r13
    15fe:	ef 90       	pop	r14
    1600:	ff 90       	pop	r15
    1602:	0f 91       	pop	r16
    1604:	1f 91       	pop	r17
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <inverse>:
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	80 e8       	ldi	r24, 0x80	; 128
    1616:	9f e3       	ldi	r25, 0x3F	; 63
    1618:	0c 94 95 08 	jmp	0x112a	; 0x112a <__divsf3>
    161c:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>
    1620:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_mpack>

00001624 <ldexp>:
    1624:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_splitA>
    1628:	d8 f3       	brcs	.-10     	; 0x1620 <inverse+0x14>
    162a:	99 23       	and	r25, r25
    162c:	c9 f3       	breq	.-14     	; 0x1620 <inverse+0x14>
    162e:	94 0f       	add	r25, r20
    1630:	51 1d       	adc	r21, r1
    1632:	a3 f3       	brvs	.-24     	; 0x161c <inverse+0x10>
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	94 f0       	brlt	.+36     	; 0x165e <ldexp+0x3a>
    163a:	59 f0       	breq	.+22     	; 0x1652 <ldexp+0x2e>
    163c:	88 23       	and	r24, r24
    163e:	32 f0       	brmi	.+12     	; 0x164c <ldexp+0x28>
    1640:	66 0f       	add	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	91 50       	subi	r25, 0x01	; 1
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	c1 f7       	brne	.-16     	; 0x163c <ldexp+0x18>
    164c:	9e 3f       	cpi	r25, 0xFE	; 254
    164e:	51 05       	cpc	r21, r1
    1650:	2c f7       	brge	.-54     	; 0x161c <inverse+0x10>
    1652:	88 0f       	add	r24, r24
    1654:	91 1d       	adc	r25, r1
    1656:	96 95       	lsr	r25
    1658:	87 95       	ror	r24
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret
    165e:	5f 3f       	cpi	r21, 0xFF	; 255
    1660:	ac f0       	brlt	.+42     	; 0x168c <ldexp+0x68>
    1662:	98 3e       	cpi	r25, 0xE8	; 232
    1664:	9c f0       	brlt	.+38     	; 0x168c <ldexp+0x68>
    1666:	bb 27       	eor	r27, r27
    1668:	86 95       	lsr	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b7 95       	ror	r27
    1670:	08 f4       	brcc	.+2      	; 0x1674 <ldexp+0x50>
    1672:	b1 60       	ori	r27, 0x01	; 1
    1674:	93 95       	inc	r25
    1676:	c1 f7       	brne	.-16     	; 0x1668 <ldexp+0x44>
    1678:	bb 0f       	add	r27, r27
    167a:	58 f7       	brcc	.-42     	; 0x1652 <ldexp+0x2e>
    167c:	11 f4       	brne	.+4      	; 0x1682 <ldexp+0x5e>
    167e:	60 ff       	sbrs	r22, 0
    1680:	e8 cf       	rjmp	.-48     	; 0x1652 <ldexp+0x2e>
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	e3 cf       	rjmp	.-58     	; 0x1652 <ldexp+0x2e>
    168c:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__fp_szero>
    1690:	16 f0       	brts	.+4      	; 0x1696 <ldexp+0x72>
    1692:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_mpack>
    1696:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__fp_nan>
    169a:	68 94       	set
    169c:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_inf>

000016a0 <log>:
    16a0:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_splitA>
    16a4:	a8 f3       	brcs	.-22     	; 0x1690 <ldexp+0x6c>
    16a6:	99 23       	and	r25, r25
    16a8:	c1 f3       	breq	.-16     	; 0x169a <ldexp+0x76>
    16aa:	ae f3       	brts	.-22     	; 0x1696 <ldexp+0x72>
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	1f 93       	push	r17
    16b2:	0f 93       	push	r16
    16b4:	ff 92       	push	r15
    16b6:	c9 2f       	mov	r28, r25
    16b8:	dd 27       	eor	r29, r29
    16ba:	88 23       	and	r24, r24
    16bc:	2a f0       	brmi	.+10     	; 0x16c8 <log+0x28>
    16be:	21 97       	sbiw	r28, 0x01	; 1
    16c0:	66 0f       	add	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	da f7       	brpl	.-10     	; 0x16be <log+0x1e>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f eb       	ldi	r21, 0xBF	; 191
    16d0:	9f e3       	ldi	r25, 0x3F	; 63
    16d2:	88 39       	cpi	r24, 0x98	; 152
    16d4:	20 f0       	brcs	.+8      	; 0x16de <log+0x3e>
    16d6:	80 3e       	cpi	r24, 0xE0	; 224
    16d8:	38 f0       	brcs	.+14     	; 0x16e8 <log+0x48>
    16da:	21 96       	adiw	r28, 0x01	; 1
    16dc:	8f 77       	andi	r24, 0x7F	; 127
    16de:	0e 94 24 08 	call	0x1048	; 0x1048 <__addsf3>
    16e2:	ec e7       	ldi	r30, 0x7C	; 124
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <log+0x50>
    16e8:	0e 94 24 08 	call	0x1048	; 0x1048 <__addsf3>
    16ec:	e9 ea       	ldi	r30, 0xA9	; 169
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_powser>
    16f4:	8b 01       	movw	r16, r22
    16f6:	be 01       	movw	r22, r28
    16f8:	ec 01       	movw	r28, r24
    16fa:	fb 2e       	mov	r15, r27
    16fc:	6f 57       	subi	r22, 0x7F	; 127
    16fe:	71 09       	sbc	r23, r1
    1700:	75 95       	asr	r23
    1702:	77 1f       	adc	r23, r23
    1704:	88 0b       	sbc	r24, r24
    1706:	99 0b       	sbc	r25, r25
    1708:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatsisf>
    170c:	28 e1       	ldi	r18, 0x18	; 24
    170e:	32 e7       	ldi	r19, 0x72	; 114
    1710:	41 e3       	ldi	r20, 0x31	; 49
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__mulsf3x>
    1718:	af 2d       	mov	r26, r15
    171a:	98 01       	movw	r18, r16
    171c:	ae 01       	movw	r20, r28
    171e:	ff 90       	pop	r15
    1720:	0f 91       	pop	r16
    1722:	1f 91       	pop	r17
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	0e 94 3b 08 	call	0x1076	; 0x1076 <__addsf3x>
    172c:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__fp_round>

00001730 <modf>:
    1730:	fa 01       	movw	r30, r20
    1732:	dc 01       	movw	r26, r24
    1734:	aa 0f       	add	r26, r26
    1736:	bb 1f       	adc	r27, r27
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	bf 57       	subi	r27, 0x7F	; 127
    173e:	28 f4       	brcc	.+10     	; 0x174a <modf+0x1a>
    1740:	22 27       	eor	r18, r18
    1742:	33 27       	eor	r19, r19
    1744:	44 27       	eor	r20, r20
    1746:	50 78       	andi	r21, 0x80	; 128
    1748:	20 c0       	rjmp	.+64     	; 0x178a <modf+0x5a>
    174a:	b7 51       	subi	r27, 0x17	; 23
    174c:	90 f4       	brcc	.+36     	; 0x1772 <modf+0x42>
    174e:	ab 2f       	mov	r26, r27
    1750:	00 24       	eor	r0, r0
    1752:	46 95       	lsr	r20
    1754:	37 95       	ror	r19
    1756:	27 95       	ror	r18
    1758:	01 1c       	adc	r0, r1
    175a:	a3 95       	inc	r26
    175c:	d2 f3       	brmi	.-12     	; 0x1752 <modf+0x22>
    175e:	00 20       	and	r0, r0
    1760:	71 f0       	breq	.+28     	; 0x177e <modf+0x4e>
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	44 1f       	adc	r20, r20
    1768:	b3 95       	inc	r27
    176a:	da f3       	brmi	.-10     	; 0x1762 <modf+0x32>
    176c:	0e d0       	rcall	.+28     	; 0x178a <modf+0x5a>
    176e:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__subsf3>
    1772:	61 30       	cpi	r22, 0x01	; 1
    1774:	71 05       	cpc	r23, r1
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	8a 07       	cpc	r24, r26
    177a:	b9 46       	sbci	r27, 0x69	; 105
    177c:	30 f4       	brcc	.+12     	; 0x178a <modf+0x5a>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	66 27       	eor	r22, r22
    1784:	77 27       	eor	r23, r23
    1786:	88 27       	eor	r24, r24
    1788:	90 78       	andi	r25, 0x80	; 128
    178a:	30 96       	adiw	r30, 0x00	; 0
    178c:	21 f0       	breq	.+8      	; 0x1796 <modf+0x66>
    178e:	20 83       	st	Z, r18
    1790:	31 83       	std	Z+1, r19	; 0x01
    1792:	42 83       	std	Z+2, r20	; 0x02
    1794:	53 83       	std	Z+3, r21	; 0x03
    1796:	08 95       	ret

00001798 <__fp_mpack>:
    1798:	9f 3f       	cpi	r25, 0xFF	; 255
    179a:	31 f0       	breq	.+12     	; 0x17a8 <__fp_mpack_finite+0xc>

0000179c <__fp_mpack_finite>:
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	20 f4       	brcc	.+8      	; 0x17a8 <__fp_mpack_finite+0xc>
    17a0:	87 95       	ror	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	88 0f       	add	r24, r24
    17aa:	91 1d       	adc	r25, r1
    17ac:	96 95       	lsr	r25
    17ae:	87 95       	ror	r24
    17b0:	97 f9       	bld	r25, 7
    17b2:	08 95       	ret

000017b4 <__divmodsi4>:
    17b4:	05 2e       	mov	r0, r21
    17b6:	97 fb       	bst	r25, 7
    17b8:	1e f4       	brtc	.+6      	; 0x17c0 <__divmodsi4+0xc>
    17ba:	00 94       	com	r0
    17bc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__negsi2>
    17c0:	57 fd       	sbrc	r21, 7
    17c2:	07 d0       	rcall	.+14     	; 0x17d2 <__divmodsi4_neg2>
    17c4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__udivmodsi4>
    17c8:	07 fc       	sbrc	r0, 7
    17ca:	03 d0       	rcall	.+6      	; 0x17d2 <__divmodsi4_neg2>
    17cc:	4e f4       	brtc	.+18     	; 0x17e0 <__divmodsi4_exit>
    17ce:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__negsi2>

000017d2 <__divmodsi4_neg2>:
    17d2:	50 95       	com	r21
    17d4:	40 95       	com	r20
    17d6:	30 95       	com	r19
    17d8:	21 95       	neg	r18
    17da:	3f 4f       	sbci	r19, 0xFF	; 255
    17dc:	4f 4f       	sbci	r20, 0xFF	; 255
    17de:	5f 4f       	sbci	r21, 0xFF	; 255

000017e0 <__divmodsi4_exit>:
    17e0:	08 95       	ret

000017e2 <__negsi2>:
    17e2:	90 95       	com	r25
    17e4:	80 95       	com	r24
    17e6:	70 95       	com	r23
    17e8:	61 95       	neg	r22
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	8f 4f       	sbci	r24, 0xFF	; 255
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	08 95       	ret

000017f2 <__umulhisi3>:
    17f2:	a2 9f       	mul	r26, r18
    17f4:	b0 01       	movw	r22, r0
    17f6:	b3 9f       	mul	r27, r19
    17f8:	c0 01       	movw	r24, r0
    17fa:	a3 9f       	mul	r26, r19
    17fc:	70 0d       	add	r23, r0
    17fe:	81 1d       	adc	r24, r1
    1800:	11 24       	eor	r1, r1
    1802:	91 1d       	adc	r25, r1
    1804:	b2 9f       	mul	r27, r18
    1806:	70 0d       	add	r23, r0
    1808:	81 1d       	adc	r24, r1
    180a:	11 24       	eor	r1, r1
    180c:	91 1d       	adc	r25, r1
    180e:	08 95       	ret

00001810 <__umulsidi3>:
    1810:	e8 94       	clt

00001812 <__umulsidi3_helper>:
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	fc 01       	movw	r30, r24
    1818:	db 01       	movw	r26, r22
    181a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__umulhisi3>
    181e:	7f 93       	push	r23
    1820:	6f 93       	push	r22
    1822:	e9 01       	movw	r28, r18
    1824:	9a 01       	movw	r18, r20
    1826:	ac 01       	movw	r20, r24
    1828:	bf 93       	push	r27
    182a:	af 93       	push	r26
    182c:	3f 93       	push	r19
    182e:	2f 93       	push	r18
    1830:	df 01       	movw	r26, r30
    1832:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__umulhisi3>
    1836:	26 f4       	brtc	.+8      	; 0x1840 <__umulsidi3_helper+0x2e>
    1838:	6c 1b       	sub	r22, r28
    183a:	7d 0b       	sbc	r23, r29
    183c:	82 0b       	sbc	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	9e 01       	movw	r18, r28
    1842:	eb 01       	movw	r28, r22
    1844:	fc 01       	movw	r30, r24
    1846:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__muldi3_6>
    184a:	af 91       	pop	r26
    184c:	bf 91       	pop	r27
    184e:	2f 91       	pop	r18
    1850:	3f 91       	pop	r19
    1852:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__muldi3_6>
    1856:	be 01       	movw	r22, r28
    1858:	cf 01       	movw	r24, r30
    185a:	f9 01       	movw	r30, r18
    185c:	2f 91       	pop	r18
    185e:	3f 91       	pop	r19
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <__ashrdi3>:
    1866:	97 fb       	bst	r25, 7
    1868:	10 f8       	bld	r1, 0

0000186a <__lshrdi3>:
    186a:	16 94       	lsr	r1
    186c:	00 08       	sbc	r0, r0
    186e:	0f 93       	push	r16
    1870:	08 30       	cpi	r16, 0x08	; 8
    1872:	98 f0       	brcs	.+38     	; 0x189a <__lshrdi3+0x30>
    1874:	08 50       	subi	r16, 0x08	; 8
    1876:	23 2f       	mov	r18, r19
    1878:	34 2f       	mov	r19, r20
    187a:	45 2f       	mov	r20, r21
    187c:	56 2f       	mov	r21, r22
    187e:	67 2f       	mov	r22, r23
    1880:	78 2f       	mov	r23, r24
    1882:	89 2f       	mov	r24, r25
    1884:	90 2d       	mov	r25, r0
    1886:	f4 cf       	rjmp	.-24     	; 0x1870 <__lshrdi3+0x6>
    1888:	05 94       	asr	r0
    188a:	97 95       	ror	r25
    188c:	87 95       	ror	r24
    188e:	77 95       	ror	r23
    1890:	67 95       	ror	r22
    1892:	57 95       	ror	r21
    1894:	47 95       	ror	r20
    1896:	37 95       	ror	r19
    1898:	27 95       	ror	r18
    189a:	0a 95       	dec	r16
    189c:	aa f7       	brpl	.-22     	; 0x1888 <__lshrdi3+0x1e>
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <__udivmodsi4>:
    18a2:	a1 e2       	ldi	r26, 0x21	; 33
    18a4:	1a 2e       	mov	r1, r26
    18a6:	aa 1b       	sub	r26, r26
    18a8:	bb 1b       	sub	r27, r27
    18aa:	fd 01       	movw	r30, r26
    18ac:	0d c0       	rjmp	.+26     	; 0x18c8 <__udivmodsi4_ep>

000018ae <__udivmodsi4_loop>:
    18ae:	aa 1f       	adc	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	ee 1f       	adc	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	a2 17       	cp	r26, r18
    18b8:	b3 07       	cpc	r27, r19
    18ba:	e4 07       	cpc	r30, r20
    18bc:	f5 07       	cpc	r31, r21
    18be:	20 f0       	brcs	.+8      	; 0x18c8 <__udivmodsi4_ep>
    18c0:	a2 1b       	sub	r26, r18
    18c2:	b3 0b       	sbc	r27, r19
    18c4:	e4 0b       	sbc	r30, r20
    18c6:	f5 0b       	sbc	r31, r21

000018c8 <__udivmodsi4_ep>:
    18c8:	66 1f       	adc	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	1a 94       	dec	r1
    18d2:	69 f7       	brne	.-38     	; 0x18ae <__udivmodsi4_loop>
    18d4:	60 95       	com	r22
    18d6:	70 95       	com	r23
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	9b 01       	movw	r18, r22
    18de:	ac 01       	movw	r20, r24
    18e0:	bd 01       	movw	r22, r26
    18e2:	cf 01       	movw	r24, r30
    18e4:	08 95       	ret

000018e6 <__muldi3_6>:
    18e6:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__umulhisi3>
    18ea:	46 0f       	add	r20, r22
    18ec:	57 1f       	adc	r21, r23
    18ee:	c8 1f       	adc	r28, r24
    18f0:	d9 1f       	adc	r29, r25
    18f2:	08 f4       	brcc	.+2      	; 0x18f6 <__muldi3_6+0x10>
    18f4:	31 96       	adiw	r30, 0x01	; 1
    18f6:	08 95       	ret

000018f8 <_exit>:
    18f8:	f8 94       	cli

000018fa <__stop_program>:
    18fa:	ff cf       	rjmp	.-2      	; 0x18fa <__stop_program>
