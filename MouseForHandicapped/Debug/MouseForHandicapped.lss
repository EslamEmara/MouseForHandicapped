
MouseForHandicapped.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001b8e  00001c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800070  00800070  00001c32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003610  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013df  00000000  00000000  00005600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002515  00000000  00000000  000069df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000758  00000000  00000000  00008ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000106b  00000000  00000000  0000964c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000200e  00000000  00000000  0000a6b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	38 02       	muls	r19, r24
      56:	3b 02       	muls	r19, r27
      58:	32 02       	muls	r19, r18
      5a:	35 02       	muls	r19, r21
      5c:	3e 02       	muls	r19, r30
      5e:	41 02       	muls	r20, r17
      60:	44 02       	muls	r20, r20
      62:	07 63       	ori	r16, 0x37	; 55
      64:	42 36       	cpi	r20, 0x62	; 98
      66:	b7 9b       	sbis	0x16, 7	; 22
      68:	d8 a7       	std	Y+40, r29	; 0x28
      6a:	1a 39       	cpi	r17, 0x9A	; 154
      6c:	68 56       	subi	r22, 0x68	; 104
      6e:	18 ae       	std	Y+56, r1	; 0x38
      70:	ba ab       	std	Y+50, r27	; 0x32
      72:	55 8c       	ldd	r5, Z+29	; 0x1d
      74:	1d 3c       	cpi	r17, 0xCD	; 205
      76:	b7 cc       	rjmp	.-1682   	; 0xfffff9e6 <__eeprom_end+0xff7ef9e6>
      78:	57 63       	ori	r21, 0x37	; 55
      7a:	bd 6d       	ori	r27, 0xDD	; 221
      7c:	ed fd       	.word	0xfded	; ????
      7e:	75 3e       	cpi	r23, 0xE5	; 229
      80:	f6 17       	cp	r31, r22
      82:	72 31       	cpi	r23, 0x12	; 18
      84:	bf 00       	.word	0x00bf	; ????
      86:	00 00       	nop
      88:	80 3f       	cpi	r24, 0xF0	; 240
      8a:	08 00       	.word	0x0008	; ????
      8c:	00 00       	nop
      8e:	be 92       	st	-X, r11
      90:	24 49       	sbci	r18, 0x94	; 148
      92:	12 3e       	cpi	r17, 0xE2	; 226
      94:	ab aa       	std	Y+51, r10	; 0x33
      96:	aa 2a       	or	r10, r26
      98:	be cd       	rjmp	.-1156   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
      9a:	cc cc       	rjmp	.-1640   	; 0xfffffa34 <__eeprom_end+0xff7efa34>
      9c:	4c 3e       	cpi	r20, 0xEC	; 236
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	be ab       	std	Y+54, r27	; 0x36
      a4:	aa aa       	std	Y+50, r10	; 0x32
      a6:	aa 3e       	cpi	r26, 0xEA	; 234
      a8:	00 00       	nop
      aa:	00 00       	nop
      ac:	bf 00       	.word	0x00bf	; ????
      ae:	00 00       	nop
      b0:	80 3f       	cpi	r24, 0xF0	; 240
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	41 78       	andi	r20, 0x81	; 129
      ba:	d3 bb       	out	0x13, r29	; 19
      bc:	43 87       	std	Z+11, r20	; 0x0b
      be:	d1 13       	cpse	r29, r17
      c0:	3d 19       	sub	r19, r13
      c2:	0e 3c       	cpi	r16, 0xCE	; 206
      c4:	c3 bd       	out	0x23, r28	; 35
      c6:	42 82       	std	Z+2, r4	; 0x02
      c8:	ad 2b       	or	r26, r29
      ca:	3e 68       	ori	r19, 0x8E	; 142
      cc:	ec 82       	std	Y+4, r14	; 0x04
      ce:	76 be       	out	0x36, r7	; 54
      d0:	d9 8f       	std	Y+25, r29	; 0x19
      d2:	e1 a9       	ldd	r30, Z+49	; 0x31
      d4:	3e 4c       	sbci	r19, 0xCE	; 206
      d6:	80 ef       	ldi	r24, 0xF0	; 240
      d8:	ff be       	out	0x3f, r15	; 63
      da:	01 c4       	rjmp	.+2050   	; 0x8de <BNO055_ReadBytes+0x32>
      dc:	ff 7f       	andi	r31, 0xFF	; 255
      de:	3f 00       	.word	0x003f	; ????
      e0:	00 00       	nop
	...

000000e4 <__trampolines_end>:
      e4:	05 01       	movw	r0, r10
      e6:	09 02       	muls	r16, r25
      e8:	a1 01       	movw	r20, r2
      ea:	09 01       	movw	r0, r18
      ec:	a1 00       	.word	0x00a1	; ????
      ee:	05 09       	sbc	r16, r5
      f0:	19 01       	movw	r2, r18
      f2:	29 03       	fmul	r18, r17
      f4:	15 00       	.word	0x0015	; ????
      f6:	25 01       	movw	r4, r10
      f8:	95 03       	fmuls	r17, r21
      fa:	75 01       	movw	r14, r10
      fc:	81 02       	muls	r24, r17
      fe:	95 01       	movw	r18, r10
     100:	75 05       	cpc	r23, r5
     102:	81 03       	fmuls	r16, r17
     104:	05 01       	movw	r0, r10
     106:	09 30       	cpi	r16, 0x09	; 9
     108:	09 31       	cpi	r16, 0x19	; 25
     10a:	09 38       	cpi	r16, 0x89	; 137
     10c:	15 81       	ldd	r17, Z+5	; 0x05
     10e:	25 7f       	andi	r18, 0xF5	; 245
     110:	75 08       	sbc	r7, r5
     112:	95 03       	fmuls	r17, r21
     114:	81 06       	cpc	r8, r17
     116:	c0 c0       	rjmp	.+384    	; 0x298 <rxbit2+0x2>

00000118 <usbDescriptorConfiguration>:
     118:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
     128:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
     138:	00 64                                               .d

0000013a <usbDescriptorDevice>:
     13a:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
     14a:	00 01                                               ..

0000014c <usbDescriptorStringDevice>:
     14c:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

00000158 <usbDescriptorStringVendor>:
     158:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
     168:	74 00                                               t.

0000016a <usbDescriptorString0>:
     16a:	04 03 09 04                                         ....

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf e5       	ldi	r28, 0x5F	; 95
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	a0 e6       	ldi	r26, 0x60	; 96
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	ee e8       	ldi	r30, 0x8E	; 142
     182:	fb e1       	ldi	r31, 0x1B	; 27
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 37       	cpi	r26, 0x70	; 112
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	a0 e7       	ldi	r26, 0x70	; 112
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ac 3b       	cpi	r26, 0xBC	; 188
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 93 06 	call	0xd26	; 0xd26 <main>
     1a4:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <usbCrc16>:
     1ac:	a8 2f       	mov	r26, r24
     1ae:	b9 2f       	mov	r27, r25
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	41 e0       	ldi	r20, 0x01	; 1
     1b6:	50 ea       	ldi	r21, 0xA0	; 160
     1b8:	60 95       	com	r22
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <usbCrcLoopEntry>

000001be <usbCrcByteLoop>:
     1be:	2d 91       	ld	r18, X+
     1c0:	82 27       	eor	r24, r18

000001c2 <usbCrcBitLoop>:
     1c2:	97 95       	ror	r25
     1c4:	87 95       	ror	r24
     1c6:	10 f0       	brcs	.+4      	; 0x1cc <usbCrcNoXor>
     1c8:	84 27       	eor	r24, r20
     1ca:	95 27       	eor	r25, r21

000001cc <usbCrcNoXor>:
     1cc:	30 5e       	subi	r19, 0xE0	; 224
     1ce:	c8 f3       	brcs	.-14     	; 0x1c2 <usbCrcBitLoop>

000001d0 <usbCrcLoopEntry>:
     1d0:	6f 5f       	subi	r22, 0xFF	; 255
     1d2:	a8 f3       	brcs	.-22     	; 0x1be <usbCrcByteLoop>

000001d4 <usbCrcReady>:
     1d4:	08 95       	ret

000001d6 <usbCrc16Append>:
     1d6:	ea df       	rcall	.-44     	; 0x1ac <usbCrc16>
     1d8:	8d 93       	st	X+, r24
     1da:	9d 93       	st	X+, r25
     1dc:	08 95       	ret

000001de <__vector_1>:
     1de:	cf 93       	push	r28
     1e0:	cf b7       	in	r28, 0x3f	; 63
     1e2:	cf 93       	push	r28

000001e4 <waitForJ>:
     1e4:	c3 95       	inc	r28
     1e6:	84 9b       	sbis	0x10, 4	; 16
     1e8:	e9 f7       	brne	.-6      	; 0x1e4 <waitForJ>

000001ea <waitForK>:
     1ea:	84 9b       	sbis	0x10, 4	; 16
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <foundK>
     1ee:	84 9b       	sbis	0x10, 4	; 16
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <foundK>
     1f2:	84 9b       	sbis	0x10, 4	; 16
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <foundK>
     1f6:	84 9b       	sbis	0x10, 4	; 16
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <foundK>
     1fa:	84 9b       	sbis	0x10, 4	; 16
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <foundK>
     1fe:	a3 c0       	rjmp	.+326    	; 0x346 <sofError>

00000200 <foundK>:
     200:	df 93       	push	r29
     202:	c0 91 9f 00 	lds	r28, 0x009F	; 0x80009f <usbInputBufOffset>
     206:	dd 27       	eor	r29, r29
     208:	ca 55       	subi	r28, 0x5A	; 90
     20a:	df 4f       	sbci	r29, 0xFF	; 255
     20c:	84 9b       	sbis	0x10, 4	; 16
     20e:	02 c0       	rjmp	.+4      	; 0x214 <haveTwoBitsK>
     210:	df 91       	pop	r29
     212:	eb cf       	rjmp	.-42     	; 0x1ea <waitForK>

00000214 <haveTwoBitsK>:
     214:	2f 93       	push	r18
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	00 b3       	in	r16, 0x10	; 16
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	04 fb       	bst	r16, 4
     220:	20 f9       	bld	r18, 0
     222:	4f 93       	push	r20
     224:	3f 93       	push	r19
     226:	10 b3       	in	r17, 0x10	; 16
     228:	4f ef       	ldi	r20, 0xFF	; 255
     22a:	01 27       	eor	r16, r17
     22c:	04 fb       	bst	r16, 4
     22e:	21 f9       	bld	r18, 1
     230:	3b e0       	ldi	r19, 0x0B	; 11
     232:	31 c0       	rjmp	.+98     	; 0x296 <rxbit2>

00000234 <unstuff0>:
     234:	4e 7f       	andi	r20, 0xFE	; 254
     236:	01 2f       	mov	r16, r17
     238:	10 b3       	in	r17, 0x10	; 16
     23a:	21 60       	ori	r18, 0x01	; 1
     23c:	28 c0       	rjmp	.+80     	; 0x28e <didUnstuff0>

0000023e <unstuff1>:
     23e:	10 2f       	mov	r17, r16
     240:	4d 7f       	andi	r20, 0xFD	; 253
     242:	22 60       	ori	r18, 0x02	; 2
     244:	00 00       	nop
     246:	00 b3       	in	r16, 0x10	; 16
     248:	29 c0       	rjmp	.+82     	; 0x29c <didUnstuff1>

0000024a <unstuff2>:
     24a:	4b 7f       	andi	r20, 0xFB	; 251
     24c:	24 60       	ori	r18, 0x04	; 4
     24e:	01 2f       	mov	r16, r17
     250:	00 00       	nop
     252:	10 b3       	in	r17, 0x10	; 16
     254:	2b c0       	rjmp	.+86     	; 0x2ac <didUnstuff2>

00000256 <unstuff3>:
     256:	10 b3       	in	r17, 0x10	; 16
     258:	47 7f       	andi	r20, 0xF7	; 247
     25a:	28 60       	ori	r18, 0x08	; 8
     25c:	2a c0       	rjmp	.+84     	; 0x2b2 <didUnstuff3>

0000025e <unstuff4>:
     25e:	4f 7e       	andi	r20, 0xEF	; 239
     260:	00 b3       	in	r16, 0x10	; 16
     262:	20 61       	ori	r18, 0x10	; 16
     264:	2c c0       	rjmp	.+88     	; 0x2be <didUnstuff4>

00000266 <unstuff5>:
     266:	4f 7d       	andi	r20, 0xDF	; 223
     268:	10 b3       	in	r17, 0x10	; 16
     26a:	20 62       	ori	r18, 0x20	; 32
     26c:	2f c0       	rjmp	.+94     	; 0x2cc <didUnstuff5>

0000026e <unstuff6>:
     26e:	4f 7b       	andi	r20, 0xBF	; 191
     270:	00 b3       	in	r16, 0x10	; 16
     272:	20 64       	ori	r18, 0x40	; 64
     274:	32 c0       	rjmp	.+100    	; 0x2da <didUnstuff6>

00000276 <rxLoop>:
     276:	42 27       	eor	r20, r18
     278:	00 b3       	in	r16, 0x10	; 16
     27a:	49 93       	st	Y+, r20
     27c:	4f ef       	ldi	r20, 0xFF	; 255
     27e:	00 00       	nop
     280:	10 27       	eor	r17, r16
     282:	14 fb       	bst	r17, 4
     284:	20 f9       	bld	r18, 0
     286:	10 b3       	in	r17, 0x10	; 16
     288:	14 71       	andi	r17, 0x14	; 20
     28a:	c9 f1       	breq	.+114    	; 0x2fe <se0>
     28c:	29 7f       	andi	r18, 0xF9	; 249

0000028e <didUnstuff0>:
     28e:	91 f2       	breq	.-92     	; 0x234 <unstuff0>
     290:	01 27       	eor	r16, r17
     292:	04 fb       	bst	r16, 4
     294:	21 f9       	bld	r18, 1

00000296 <rxbit2>:
     296:	00 b3       	in	r16, 0x10	; 16
     298:	23 7f       	andi	r18, 0xF3	; 243
     29a:	89 f2       	breq	.-94     	; 0x23e <unstuff1>

0000029c <didUnstuff1>:
     29c:	31 50       	subi	r19, 0x01	; 1
     29e:	58 f1       	brcs	.+86     	; 0x2f6 <overflow>
     2a0:	10 27       	eor	r17, r16
     2a2:	14 fb       	bst	r17, 4
     2a4:	22 f9       	bld	r18, 2
     2a6:	10 b3       	in	r17, 0x10	; 16
     2a8:	27 7e       	andi	r18, 0xE7	; 231
     2aa:	79 f2       	breq	.-98     	; 0x24a <unstuff2>

000002ac <didUnstuff2>:
     2ac:	01 27       	eor	r16, r17
     2ae:	04 fb       	bst	r16, 4
     2b0:	23 f9       	bld	r18, 3

000002b2 <didUnstuff3>:
     2b2:	2f 7c       	andi	r18, 0xCF	; 207
     2b4:	81 f2       	breq	.-96     	; 0x256 <unstuff3>
     2b6:	00 b3       	in	r16, 0x10	; 16
     2b8:	10 27       	eor	r17, r16
     2ba:	14 fb       	bst	r17, 4
     2bc:	24 f9       	bld	r18, 4

000002be <didUnstuff4>:
     2be:	2f 79       	andi	r18, 0x9F	; 159
     2c0:	71 f2       	breq	.-100    	; 0x25e <unstuff4>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <didUnstuff4+0x6>
     2c4:	10 b3       	in	r17, 0x10	; 16
     2c6:	01 27       	eor	r16, r17
     2c8:	04 fb       	bst	r16, 4
     2ca:	25 f9       	bld	r18, 5

000002cc <didUnstuff5>:
     2cc:	2f 73       	andi	r18, 0x3F	; 63
     2ce:	59 f2       	breq	.-106    	; 0x266 <unstuff5>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <didUnstuff5+0x6>
     2d2:	00 b3       	in	r16, 0x10	; 16
     2d4:	10 27       	eor	r17, r16
     2d6:	14 fb       	bst	r17, 4
     2d8:	26 f9       	bld	r18, 6

000002da <didUnstuff6>:
     2da:	22 30       	cpi	r18, 0x02	; 2
     2dc:	40 f2       	brcs	.-112    	; 0x26e <unstuff6>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <didUnstuff6+0x6>
     2e0:	10 b3       	in	r17, 0x10	; 16
     2e2:	01 27       	eor	r16, r17
     2e4:	04 fb       	bst	r16, 4
     2e6:	27 f9       	bld	r18, 7

000002e8 <didUnstuff7>:
     2e8:	24 30       	cpi	r18, 0x04	; 4
     2ea:	28 f6       	brcc	.-118    	; 0x276 <rxLoop>

000002ec <unstuff7>:
     2ec:	4f 77       	andi	r20, 0x7F	; 127
     2ee:	20 68       	ori	r18, 0x80	; 128
     2f0:	10 b3       	in	r17, 0x10	; 16
     2f2:	00 00       	nop
     2f4:	f9 cf       	rjmp	.-14     	; 0x2e8 <didUnstuff7>

000002f6 <overflow>:
     2f6:	10 e4       	ldi	r17, 0x40	; 64
     2f8:	1a bf       	out	0x3a, r17	; 58

000002fa <ignorePacket>:
     2fa:	00 27       	eor	r16, r16
     2fc:	19 c0       	rjmp	.+50     	; 0x330 <handleSetupOrOut>

000002fe <se0>:
     2fe:	3b 50       	subi	r19, 0x0B	; 11
     300:	31 95       	neg	r19
     302:	c3 1b       	sub	r28, r19
     304:	d0 40       	sbci	r29, 0x00	; 0
     306:	10 e4       	ldi	r17, 0x40	; 64
     308:	1a bf       	out	0x3a, r17	; 58
     30a:	08 81       	ld	r16, Y
     30c:	03 3c       	cpi	r16, 0xC3	; 195
     30e:	f9 f0       	breq	.+62     	; 0x34e <handleData>
     310:	0b 34       	cpi	r16, 0x4B	; 75
     312:	e9 f0       	breq	.+58     	; 0x34e <handleData>
     314:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <usbDeviceAddr>
     318:	19 81       	ldd	r17, Y+1	; 0x01
     31a:	11 0f       	add	r17, r17
     31c:	12 13       	cpse	r17, r18
     31e:	ed cf       	rjmp	.-38     	; 0x2fa <ignorePacket>
     320:	4a 81       	ldd	r20, Y+2	; 0x02
     322:	44 1f       	adc	r20, r20
     324:	09 36       	cpi	r16, 0x69	; 105
     326:	41 f1       	breq	.+80     	; 0x378 <handleIn>
     328:	0d 32       	cpi	r16, 0x2D	; 45
     32a:	11 f0       	breq	.+4      	; 0x330 <handleSetupOrOut>
     32c:	01 3e       	cpi	r16, 0xE1	; 225
     32e:	29 f7       	brne	.-54     	; 0x2fa <ignorePacket>

00000330 <handleSetupOrOut>:
     330:	00 93 a4 00 	sts	0x00A4, r16	; 0x8000a4 <usbCurrentTok>

00000334 <doReturn>:
     334:	3f 91       	pop	r19
     336:	4f 91       	pop	r20
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	2f 91       	pop	r18
     33e:	df 91       	pop	r29
     340:	ca b7       	in	r28, 0x3a	; 58
     342:	c6 fd       	sbrc	r28, 6
     344:	4f cf       	rjmp	.-354    	; 0x1e4 <waitForJ>

00000346 <sofError>:
     346:	cf 91       	pop	r28
     348:	cf bf       	out	0x3f, r28	; 63
     34a:	cf 91       	pop	r28
     34c:	18 95       	reti

0000034e <handleData>:
     34e:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <usbCurrentTok>
     352:	22 23       	and	r18, r18
     354:	79 f3       	breq	.-34     	; 0x334 <doReturn>
     356:	10 91 a2 00 	lds	r17, 0x00A2	; 0x8000a2 <usbRxLen>
     35a:	11 23       	and	r17, r17
     35c:	69 f5       	brne	.+90     	; 0x3b8 <sendNakAndReti>
     35e:	34 30       	cpi	r19, 0x04	; 4
     360:	6a f1       	brmi	.+90     	; 0x3bc <sendAckAndReti>
     362:	30 93 a2 00 	sts	0x00A2, r19	; 0x8000a2 <usbRxLen>
     366:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <usbRxToken>
     36a:	10 91 9f 00 	lds	r17, 0x009F	; 0x80009f <usbInputBufOffset>
     36e:	3b e0       	ldi	r19, 0x0B	; 11
     370:	31 1b       	sub	r19, r17
     372:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <usbInputBufOffset>
     376:	22 c0       	rjmp	.+68     	; 0x3bc <sendAckAndReti>

00000378 <handleIn>:
     378:	00 91 a2 00 	lds	r16, 0x00A2	; 0x8000a2 <usbRxLen>
     37c:	01 30       	cpi	r16, 0x01	; 1
     37e:	e4 f4       	brge	.+56     	; 0x3b8 <sendNakAndReti>
     380:	0a e5       	ldi	r16, 0x5A	; 90
     382:	4f 70       	andi	r20, 0x0F	; 15
     384:	49 f4       	brne	.+18     	; 0x398 <handleIn1>
     386:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <usbTxLen>
     38a:	34 fd       	sbrc	r19, 4
     38c:	19 c0       	rjmp	.+50     	; 0x3c0 <sendCntAndReti>
     38e:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <usbTxLen>
     392:	c6 e8       	ldi	r28, 0x86	; 134
     394:	d0 e0       	ldi	r29, 0x00	; 0
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <usbSendAndReti>

00000398 <handleIn1>:
     398:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <usbTxStatus1>
     39c:	34 fd       	sbrc	r19, 4
     39e:	10 c0       	rjmp	.+32     	; 0x3c0 <sendCntAndReti>
     3a0:	00 93 91 00 	sts	0x0091, r16	; 0x800091 <usbTxStatus1>
     3a4:	c2 e9       	ldi	r28, 0x92	; 146
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <usbSendAndReti>

000003aa <stuffN1Delay>:
     3aa:	27 95       	ror	r18
     3ac:	a8 f4       	brcc	.+42     	; 0x3d8 <doExorN1>
     3ae:	51 50       	subi	r21, 0x01	; 1
     3b0:	a9 f4       	brne	.+42     	; 0x3dc <commonN1>
     3b2:	22 0f       	add	r18, r18
     3b4:	00 00       	nop
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <stuffN1Delay>

000003b8 <sendNakAndReti>:
     3b8:	4a e5       	ldi	r20, 0x5A	; 90
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <usbSendX3>

000003bc <sendAckAndReti>:
     3bc:	42 ed       	ldi	r20, 0xD2	; 210
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <usbSendX3>

000003c0 <sendCntAndReti>:
     3c0:	43 2f       	mov	r20, r19

000003c2 <usbSendX3>:
     3c2:	c4 e1       	ldi	r28, 0x14	; 20
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	32 e0       	ldi	r19, 0x02	; 2

000003c8 <usbSendAndReti>:
     3c8:	11 b3       	in	r17, 0x11	; 17
     3ca:	14 61       	ori	r17, 0x14	; 20
     3cc:	94 9a       	sbi	0x12, 4	; 18
     3ce:	11 bb       	out	0x11, r17	; 17
     3d0:	02 b3       	in	r16, 0x12	; 18
     3d2:	20 e4       	ldi	r18, 0x40	; 64
     3d4:	14 e1       	ldi	r17, 0x14	; 20
     3d6:	5f 93       	push	r21

000003d8 <doExorN1>:
     3d8:	01 27       	eor	r16, r17
     3da:	56 e0       	ldi	r21, 0x06	; 6

000003dc <commonN1>:
     3dc:	02 bb       	out	0x12, r16	; 18
     3de:	27 95       	ror	r18
     3e0:	20 f4       	brcc	.+8      	; 0x3ea <doExorN2>
     3e2:	51 50       	subi	r21, 0x01	; 1
     3e4:	21 f4       	brne	.+8      	; 0x3ee <commonN2>
     3e6:	22 0f       	add	r18, r18
     3e8:	f9 cf       	rjmp	.-14     	; 0x3dc <commonN1>

000003ea <doExorN2>:
     3ea:	01 27       	eor	r16, r17
     3ec:	56 e0       	ldi	r21, 0x06	; 6

000003ee <commonN2>:
     3ee:	00 00       	nop
     3f0:	3b 5a       	subi	r19, 0xAB	; 171
     3f2:	02 bb       	out	0x12, r16	; 18
     3f4:	d0 f2       	brcs	.-76     	; 0x3aa <stuffN1Delay>

000003f6 <stuff6Delay>:
     3f6:	27 95       	ror	r18
     3f8:	28 f4       	brcc	.+10     	; 0x404 <doExor6>
     3fa:	51 50       	subi	r21, 0x01	; 1
     3fc:	29 f4       	brne	.+10     	; 0x408 <common6>
     3fe:	22 0f       	add	r18, r18
     400:	00 00       	nop
     402:	f9 cf       	rjmp	.-14     	; 0x3f6 <stuff6Delay>

00000404 <doExor6>:
     404:	01 27       	eor	r16, r17
     406:	56 e0       	ldi	r21, 0x06	; 6

00000408 <common6>:
     408:	27 95       	ror	r18
     40a:	02 bb       	out	0x12, r16	; 18
     40c:	20 f4       	brcc	.+8      	; 0x416 <doExor7>
     40e:	51 50       	subi	r21, 0x01	; 1
     410:	21 f4       	brne	.+8      	; 0x41a <common7>
     412:	22 0f       	add	r18, r18
     414:	f9 cf       	rjmp	.-14     	; 0x408 <common6>

00000416 <doExor7>:
     416:	01 27       	eor	r16, r17
     418:	56 e0       	ldi	r21, 0x06	; 6

0000041a <common7>:
     41a:	29 91       	ld	r18, Y+
     41c:	33 23       	and	r19, r19
     41e:	02 bb       	out	0x12, r16	; 18
     420:	21 f6       	brne	.-120    	; 0x3aa <stuffN1Delay>
     422:	0b 7e       	andi	r16, 0xEB	; 235
     424:	10 91 a3 00 	lds	r17, 0x00A3	; 0x8000a3 <usbNewDeviceAddr>
     428:	11 0f       	add	r17, r17
     42a:	c6 51       	subi	r28, 0x16	; 22
     42c:	d0 40       	sbci	r29, 0x00	; 0
     42e:	02 bb       	out	0x12, r16	; 18
     430:	11 f0       	breq	.+4      	; 0x436 <skipAddrAssign>
     432:	10 93 9d 00 	sts	0x009D, r17	; 0x80009d <usbDeviceAddr>

00000436 <skipAddrAssign>:
     436:	10 e4       	ldi	r17, 0x40	; 64
     438:	1a bf       	out	0x3a, r17	; 58
     43a:	00 61       	ori	r16, 0x10	; 16
     43c:	11 b3       	in	r17, 0x11	; 17
     43e:	1b 7e       	andi	r17, 0xEB	; 235
     440:	40 2f       	mov	r20, r16
     442:	4b 7e       	andi	r20, 0xEB	; 235
     444:	5f 91       	pop	r21
     446:	00 c0       	rjmp	.+0      	; 0x448 <skipAddrAssign+0x12>
     448:	00 c0       	rjmp	.+0      	; 0x44a <skipAddrAssign+0x14>
     44a:	02 bb       	out	0x12, r16	; 18
     44c:	11 bb       	out	0x11, r17	; 17
     44e:	42 bb       	out	0x12, r20	; 18
     450:	71 cf       	rjmp	.-286    	; 0x334 <doReturn>

00000452 <App_OrderMouse>:
	if( sensor_S>LOW_CALIBRATED && sensor_G>LOW_CALIBRATED && sensor_A>LOW_CALIBRATED && sensor_M>LOW_CALIBRATED )
	{
		return CALIBRATED;
	}
	return NOT_CALIBRATED;
}
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	87 30       	cpi	r24, 0x07	; 7
     456:	91 05       	cpc	r25, r1
     458:	f8 f4       	brcc	.+62     	; 0x498 <App_OrderMouse+0x46>
     45a:	fc 01       	movw	r30, r24
     45c:	e6 5d       	subi	r30, 0xD6	; 214
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__tablejump2__>
     464:	0e 94 72 06 	call	0xce4	; 0xce4 <Mouse_MoveLeft>
     468:	08 95       	ret
     46a:	0e 94 76 06 	call	0xcec	; 0xcec <Mouse_MoveRight>
     46e:	08 95       	ret
     470:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <Mouse_MoveUp>
     474:	08 95       	ret
     476:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Mouse_MoveDown>
     47a:	08 95       	ret
     47c:	0e 94 86 06 	call	0xd0c	; 0xd0c <Mouse_LeftClick>
     480:	08 95       	ret
     482:	0e 94 82 06 	call	0xd04	; 0xd04 <Mouse_RightClick>
     486:	08 95       	ret
     488:	0e 94 86 06 	call	0xd0c	; 0xd0c <Mouse_LeftClick>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Delay_ms_independent>
     494:	0e 94 86 06 	call	0xd0c	; 0xd0c <Mouse_LeftClick>
     498:	08 95       	ret

0000049a <App_GetTouchSensorState>:
     49a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <Touch_Read>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	51 f4       	brne	.+20     	; 0x4be <App_GetTouchSensorState+0x24>
     4aa:	8b b3       	in	r24, 0x1b	; 27
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	0e 94 ed 05 	call	0xbda	; 0xbda <LED_TurnOn>
     4b2:	8b b3       	in	r24, 0x1b	; 27
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LED_TurnOff>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret
     4be:	8b b3       	in	r24, 0x1b	; 27
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LED_TurnOff>
     4c6:	8b b3       	in	r24, 0x1b	; 27
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	0e 94 ed 05 	call	0xbda	; 0xbda <LED_TurnOn>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <App_SetReference>:
     4d2:	cf 93       	push	r28
     4d4:	0e 94 4d 02 	call	0x49a	; 0x49a <App_GetTouchSensorState>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	71 f4       	brne	.+28     	; 0x4f8 <App_SetReference+0x26>
     4dc:	80 ed       	ldi	r24, 0xD0	; 208
     4de:	97 e0       	ldi	r25, 0x07	; 7
     4e0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Delay_ms_independent>
     4e4:	0e 94 4d 02 	call	0x49a	; 0x49a <App_GetTouchSensorState>
     4e8:	c8 2f       	mov	r28, r24
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	39 f4       	brne	.+14     	; 0x4fc <App_SetReference+0x2a>
     4ee:	86 e7       	ldi	r24, 0x76	; 118
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 a2 04 	call	0x944	; 0x944 <BNO055_ReadEulerAngles>
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <App_SetReference+0x2c>
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <App_SetReference+0x2c>
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	8c 2f       	mov	r24, r28
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <App_Init>:
     504:	8b b3       	in	r24, 0x1b	; 27
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LED_Init>
     50c:	8b b3       	in	r24, 0x1b	; 27
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 ed 05 	call	0xbda	; 0xbda <LED_TurnOn>
     514:	8b b3       	in	r24, 0x1b	; 27
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LED_Init>
     51c:	0e 94 60 05 	call	0xac0	; 0xac0 <BNO055_Init>
     520:	0e 94 55 06 	call	0xcaa	; 0xcaa <Mouse_init>
     524:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     528:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     52c:	0e 94 8a 06 	call	0xd14	; 0xd14 <Touch_Init>
     530:	0e 94 69 02 	call	0x4d2	; 0x4d2 <App_SetReference>
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	e1 f7       	brne	.-8      	; 0x530 <App_Init+0x2c>
     538:	08 95       	ret

0000053a <App_GetLargestAngle>:
 * Ex: index = App_GetLargestAngle(54,21,100); -> index=3
 */
u8_t App_GetLargestAngle(s16_t value1,s16_t value2,s16_t value3)
{ // yaw roll pitch
	
	if (value1 > 180) value1-=360;
     53a:	85 3b       	cpi	r24, 0xB5	; 181
     53c:	91 05       	cpc	r25, r1
     53e:	14 f0       	brlt	.+4      	; 0x544 <App_GetLargestAngle+0xa>
     540:	88 56       	subi	r24, 0x68	; 104
     542:	91 40       	sbci	r25, 0x01	; 1
	if (value2 > 180) value2-=360;
     544:	65 3b       	cpi	r22, 0xB5	; 181
     546:	71 05       	cpc	r23, r1
     548:	14 f0       	brlt	.+4      	; 0x54e <App_GetLargestAngle+0x14>
     54a:	68 56       	subi	r22, 0x68	; 104
     54c:	71 40       	sbci	r23, 0x01	; 1
	if (value3 > 180) value3-=360;
     54e:	45 3b       	cpi	r20, 0xB5	; 181
     550:	51 05       	cpc	r21, r1
     552:	14 f0       	brlt	.+4      	; 0x558 <App_GetLargestAngle+0x1e>
     554:	48 56       	subi	r20, 0x68	; 104
     556:	51 40       	sbci	r21, 0x01	; 1
	
	value1 = abs(value1);
     558:	9c 01       	movw	r18, r24
     55a:	99 23       	and	r25, r25
     55c:	24 f4       	brge	.+8      	; 0x566 <App_GetLargestAngle+0x2c>
     55e:	22 27       	eor	r18, r18
     560:	33 27       	eor	r19, r19
     562:	28 1b       	sub	r18, r24
     564:	39 0b       	sbc	r19, r25
	value2 = abs(value2);
     566:	cb 01       	movw	r24, r22
     568:	99 23       	and	r25, r25
     56a:	24 f4       	brge	.+8      	; 0x574 <App_GetLargestAngle+0x3a>
     56c:	88 27       	eor	r24, r24
     56e:	99 27       	eor	r25, r25
     570:	86 1b       	sub	r24, r22
     572:	97 0b       	sbc	r25, r23
	value3 = abs(value3);
     574:	ba 01       	movw	r22, r20
     576:	55 23       	and	r21, r21
     578:	24 f4       	brge	.+8      	; 0x582 <App_GetLargestAngle+0x48>
     57a:	66 27       	eor	r22, r22
     57c:	77 27       	eor	r23, r23
     57e:	64 1b       	sub	r22, r20
     580:	75 0b       	sbc	r23, r21
	
	if(value1 > value2)
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	2c f4       	brge	.+10     	; 0x592 <App_GetLargestAngle+0x58>
	{
		if(value1 > value3)   { return 1; }
     588:	62 17       	cp	r22, r18
     58a:	73 07       	cpc	r23, r19
     58c:	3c f4       	brge	.+14     	; 0x59c <App_GetLargestAngle+0x62>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	08 95       	ret
		else          { return 3; }
	}
	else
	{
		if(value2 > value3)   { return 2; }
     592:	68 17       	cp	r22, r24
     594:	79 07       	cpc	r23, r25
     596:	24 f4       	brge	.+8      	; 0x5a0 <App_GetLargestAngle+0x66>
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	08 95       	ret
	value3 = abs(value3);
	
	if(value1 > value2)
	{
		if(value1 > value3)   { return 1; }
		else          { return 3; }
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	08 95       	ret
	}
	else
	{
		if(value2 > value3)   { return 2; }
		else          { return 3; }
     5a0:	83 e0       	ldi	r24, 0x03	; 3
	}
     5a2:	08 95       	ret

000005a4 <App_GetImuGradient>:
 * Args: None
 * Return: u8_t gradient_Direction -> (LEFT, RIGHT, UP, DOWN)
 * Ex: u8_t direction = App_GetImuGradient();
 */
u8_t App_GetImuGradient(void)
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <App_GetImuGradient+0x6>
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <App_GetImuGradient+0x8>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <App_GetImuGradient+0xa>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	s16_t absolute_gradient[3]; // current_reading - reference_point
	//-- get current imu reading
	BNO055_ReadEulerAngles(current_reading);
     5b2:	80 e7       	ldi	r24, 0x70	; 112
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 a2 04 	call	0x944	; 0x944 <BNO055_ReadEulerAngles>
	//-- compare this reading to calibration point to know imu (head) gradient
	absolute_gradient[0] = current_reading[0] - reference_angles[0];
     5ba:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     5be:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     5c2:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <reference_angles>
     5c6:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <reference_angles+0x1>
     5ca:	82 1b       	sub	r24, r18
     5cc:	93 0b       	sbc	r25, r19
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	89 83       	std	Y+1, r24	; 0x01
	if (absolute_gradient[0] < 0 ){
     5d2:	99 23       	and	r25, r25
     5d4:	24 f4       	brge	.+8      	; 0x5de <App_GetImuGradient+0x3a>
		absolute_gradient[0] +=360;
     5d6:	88 59       	subi	r24, 0x98	; 152
     5d8:	9e 4f       	sbci	r25, 0xFE	; 254
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
	}
	absolute_gradient[1] = current_reading[1] - reference_angles[1];
     5de:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end+0x2>
     5e2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x3>
     5e6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <reference_angles+0x2>
     5ea:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <reference_angles+0x3>
     5ee:	82 1b       	sub	r24, r18
     5f0:	93 0b       	sbc	r25, r19
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
	if (absolute_gradient[1] < 0 ){
     5f6:	99 23       	and	r25, r25
     5f8:	24 f4       	brge	.+8      	; 0x602 <App_GetImuGradient+0x5e>
		absolute_gradient[1] +=360;
     5fa:	88 59       	subi	r24, 0x98	; 152
     5fc:	9e 4f       	sbci	r25, 0xFE	; 254
     5fe:	9c 83       	std	Y+4, r25	; 0x04
     600:	8b 83       	std	Y+3, r24	; 0x03
	}
	absolute_gradient[2] = current_reading[2] - reference_angles[2];
     602:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end+0x4>
     606:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x5>
     60a:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <reference_angles+0x4>
     60e:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <reference_angles+0x5>
     612:	82 1b       	sub	r24, r18
     614:	93 0b       	sbc	r25, r19
     616:	9e 83       	std	Y+6, r25	; 0x06
     618:	8d 83       	std	Y+5, r24	; 0x05
	if (absolute_gradient[2] < 0 ){
     61a:	99 23       	and	r25, r25
     61c:	24 f4       	brge	.+8      	; 0x626 <App_GetImuGradient+0x82>
		absolute_gradient[2] +=360;
     61e:	88 59       	subi	r24, 0x98	; 152
     620:	9e 4f       	sbci	r25, 0xFE	; 254
     622:	9e 83       	std	Y+6, r25	; 0x06
     624:	8d 83       	std	Y+5, r24	; 0x05
	}
	//-- decide depending on calculations to which direction mouse should move
	// get the largest angle of them (sign isn't considered)
	u8_t angle_name = App_GetLargestAngle(absolute_gradient[0],absolute_gradient[1],absolute_gradient[2]);
     626:	4d 81       	ldd	r20, Y+5	; 0x05
     628:	5e 81       	ldd	r21, Y+6	; 0x06
     62a:	6b 81       	ldd	r22, Y+3	; 0x03
     62c:	7c 81       	ldd	r23, Y+4	; 0x04
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	0e 94 9d 02 	call	0x53a	; 0x53a <App_GetLargestAngle>
	
	// change period to set cursor speed
	switch (absolute_gradient[angle_name-1])
     636:	e8 2f       	mov	r30, r24
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	2c 0f       	add	r18, r28
     646:	3d 1f       	adc	r19, r29
     648:	e2 0f       	add	r30, r18
     64a:	f3 1f       	adc	r31, r19
     64c:	20 81       	ld	r18, Z
     64e:	31 81       	ldd	r19, Z+1	; 0x01
     650:	2b 35       	cpi	r18, 0x5B	; 91
     652:	31 05       	cpc	r19, r1
     654:	6c f4       	brge	.+26     	; 0x670 <App_GetImuGradient+0xcc>
     656:	2c 34       	cpi	r18, 0x4C	; 76
     658:	31 05       	cpc	r19, r1
     65a:	a4 f5       	brge	.+104    	; 0x6c4 <App_GetImuGradient+0x120>
     65c:	23 33       	cpi	r18, 0x33	; 51
     65e:	31 05       	cpc	r19, r1
     660:	54 f5       	brge	.+84     	; 0x6b6 <App_GetImuGradient+0x112>
     662:	24 32       	cpi	r18, 0x24	; 36
     664:	31 05       	cpc	r19, r1
     666:	04 f5       	brge	.+64     	; 0x6a8 <App_GetImuGradient+0x104>
     668:	24 31       	cpi	r18, 0x14	; 20
     66a:	31 05       	cpc	r19, r1
     66c:	8c f1       	brlt	.+98     	; 0x6d0 <App_GetImuGradient+0x12c>
     66e:	15 c0       	rjmp	.+42     	; 0x69a <App_GetImuGradient+0xf6>
     670:	26 33       	cpi	r18, 0x36	; 54
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	39 07       	cpc	r19, r25
     676:	4c f4       	brge	.+18     	; 0x68a <App_GetImuGradient+0xe6>
     678:	2d 31       	cpi	r18, 0x1D	; 29
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	39 07       	cpc	r19, r25
     67e:	dc f4       	brge	.+54     	; 0x6b6 <App_GetImuGradient+0x112>
     680:	2e 30       	cpi	r18, 0x0E	; 14
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	39 07       	cpc	r19, r25
     686:	f4 f4       	brge	.+60     	; 0x6c4 <App_GetImuGradient+0x120>
     688:	23 c0       	rjmp	.+70     	; 0x6d0 <App_GetImuGradient+0x12c>
     68a:	25 34       	cpi	r18, 0x45	; 69
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	39 07       	cpc	r19, r25
     690:	5c f0       	brlt	.+22     	; 0x6a8 <App_GetImuGradient+0x104>
     692:	25 35       	cpi	r18, 0x55	; 85
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	39 07       	cpc	r19, r25
     698:	dc f4       	brge	.+54     	; 0x6d0 <App_GetImuGradient+0x12c>
	{
		// 20 -> threshold
		case 20 ... 35:
		case 325 ... 340:
		cursor_speed = 1;
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	50 93 7d 00 	sts	0x007D, r21	; 0x80007d <cursor_speed+0x1>
     6a2:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <cursor_speed>
		break;
     6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <App_GetImuGradient+0x12c>
		case 36 ... 50:
		case 310 ... 324:
		cursor_speed = 3;
     6a8:	43 e0       	ldi	r20, 0x03	; 3
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	50 93 7d 00 	sts	0x007D, r21	; 0x80007d <cursor_speed+0x1>
     6b0:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <cursor_speed>
		break;
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <App_GetImuGradient+0x12c>
		case 51 ... 75: // larger than 60
		case 285 ... 309:
		cursor_speed = 5;
     6b6:	45 e0       	ldi	r20, 0x05	; 5
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	50 93 7d 00 	sts	0x007D, r21	; 0x80007d <cursor_speed+0x1>
     6be:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <cursor_speed>
		break;
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <App_GetImuGradient+0x12c>
		case 76 ... 90: // larger than 60
		case 270 ... 284:
		cursor_speed = 7;
     6c4:	47 e0       	ldi	r20, 0x07	; 7
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	50 93 7d 00 	sts	0x007D, r21	; 0x80007d <cursor_speed+0x1>
     6cc:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <cursor_speed>
		break;
	}
	if (absolute_gradient[angle_name-1] < THRESHOLD || absolute_gradient[angle_name-1] > 360 - THRESHOLD){
     6d0:	24 51       	subi	r18, 0x14	; 20
     6d2:	31 09       	sbc	r19, r1
     6d4:	21 34       	cpi	r18, 0x41	; 65
     6d6:	31 40       	sbci	r19, 0x01	; 1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <App_GetImuGradient+0x138>
		angle_name = STOP;
     6da:	88 e0       	ldi	r24, 0x08	; 8
	}
	// take action on mouse according to angle
	switch(angle_name)
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	a1 f0       	breq	.+40     	; 0x708 <App_GetImuGradient+0x164>
     6e0:	20 f4       	brcc	.+8      	; 0x6ea <App_GetImuGradient+0x146>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <App_GetImuGradient+0x144>
     6e6:	80 c0       	rjmp	.+256    	; 0x7e8 <App_GetImuGradient+0x244>
     6e8:	a9 c0       	rjmp	.+338    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     6ea:	83 30       	cpi	r24, 0x03	; 3
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <App_GetImuGradient+0x14c>
     6ee:	53 c0       	rjmp	.+166    	; 0x796 <App_GetImuGradient+0x1f2>
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <App_GetImuGradient+0x152>
     6f4:	a3 c0       	rjmp	.+326    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	{
		case STOP:
		//-- no head motion
		RIGHT_CLICK_FLAG = ENABLED;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
		LEFT_CLICK_FLAG = ENABLED;
     6fc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
		DL_FLAG = ENABLED;
     700:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
		return NOTHING;
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	a3 c0       	rjmp	.+326    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		break;
		// head is turned around X-axis (RIGHT_CLICK, LEFT_CLICK, DOUBLE_LEFT_CLICK)
		case ROLL:
		// angle > threshold?
		// angle range [20:180]
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180 && RIGHT_CLICK_FLAG)
     708:	e8 2f       	mov	r30, r24
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	2c 0f       	add	r18, r28
     718:	3d 1f       	adc	r19, r29
     71a:	e2 0f       	add	r30, r18
     71c:	f3 1f       	adc	r31, r19
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	9c 01       	movw	r18, r24
     724:	24 51       	subi	r18, 0x14	; 20
     726:	31 09       	sbc	r19, r1
     728:	20 3a       	cpi	r18, 0xA0	; 160
     72a:	31 05       	cpc	r19, r1
     72c:	68 f4       	brcc	.+26     	; 0x748 <App_GetImuGradient+0x1a4>
     72e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <RIGHT_CLICK_FLAG>
     732:	22 23       	and	r18, r18
     734:	49 f0       	breq	.+18     	; 0x748 <App_GetImuGradient+0x1a4>
		{
			// disable flag to stop sending this signal multiple times
			RIGHT_CLICK_FLAG = DISABLED;
     736:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <RIGHT_CLICK_FLAG>
			// enable left click
			LEFT_CLICK_FLAG = ENABLED;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
			// enable double left flag
			DL_FLAG = ENABLED;
     740:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
			return RIGHT_CLICK;
     744:	85 e0       	ldi	r24, 0x05	; 5
     746:	83 c0       	rjmp	.+262    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			
		}
		
		// angle in range [320:360] -> left click
		else if ((absolute_gradient[angle_name-1] > 360-(THRESHOLD+40)) && (absolute_gradient[angle_name-1] < 360 - THRESHOLD) && LEFT_CLICK_FLAG)
     748:	9c 01       	movw	r18, r24
     74a:	2d 52       	subi	r18, 0x2D	; 45
     74c:	31 40       	sbci	r19, 0x01	; 1
     74e:	27 32       	cpi	r18, 0x27	; 39
     750:	31 05       	cpc	r19, r1
     752:	68 f4       	brcc	.+26     	; 0x76e <App_GetImuGradient+0x1ca>
     754:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <LEFT_CLICK_FLAG>
     758:	22 23       	and	r18, r18
     75a:	49 f0       	breq	.+18     	; 0x76e <App_GetImuGradient+0x1ca>
		{
			// enable right click
			RIGHT_CLICK_FLAG = ENABLED;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
			// disable flag to stop sending this signal multiple times
			LEFT_CLICK_FLAG = DISABLED;
     762:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <LEFT_CLICK_FLAG>
			// enable double left flag
			DL_FLAG = ENABLED;
     766:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
			return LEFT_CLICK;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	70 c0       	rjmp	.+224    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		}
		// angle in range [180:320] -> double left click
		else if((absolute_gradient[angle_name-1] > 180) && (absolute_gradient[angle_name-1] < 300) && DL_FLAG )
     76e:	85 5b       	subi	r24, 0xB5	; 181
     770:	91 09       	sbc	r25, r1
     772:	87 37       	cpi	r24, 0x77	; 119
     774:	91 05       	cpc	r25, r1
     776:	08 f0       	brcs	.+2      	; 0x77a <App_GetImuGradient+0x1d6>
     778:	63 c0       	rjmp	.+198    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     77a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <DL_FLAG>
     77e:	88 23       	and	r24, r24
     780:	09 f4       	brne	.+2      	; 0x784 <App_GetImuGradient+0x1e0>
     782:	60 c0       	rjmp	.+192    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{
			DL_FLAG = DISABLED;
     784:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <DL_FLAG>
			LEFT_CLICK_FLAG = DISABLED;
     788:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <LEFT_CLICK_FLAG>
			RIGHT_CLICK_FLAG = ENABLED;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
			return DOUBLE_LEFT_CLICK;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	5c c0       	rjmp	.+184    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		break;
		// head is turned around Y-axis (UP, DOWN)
		case PITCH:
		// enable flags so the signal can be sent again
		// angle range [20:180]
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
     796:	e8 2f       	mov	r30, r24
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	8c 0f       	add	r24, r28
     7a6:	9d 1f       	adc	r25, r29
     7a8:	e8 0f       	add	r30, r24
     7aa:	f9 1f       	adc	r31, r25
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	9c 01       	movw	r18, r24
     7b2:	24 51       	subi	r18, 0x14	; 20
     7b4:	31 09       	sbc	r19, r1
     7b6:	20 3a       	cpi	r18, 0xA0	; 160
     7b8:	31 05       	cpc	r19, r1
     7ba:	48 f4       	brcc	.+18     	; 0x7ce <App_GetImuGradient+0x22a>
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return UP; }
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     7c2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     7c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	40 c0       	rjmp	.+128    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		// angle range [180:360]
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
     7ce:	85 5b       	subi	r24, 0xB5	; 181
     7d0:	91 09       	sbc	r25, r1
     7d2:	8f 39       	cpi	r24, 0x9F	; 159
     7d4:	91 05       	cpc	r25, r1
     7d6:	c0 f5       	brcc	.+112    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return DOWN; }
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     7de:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     7e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     7e6:	33 c0       	rjmp	.+102    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		return NOTHING;
		break;
		// head is turned around Z-axis (Left, Right)
		case YAW:
		// enable flags so the signal can be sent again
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
     7e8:	e8 2f       	mov	r30, r24
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	2c 0f       	add	r18, r28
     7f8:	3d 1f       	adc	r19, r29
     7fa:	e2 0f       	add	r30, r18
     7fc:	f3 1f       	adc	r31, r19
     7fe:	80 81       	ld	r24, Z
     800:	91 81       	ldd	r25, Z+1	; 0x01
     802:	9c 01       	movw	r18, r24
     804:	24 51       	subi	r18, 0x14	; 20
     806:	31 09       	sbc	r19, r1
     808:	20 3a       	cpi	r18, 0xA0	; 160
     80a:	31 05       	cpc	r19, r1
     80c:	48 f4       	brcc	.+18     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return RIGHT; }
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     814:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     818:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	17 c0       	rjmp	.+46     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
     820:	85 5b       	subi	r24, 0xB5	; 181
     822:	91 09       	sbc	r25, r1
     824:	8f 39       	cpi	r24, 0x9F	; 159
     826:	91 05       	cpc	r25, r1
     828:	88 f4       	brcc	.+34     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return LEFT; }
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RIGHT_CLICK_FLAG>
     830:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LEFT_CLICK_FLAG>
     834:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DL_FLAG>
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		return NOTHING;
		break;

	}
	//-- no head motion
	return NOTHING;
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	07 c0       	rjmp	.+14     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			DL_FLAG = DISABLED;
			LEFT_CLICK_FLAG = DISABLED;
			RIGHT_CLICK_FLAG = ENABLED;
			return DOUBLE_LEFT_CLICK;
		}
		return NOTHING;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	05 c0       	rjmp	.+10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	03 c0       	rjmp	.+6      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return UP; }
		// angle range [180:360]
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
		{ RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return DOWN; }
		return NOTHING;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	01 c0       	rjmp	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		// enable flags so the signal can be sent again
		if(absolute_gradient[angle_name-1] >= THRESHOLD && absolute_gradient[angle_name-1] < 180)
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return RIGHT; }
		else if ( absolute_gradient[angle_name-1] > 180 && absolute_gradient[angle_name-1] < (360 - THRESHOLD) )
		{RIGHT_CLICK_FLAG = ENABLED; LEFT_CLICK_FLAG = ENABLED; DL_FLAG = ENABLED; return LEFT; }
		return NOTHING;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
		break;

	}
	//-- no head motion
	return NOTHING;
}
     84e:	26 96       	adiw	r28, 0x06	; 6
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <BNO055_WriteByte>:
*/
s16_t BNO055_GetMagRadius(){
  s8_t low = BNO055_ReadByte(BNO055_ADDRESS, BNO055_MAG_RADIUS_LSB);
  s8_t high = BNO055_ReadByte(BNO055_ADDRESS, BNO055_MAG_RADIUS_MSB);
  return ((low & 0xFF)| (high<<8));
}
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	c8 2f       	mov	r28, r24
     868:	16 2f       	mov	r17, r22
     86a:	d4 2f       	mov	r29, r20
     86c:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Master_Start>
     870:	81 2f       	mov	r24, r17
     872:	0e 94 b0 07 	call	0xf60	; 0xf60 <I2C_Master_Write>
     876:	8d 2f       	mov	r24, r29
     878:	0e 94 b0 07 	call	0xf60	; 0xf60 <I2C_Master_Write>
     87c:	8c 2f       	mov	r24, r28
     87e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <I2C_Repeated_Start>
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	08 95       	ret

0000088a <BNO055_ReadByte>:
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	c8 2f       	mov	r28, r24
     890:	d6 2f       	mov	r29, r22
     892:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Master_Start>
     896:	8d 2f       	mov	r24, r29
     898:	0e 94 b0 07 	call	0xf60	; 0xf60 <I2C_Master_Write>
     89c:	8c 2f       	mov	r24, r28
     89e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <I2C_Repeated_Start>
     8a2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <I2C_Read_Ack>
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <BNO055_ReadBytes>:
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	c8 2f       	mov	r28, r24
     8ba:	16 2f       	mov	r17, r22
     8bc:	d4 2f       	mov	r29, r20
     8be:	79 01       	movw	r14, r18
     8c0:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Master_Start>
     8c4:	81 2f       	mov	r24, r17
     8c6:	0e 94 b0 07 	call	0xf60	; 0xf60 <I2C_Master_Write>
     8ca:	8c 2f       	mov	r24, r28
     8cc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <I2C_Repeated_Start>
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <BNO055_ReadBytes+0x38>
     8d4:	87 01       	movw	r16, r14
     8d6:	0c 0f       	add	r16, r28
     8d8:	11 1d       	adc	r17, r1
     8da:	0e 94 ee 07 	call	0xfdc	; 0xfdc <I2C_Read_Ack>
     8de:	f8 01       	movw	r30, r16
     8e0:	80 83       	st	Z, r24
     8e2:	cf 5f       	subi	r28, 0xFF	; 255
     8e4:	cd 17       	cp	r28, r29
     8e6:	b0 f3       	brcs	.-20     	; 0x8d4 <BNO055_ReadBytes+0x28>
     8e8:	c7 01       	movw	r24, r14
     8ea:	8d 0f       	add	r24, r29
     8ec:	91 1d       	adc	r25, r1
     8ee:	ec 01       	movw	r28, r24
     8f0:	0e 94 fc 07 	call	0xff8	; 0xff8 <I2C_Read_Nack>
     8f4:	88 83       	st	Y, r24
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	08 95       	ret

00000904 <BNO055_GetCalibStat>:
     904:	cf 93       	push	r28
     906:	c8 2f       	mov	r28, r24
     908:	65 e3       	ldi	r22, 0x35	; 53
     90a:	88 e2       	ldi	r24, 0x28	; 40
     90c:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
     910:	c1 11       	cpse	r28, r1
     912:	05 c0       	rjmp	.+10     	; 0x91e <BNO055_GetCalibStat+0x1a>
     914:	82 95       	swap	r24
     916:	86 95       	lsr	r24
     918:	86 95       	lsr	r24
     91a:	83 70       	andi	r24, 0x03	; 3
     91c:	11 c0       	rjmp	.+34     	; 0x940 <BNO055_GetCalibStat+0x3c>
     91e:	c1 30       	cpi	r28, 0x01	; 1
     920:	21 f4       	brne	.+8      	; 0x92a <BNO055_GetCalibStat+0x26>
     922:	80 73       	andi	r24, 0x30	; 48
     924:	82 95       	swap	r24
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	0b c0       	rjmp	.+22     	; 0x940 <BNO055_GetCalibStat+0x3c>
     92a:	c2 30       	cpi	r28, 0x02	; 2
     92c:	21 f4       	brne	.+8      	; 0x936 <BNO055_GetCalibStat+0x32>
     92e:	8c 70       	andi	r24, 0x0C	; 12
     930:	86 95       	lsr	r24
     932:	86 95       	lsr	r24
     934:	05 c0       	rjmp	.+10     	; 0x940 <BNO055_GetCalibStat+0x3c>
     936:	c3 30       	cpi	r28, 0x03	; 3
     938:	11 f4       	brne	.+4      	; 0x93e <BNO055_GetCalibStat+0x3a>
     93a:	83 70       	andi	r24, 0x03	; 3
     93c:	01 c0       	rjmp	.+2      	; 0x940 <BNO055_GetCalibStat+0x3c>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <BNO055_ReadEulerAngles>:
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <BNO055_ReadEulerAngles+0xa>
     94e:	00 d0       	rcall	.+0      	; 0x950 <BNO055_ReadEulerAngles+0xc>
     950:	00 d0       	rcall	.+0      	; 0x952 <BNO055_ReadEulerAngles+0xe>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	8c 01       	movw	r16, r24
     958:	9e 01       	movw	r18, r28
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	46 e0       	ldi	r20, 0x06	; 6
     960:	6a e1       	ldi	r22, 0x1A	; 26
     962:	88 e2       	ldi	r24, 0x28	; 40
     964:	0e 94 56 04 	call	0x8ac	; 0x8ac <BNO055_ReadBytes>
     968:	6a 81       	ldd	r22, Y+2	; 0x02
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	76 2f       	mov	r23, r22
     96e:	66 27       	eor	r22, r22
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	68 2b       	or	r22, r24
     974:	07 2e       	mov	r0, r23
     976:	00 0c       	add	r0, r0
     978:	88 0b       	sbc	r24, r24
     97a:	99 0b       	sbc	r25, r25
     97c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__floatsisf>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	5d e3       	ldi	r21, 0x3D	; 61
     988:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3>
     98c:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixsfsi>
     990:	f8 01       	movw	r30, r16
     992:	71 83       	std	Z+1, r23	; 0x01
     994:	60 83       	st	Z, r22
     996:	6c 81       	ldd	r22, Y+4	; 0x04
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	76 2f       	mov	r23, r22
     99c:	66 27       	eor	r22, r22
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	68 2b       	or	r22, r24
     9a2:	07 2e       	mov	r0, r23
     9a4:	00 0c       	add	r0, r0
     9a6:	88 0b       	sbc	r24, r24
     9a8:	99 0b       	sbc	r25, r25
     9aa:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__floatsisf>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e8       	ldi	r20, 0x80	; 128
     9b4:	5d e3       	ldi	r21, 0x3D	; 61
     9b6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	44 e3       	ldi	r20, 0x34	; 52
     9c0:	53 e4       	ldi	r21, 0x43	; 67
     9c2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__addsf3>
     9c6:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixsfsi>
     9ca:	f8 01       	movw	r30, r16
     9cc:	73 83       	std	Z+3, r23	; 0x03
     9ce:	62 83       	std	Z+2, r22	; 0x02
     9d0:	6e 81       	ldd	r22, Y+6	; 0x06
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	76 2f       	mov	r23, r22
     9d6:	66 27       	eor	r22, r22
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	68 2b       	or	r22, r24
     9dc:	07 2e       	mov	r0, r23
     9de:	00 0c       	add	r0, r0
     9e0:	88 0b       	sbc	r24, r24
     9e2:	99 0b       	sbc	r25, r25
     9e4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__floatsisf>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e8       	ldi	r20, 0x80	; 128
     9ee:	5d e3       	ldi	r21, 0x3D	; 61
     9f0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	44 e3       	ldi	r20, 0x34	; 52
     9fa:	53 e4       	ldi	r21, 0x43	; 67
     9fc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__addsf3>
     a00:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixsfsi>
     a04:	f8 01       	movw	r30, r16
     a06:	75 83       	std	Z+5, r23	; 0x05
     a08:	64 83       	std	Z+4, r22	; 0x04
     a0a:	26 96       	adiw	r28, 0x06	; 6
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <BNO055_SetMagOffsets>:
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
     a26:	48 81       	ld	r20, Y
     a28:	6b e5       	ldi	r22, 0x5B	; 91
     a2a:	88 e2       	ldi	r24, 0x28	; 40
     a2c:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a30:	49 81       	ldd	r20, Y+1	; 0x01
     a32:	6c e5       	ldi	r22, 0x5C	; 92
     a34:	88 e2       	ldi	r24, 0x28	; 40
     a36:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a3a:	4a 81       	ldd	r20, Y+2	; 0x02
     a3c:	6d e5       	ldi	r22, 0x5D	; 93
     a3e:	88 e2       	ldi	r24, 0x28	; 40
     a40:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a44:	4b 81       	ldd	r20, Y+3	; 0x03
     a46:	6e e5       	ldi	r22, 0x5E	; 94
     a48:	88 e2       	ldi	r24, 0x28	; 40
     a4a:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a4e:	4c 81       	ldd	r20, Y+4	; 0x04
     a50:	6f e5       	ldi	r22, 0x5F	; 95
     a52:	88 e2       	ldi	r24, 0x28	; 40
     a54:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a58:	4d 81       	ldd	r20, Y+5	; 0x05
     a5a:	60 e6       	ldi	r22, 0x60	; 96
     a5c:	88 e2       	ldi	r24, 0x28	; 40
     a5e:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <BNO055_SetMagRadius>:
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	6b 01       	movw	r12, r22
     a72:	7c 01       	movw	r14, r24
     a74:	46 2f       	mov	r20, r22
     a76:	69 e6       	ldi	r22, 0x69	; 105
     a78:	88 e2       	ldi	r24, 0x28	; 40
     a7a:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a7e:	4d 2d       	mov	r20, r13
     a80:	55 27       	eor	r21, r21
     a82:	6a e6       	ldi	r22, 0x6A	; 106
     a84:	88 e2       	ldi	r24, 0x28	; 40
     a86:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <BNO055_SelfTest>:
*Function to Test the sensors see if they fail in hardware or not
*return EN_FAIL_t of the failed sensor (see BNO055.h for definition)
*   return 
*/
EN_FAIL_t BNO055_SelfTest(){
  u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);  
     a94:	66 e3       	ldi	r22, 0x36	; 54
     a96:	88 e2       	ldi	r24, 0x28	; 40
     a98:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
  if(!(selftest & 0x01)) {
     a9c:	80 ff       	sbrs	r24, 0
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <BNO055_SelfTest+0x1c>

    return ACCELOMETER_FAIL;                /*acc fails*/
  }
  if(!(selftest & 0x02)) {
     aa0:	81 ff       	sbrs	r24, 1
     aa2:	08 c0       	rjmp	.+16     	; 0xab4 <BNO055_SelfTest+0x20>
    return MAGNETOMETER_FAIL;               /*magnetometer fails*/
  }
  if(!(selftest & 0x04)) {
     aa4:	82 ff       	sbrs	r24, 2
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <BNO055_SelfTest+0x24>
    return GYROSCOPE_FAIL;              /*gyroscope fails*/
  }
  if(!(selftest & 0x08)) {
     aa8:	83 fd       	sbrc	r24, 3
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <BNO055_SelfTest+0x28>
    return SYSTEM_FAIL;              /*system fails*/
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	08 95       	ret
*/
EN_FAIL_t BNO055_SelfTest(){
  u8_t selftest = BNO055_ReadByte(BNO055_ADDRESS, BNO055_ST_RESULT);  
  if(!(selftest & 0x01)) {

    return ACCELOMETER_FAIL;                /*acc fails*/
     ab0:	85 e0       	ldi	r24, 0x05	; 5
     ab2:	08 95       	ret
  }
  if(!(selftest & 0x02)) {
    return MAGNETOMETER_FAIL;               /*magnetometer fails*/
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	08 95       	ret
  }
  if(!(selftest & 0x04)) {
    return GYROSCOPE_FAIL;              /*gyroscope fails*/
     ab8:	87 e0       	ldi	r24, 0x07	; 7
     aba:	08 95       	ret
  }
  if(!(selftest & 0x08)) {
    return SYSTEM_FAIL;              /*system fails*/
  }

  return BNO055_SUCCESS;
     abc:	89 e0       	ldi	r24, 0x09	; 9
}
     abe:	08 95       	ret

00000ac0 <BNO055_Init>:
*to speed up calibration process you can use GetOffsets and Get Radius functions and SetCalibProfile
*Functions to store calibrated offsets after every boot 
*
*/
EN_FAIL_t BNO055_Init()
{	
     ac0:	cf 93       	push	r28
	I2C_Init(OPERATION_FREQ,100000);					/*initialize i2c with frequency 100Khz*/
     ac2:	40 ea       	ldi	r20, 0xA0	; 160
     ac4:	56 e8       	ldi	r21, 0x86	; 134
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <I2C_Init>
	// Select BNO055 system power mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PWR_MODE, PWR_MODE );
	// Select BNO055 system operation mode
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, OP_MODE  );*/
	
	u8_t id = BNO055_ReadByte(BNO055_ADDRESS,BNO055_CHIP_ID);
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	88 e2       	ldi	r24, 0x28	; 40
     ad4:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
	if (id != BNO055_ID) {
     ad8:	80 3a       	cpi	r24, 0xA0	; 160
     ada:	31 f0       	breq	.+12     	; 0xae8 <BNO055_Init+0x28>
		id = BNO055_ReadByte(BNO055_ADDRESS,BNO055_CHIP_ID);
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	88 e2       	ldi	r24, 0x28	; 40
     ae0:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
		if (id != BNO055_ID) {
     ae4:	80 3a       	cpi	r24, 0xA0	; 160
     ae6:	e9 f5       	brne	.+122    	; 0xb62 <BNO055_Init+0xa2>
			return SYSTEM_FAIL;
		}
	}
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, CONFIGMODE );
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	6d e3       	ldi	r22, 0x3D	; 61
     aec:	88 e2       	ldi	r24, 0x28	; 40
     aee:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS,BNO055_SYS_TRIGGER, 0x20);
     af2:	40 e2       	ldi	r20, 0x20	; 32
     af4:	6f e3       	ldi	r22, 0x3F	; 63
     af6:	88 e2       	ldi	r24, 0x28	; 40
     af8:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	while (BNO055_ReadByte(BNO055_ADDRESS,BNO055_CHIP_ID) != BNO055_ID);
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	88 e2       	ldi	r24, 0x28	; 40
     b00:	0e 94 45 04 	call	0x88a	; 0x88a <BNO055_ReadByte>
     b04:	80 3a       	cpi	r24, 0xA0	; 160
     b06:	d1 f7       	brne	.-12     	; 0xafc <BNO055_Init+0x3c>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PWR_MODE, PWR_MODE );
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	6e e3       	ldi	r22, 0x3E	; 62
     b0c:	88 e2       	ldi	r24, 0x28	; 40
     b0e:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS, BNO055_PAGE_ID, PAGE_0);
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	67 e0       	ldi	r22, 0x07	; 7
     b16:	88 e2       	ldi	r24, 0x28	; 40
     b18:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
	BNO055_WriteByte(BNO055_ADDRESS,BNO055_SYS_TRIGGER, 0x0);
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	6f e3       	ldi	r22, 0x3F	; 63
     b20:	88 e2       	ldi	r24, 0x28	; 40
     b22:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>

	BNO055_WriteByte(BNO055_ADDRESS, BNO055_OPR_MODE, OP_MODE  );	
     b26:	4c e0       	ldi	r20, 0x0C	; 12
     b28:	6d e3       	ldi	r22, 0x3D	; 61
     b2a:	88 e2       	ldi	r24, 0x28	; 40
     b2c:	0e 94 30 04 	call	0x860	; 0x860 <BNO055_WriteByte>
    BNO055_SetMagOffsets(MagOffsets);
     b30:	85 e6       	ldi	r24, 0x65	; 101
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 10 05 	call	0xa20	; 0xa20 <BNO055_SetMagOffsets>
    BNO055_SetMagRadius(MagRadius);
     b38:	6d e0       	ldi	r22, 0x0D	; 13
     b3a:	72 e0       	ldi	r23, 0x02	; 2
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 34 05 	call	0xa68	; 0xa68 <BNO055_SetMagRadius>
        
    if (BNO055_SelfTest() != BNO055_SUCCESS){             /*if self test didn't pass on all sensors*/
     b44:	0e 94 4a 05 	call	0xa94	; 0xa94 <BNO055_SelfTest>
     b48:	c8 2f       	mov	r28, r24
     b4a:	89 30       	cpi	r24, 0x09	; 9
     b4c:	21 f0       	breq	.+8      	; 0xb56 <BNO055_Init+0x96>
	    return BNO055_SelfTest();
     b4e:	0e 94 4a 05 	call	0xa94	; 0xa94 <BNO055_SelfTest>
     b52:	c8 2f       	mov	r28, r24
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <BNO055_Init+0xa4>
    }
        
    while (1){
	    if(BNO055_GetCalibStat(MAGNETOMETER) == FULL_CALIBRATED )
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	0e 94 82 04 	call	0x904	; 0x904 <BNO055_GetCalibStat>
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	d9 f7       	brne	.-10     	; 0xb56 <BNO055_Init+0x96>
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <BNO055_Init+0xa4>
	
	u8_t id = BNO055_ReadByte(BNO055_ADDRESS,BNO055_CHIP_ID);
	if (id != BNO055_ID) {
		id = BNO055_ReadByte(BNO055_ADDRESS,BNO055_CHIP_ID);
		if (id != BNO055_ID) {
			return SYSTEM_FAIL;
     b62:	c8 e0       	ldi	r28, 0x08	; 8
	    if(BNO055_GetCalibStat(MAGNETOMETER) == FULL_CALIBRATED )
	    break;
    }
        
    return BNO055_SUCCESS;
}
     b64:	8c 2f       	mov	r24, r28
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <Delay_ms_independent>:
     b6a:	8f 92       	push	r8
     b6c:	9f 92       	push	r9
     b6e:	af 92       	push	r10
     b70:	bf 92       	push	r11
     b72:	cf 92       	push	r12
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	9c 01       	movw	r18, r24
     b7e:	a8 ee       	ldi	r26, 0xE8	; 232
     b80:	b3 e0       	ldi	r27, 0x03	; 3
     b82:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__umulhisi3>
     b86:	2b ea       	ldi	r18, 0xAB	; 171
     b88:	3a ea       	ldi	r19, 0xAA	; 170
     b8a:	4a ea       	ldi	r20, 0xAA	; 170
     b8c:	5a ea       	ldi	r21, 0xAA	; 170
     b8e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__umulsidi3>
     b92:	00 e2       	ldi	r16, 0x20	; 32
     b94:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__lshrdi3>
     b98:	82 2e       	mov	r8, r18
     b9a:	93 2e       	mov	r9, r19
     b9c:	a4 2e       	mov	r10, r20
     b9e:	b5 2e       	mov	r11, r21
     ba0:	b6 94       	lsr	r11
     ba2:	a7 94       	ror	r10
     ba4:	97 94       	ror	r9
     ba6:	87 94       	ror	r8
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <Delay_ms_independent+0x4a>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	88 1a       	sub	r8, r24
     bae:	91 08       	sbc	r9, r1
     bb0:	a1 08       	sbc	r10, r1
     bb2:	b1 08       	sbc	r11, r1
     bb4:	81 14       	cp	r8, r1
     bb6:	91 04       	cpc	r9, r1
     bb8:	a1 04       	cpc	r10, r1
     bba:	b1 04       	cpc	r11, r1
     bbc:	b1 f7       	brne	.-20     	; 0xbaa <Delay_ms_independent+0x40>
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	08 95       	ret

00000bd2 <LED_Init>:
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_setPinDir>
     bd8:	08 95       	ret

00000bda <LED_TurnOn>:
     bda:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_setPin>
     bde:	08 95       	ret

00000be0 <LED_TurnOff>:
     be0:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_clearPin>
     be4:	08 95       	ret

00000be6 <advanceCircleByFixedAngle>:
     be6:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <cosinus>
     bea:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <cosinus+0x1>
     bee:	14 16       	cp	r1, r20
     bf0:	15 06       	cpc	r1, r21
     bf2:	1c f4       	brge	.+6      	; 0xbfa <advanceCircleByFixedAngle+0x14>
     bf4:	20 e2       	ldi	r18, 0x20	; 32
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <advanceCircleByFixedAngle+0x18>
     bfa:	20 ee       	ldi	r18, 0xE0	; 224
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	24 0f       	add	r18, r20
     c00:	35 1f       	adc	r19, r21
     c02:	02 2e       	mov	r0, r18
     c04:	23 2f       	mov	r18, r19
     c06:	00 0c       	add	r0, r0
     c08:	22 1f       	adc	r18, r18
     c0a:	33 0b       	sbc	r19, r19
     c0c:	00 0c       	add	r0, r0
     c0e:	22 1f       	adc	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <reportBuffer+0x1>
     c16:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sinus>
     c1a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <sinus+0x1>
     c1e:	82 0f       	add	r24, r18
     c20:	91 1d       	adc	r25, r1
     c22:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <sinus+0x1>
     c26:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sinus>
     c2a:	18 16       	cp	r1, r24
     c2c:	19 06       	cpc	r1, r25
     c2e:	1c f4       	brge	.+6      	; 0xc36 <advanceCircleByFixedAngle+0x50>
     c30:	20 e2       	ldi	r18, 0x20	; 32
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <advanceCircleByFixedAngle+0x54>
     c36:	20 ee       	ldi	r18, 0xE0	; 224
     c38:	3f ef       	ldi	r19, 0xFF	; 255
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	08 2e       	mov	r0, r24
     c40:	89 2f       	mov	r24, r25
     c42:	00 0c       	add	r0, r0
     c44:	88 1f       	adc	r24, r24
     c46:	99 0b       	sbc	r25, r25
     c48:	00 0c       	add	r0, r0
     c4a:	88 1f       	adc	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <reportBuffer+0x2>
     c52:	48 1b       	sub	r20, r24
     c54:	51 09       	sbc	r21, r1
     c56:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <cosinus+0x1>
     c5a:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <cosinus>
     c5e:	08 95       	ret

00000c60 <usbFunctionSetup>:
     c60:	fc 01       	movw	r30, r24
     c62:	90 81       	ld	r25, Z
     c64:	90 76       	andi	r25, 0x60	; 96
     c66:	90 32       	cpi	r25, 0x20	; 32
     c68:	e1 f4       	brne	.+56     	; 0xca2 <usbFunctionSetup+0x42>
     c6a:	81 81       	ldd	r24, Z+1	; 0x01
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	41 f4       	brne	.+16     	; 0xc80 <usbFunctionSetup+0x20>
     c70:	82 e8       	ldi	r24, 0x82	; 130
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
     c78:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
     c7c:	84 e0       	ldi	r24, 0x04	; 4
     c7e:	08 95       	ret
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	41 f4       	brne	.+16     	; 0xc94 <usbFunctionSetup+0x34>
     c84:	81 e8       	ldi	r24, 0x81	; 129
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
     c8c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	08 95       	ret
     c94:	8a 30       	cpi	r24, 0x0A	; 10
     c96:	39 f4       	brne	.+14     	; 0xca6 <usbFunctionSetup+0x46>
     c98:	83 81       	ldd	r24, Z+3	; 0x03
     c9a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <idleRate>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	08 95       	ret
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	08 95       	ret

00000caa <Mouse_init>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     caa:	9e e0       	ldi	r25, 0x0E	; 14
     cac:	88 e1       	ldi	r24, 0x18	; 24
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	a8 95       	wdr
     cb4:	81 bd       	out	0x21, r24	; 33
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	91 bd       	out	0x21, r25	; 33
     cba:	0e 94 52 09 	call	0x12a4	; 0x12a4 <usbInit>
     cbe:	81 b3       	in	r24, 0x11	; 17
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	81 bb       	out	0x11, r24	; 17
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <Mouse_init+0x2c>
     cc8:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cca:	e7 eb       	ldi	r30, 0xB7	; 183
     ccc:	fb e0       	ldi	r31, 0x0B	; 11
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <Mouse_init+0x24>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <Mouse_init+0x2a>
     cd4:	00 00       	nop
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	b9 f7       	brne	.-18     	; 0xcc8 <Mouse_init+0x1e>
     cda:	81 b3       	in	r24, 0x11	; 17
     cdc:	8f 7e       	andi	r24, 0xEF	; 239
     cde:	81 bb       	out	0x11, r24	; 17
     ce0:	78 94       	sei
     ce2:	08 95       	ret

00000ce4 <Mouse_MoveLeft>:
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <reportBuffer+0x1>
     cea:	08 95       	ret

00000cec <Mouse_MoveRight>:
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <reportBuffer+0x1>
     cf2:	08 95       	ret

00000cf4 <Mouse_MoveUp>:
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <reportBuffer+0x2>
     cfa:	08 95       	ret

00000cfc <Mouse_MoveDown>:
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <reportBuffer+0x2>
     d02:	08 95       	ret

00000d04 <Mouse_RightClick>:
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <reportBuffer>
     d0a:	08 95       	ret

00000d0c <Mouse_LeftClick>:
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <reportBuffer>
     d12:	08 95       	ret

00000d14 <Touch_Init>:
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	69 2f       	mov	r22, r25
     d18:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_setPinDir>
     d1c:	08 95       	ret

00000d1e <Touch_Read>:
     d1e:	69 2f       	mov	r22, r25
     d20:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_getPin>
     d24:	08 95       	ret

00000d26 <main>:


int main()
{
	/* Init application */
	App_Init();
     d26:	0e 94 82 02 	call	0x504	; 0x504 <App_Init>
	
	while(1)
	{
		// Ensure usb is always up
		DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
		wdt_reset();
     d2a:	a8 95       	wdr
		usbPoll();
     d2c:	0e 94 56 08 	call	0x10ac	; 0x10ac <usbPoll>
		if(usbInterruptIsReady())
     d30:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <usbTxStatus1>
     d34:	84 ff       	sbrs	r24, 4
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <main+0x20>
		{
		/* called after every poll of the interrupt endpoint */
	    advanceCircleByFixedAngle();
     d38:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <advanceCircleByFixedAngle>
	    DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
	    usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
     d3c:	64 e0       	ldi	r22, 0x04	; 4
     d3e:	82 e8       	ldi	r24, 0x82	; 130
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 51 08 	call	0x10a2	; 0x10a2 <usbSetInterrupt>
		}
		//------------------------------------------
		
		// Get current gradient of imu (required mouse motion direction)
		u8_t control_signal = App_GetImuGradient();
     d46:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <App_GetImuGradient>
		// move mouse
		App_OrderMouse(control_signal);
     d4a:	0e 94 29 02 	call	0x452	; 0x452 <App_OrderMouse>
		
	}
     d4e:	ed cf       	rjmp	.-38     	; 0xd2a <main+0x4>

00000d50 <DIO_setPinDir>:
     d50:	41 30       	cpi	r20, 0x01	; 1
     d52:	69 f4       	brne	.+26     	; 0xd6e <DIO_setPinDir+0x1e>
     d54:	e8 2f       	mov	r30, r24
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	22 91       	ld	r18, -Z
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_setPinDir+0x14>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	6a 95       	dec	r22
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_setPinDir+0x10>
     d68:	82 2b       	or	r24, r18
     d6a:	80 83       	st	Z, r24
     d6c:	08 95       	ret
     d6e:	41 11       	cpse	r20, r1
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <DIO_setPinDir+0x4e>
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	df 01       	movw	r26, r30
     d78:	2e 91       	ld	r18, -X
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_setPinDir+0x34>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	6a 95       	dec	r22
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_setPinDir+0x30>
     d88:	98 2f       	mov	r25, r24
     d8a:	90 95       	com	r25
     d8c:	92 23       	and	r25, r18
     d8e:	9c 93       	st	X, r25
     d90:	90 b7       	in	r25, 0x30	; 48
     d92:	94 60       	ori	r25, 0x04	; 4
     d94:	90 bf       	out	0x30, r25	; 48
     d96:	90 81       	ld	r25, Z
     d98:	89 2b       	or	r24, r25
     d9a:	80 83       	st	Z, r24
     d9c:	08 95       	ret
     d9e:	42 30       	cpi	r20, 0x02	; 2
     da0:	a9 f4       	brne	.+42     	; 0xdcc <DIO_setPinDir+0x7c>
     da2:	e8 2f       	mov	r30, r24
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	df 01       	movw	r26, r30
     da8:	2e 91       	ld	r18, -X
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_setPinDir+0x64>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	6a 95       	dec	r22
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_setPinDir+0x60>
     db8:	98 2f       	mov	r25, r24
     dba:	90 95       	com	r25
     dbc:	92 23       	and	r25, r18
     dbe:	9c 93       	st	X, r25
     dc0:	90 b7       	in	r25, 0x30	; 48
     dc2:	9b 7f       	andi	r25, 0xFB	; 251
     dc4:	90 bf       	out	0x30, r25	; 48
     dc6:	90 81       	ld	r25, Z
     dc8:	89 2b       	or	r24, r25
     dca:	80 83       	st	Z, r24
     dcc:	08 95       	ret

00000dce <DIO_setPin>:
     dce:	e8 2f       	mov	r30, r24
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_setPin+0x10>
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_setPin+0xc>
     de2:	28 2b       	or	r18, r24
     de4:	20 83       	st	Z, r18
     de6:	08 95       	ret

00000de8 <DIO_clearPin>:
     de8:	e8 2f       	mov	r30, r24
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_clearPin+0x10>
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	6a 95       	dec	r22
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_clearPin+0xc>
     dfc:	20 95       	com	r18
     dfe:	28 23       	and	r18, r24
     e00:	20 83       	st	Z, r18
     e02:	08 95       	ret

00000e04 <DIO_getPin>:
     e04:	e8 2f       	mov	r30, r24
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	32 97       	sbiw	r30, 0x02	; 2
     e0a:	80 81       	ld	r24, Z
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_getPin+0x10>
     e10:	95 95       	asr	r25
     e12:	87 95       	ror	r24
     e14:	6a 95       	dec	r22
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_getPin+0xc>
     e18:	81 70       	andi	r24, 0x01	; 1
     e1a:	08 95       	ret

00000e1c <I2C_Init>:
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	cf 93       	push	r28
     e2e:	9a 01       	movw	r18, r20
     e30:	ab 01       	movw	r20, r22
     e32:	68 2f       	mov	r22, r24
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__divmodsi4>
     e3e:	69 01       	movw	r12, r18
     e40:	7a 01       	movw	r14, r20
     e42:	80 e1       	ldi	r24, 0x10	; 16
     e44:	c8 1a       	sub	r12, r24
     e46:	d1 08       	sbc	r13, r1
     e48:	e1 08       	sbc	r14, r1
     e4a:	f1 08       	sbc	r15, r1
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	2e ef       	ldi	r18, 0xFE	; 254
     e52:	31 e0       	ldi	r19, 0x01	; 1
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__divmodsi4>
     e5c:	ca 01       	movw	r24, r20
     e5e:	b9 01       	movw	r22, r18
     e60:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__floatsisf>
     e64:	28 e1       	ldi	r18, 0x18	; 24
     e66:	32 e7       	ldi	r19, 0x72	; 114
     e68:	41 eb       	ldi	r20, 0xB1	; 177
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3>
     e70:	4b 01       	movw	r8, r22
     e72:	5c 01       	movw	r10, r24
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	a9 01       	movw	r20, r18
     e7a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__cmpsf2>
     e7e:	88 23       	and	r24, r24
     e80:	d4 f1       	brlt	.+116    	; 0xef6 <I2C_Init+0xda>
     e82:	c0 e0       	ldi	r28, 0x00	; 0
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <I2C_Init+0x8e>
     e86:	6c 2f       	mov	r22, r28
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__floatunsisf>
     e92:	9b 01       	movw	r18, r22
     e94:	ac 01       	movw	r20, r24
     e96:	c5 01       	movw	r24, r10
     e98:	b4 01       	movw	r22, r8
     e9a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__cmpsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	1c f0       	brlt	.+6      	; 0xea8 <I2C_Init+0x8c>
     ea2:	c1 b9       	out	0x01, r28	; 1
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <I2C_Init+0x94>
     ea8:	cf 5f       	subi	r28, 0xFF	; 255
     eaa:	c5 30       	cpi	r28, 0x05	; 5
     eac:	60 f3       	brcs	.-40     	; 0xe86 <I2C_Init+0x6a>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	19 f5       	brne	.+70     	; 0xefa <I2C_Init+0xde>
     eb4:	6c 2f       	mov	r22, r28
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__floatunsisf>
     ec0:	9b 01       	movw	r18, r22
     ec2:	ac 01       	movw	r20, r24
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e8       	ldi	r24, 0x80	; 128
     eca:	90 e4       	ldi	r25, 0x40	; 64
     ecc:	0e 94 98 0b 	call	0x1730	; 0x1730 <pow>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__addsf3>
     ed8:	4b 01       	movw	r8, r22
     eda:	5c 01       	movw	r10, r24
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__floatsisf>
     ee4:	a5 01       	movw	r20, r10
     ee6:	94 01       	movw	r18, r8
     ee8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__divsf3>
     eec:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixunssfsi>
     ef0:	60 b9       	out	0x00, r22	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <I2C_Init+0xe0>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <I2C_Init+0xe0>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	cf 91       	pop	r28
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	08 95       	ret

00000f10 <I2C_Master_Start>:
     f10:	96 b7       	in	r25, 0x36	; 54
     f12:	90 62       	ori	r25, 0x20	; 32
     f14:	96 bf       	out	0x36, r25	; 54
     f16:	96 b7       	in	r25, 0x36	; 54
     f18:	94 60       	ori	r25, 0x04	; 4
     f1a:	96 bf       	out	0x36, r25	; 54
     f1c:	96 b7       	in	r25, 0x36	; 54
     f1e:	90 68       	ori	r25, 0x80	; 128
     f20:	96 bf       	out	0x36, r25	; 54
     f22:	06 b6       	in	r0, 0x36	; 54
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <I2C_Master_Start+0x12>
     f28:	91 b1       	in	r25, 0x01	; 1
     f2a:	98 7f       	andi	r25, 0xF8	; 248
     f2c:	98 30       	cpi	r25, 0x08	; 8
     f2e:	91 f4       	brne	.+36     	; 0xf54 <I2C_Master_Start+0x44>
     f30:	83 b9       	out	0x03, r24	; 3
     f32:	86 b7       	in	r24, 0x36	; 54
     f34:	84 60       	ori	r24, 0x04	; 4
     f36:	86 bf       	out	0x36, r24	; 54
     f38:	86 b7       	in	r24, 0x36	; 54
     f3a:	80 68       	ori	r24, 0x80	; 128
     f3c:	86 bf       	out	0x36, r24	; 54
     f3e:	06 b6       	in	r0, 0x36	; 54
     f40:	07 fe       	sbrs	r0, 7
     f42:	fd cf       	rjmp	.-6      	; 0xf3e <I2C_Master_Start+0x2e>
     f44:	81 b1       	in	r24, 0x01	; 1
     f46:	88 7f       	andi	r24, 0xF8	; 248
     f48:	88 31       	cpi	r24, 0x18	; 24
     f4a:	31 f0       	breq	.+12     	; 0xf58 <I2C_Master_Start+0x48>
     f4c:	80 32       	cpi	r24, 0x20	; 32
     f4e:	31 f4       	brne	.+12     	; 0xf5c <I2C_Master_Start+0x4c>
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	08 95       	ret
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	08 95       	ret
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	08 95       	ret

00000f60 <I2C_Master_Write>:
     f60:	83 b9       	out	0x03, r24	; 3
     f62:	86 b7       	in	r24, 0x36	; 54
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	86 bf       	out	0x36, r24	; 54
     f68:	86 b7       	in	r24, 0x36	; 54
     f6a:	80 68       	ori	r24, 0x80	; 128
     f6c:	86 bf       	out	0x36, r24	; 54
     f6e:	06 b6       	in	r0, 0x36	; 54
     f70:	07 fe       	sbrs	r0, 7
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <I2C_Master_Write+0xe>
     f74:	81 b1       	in	r24, 0x01	; 1
     f76:	88 7f       	andi	r24, 0xF8	; 248
     f78:	88 32       	cpi	r24, 0x28	; 40
     f7a:	21 f0       	breq	.+8      	; 0xf84 <I2C_Master_Write+0x24>
     f7c:	80 33       	cpi	r24, 0x30	; 48
     f7e:	21 f4       	brne	.+8      	; 0xf88 <I2C_Master_Write+0x28>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	08 95       	ret
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	08 95       	ret
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	08 95       	ret

00000f8c <I2C_Repeated_Start>:
     f8c:	96 b7       	in	r25, 0x36	; 54
     f8e:	94 60       	ori	r25, 0x04	; 4
     f90:	96 bf       	out	0x36, r25	; 54
     f92:	96 b7       	in	r25, 0x36	; 54
     f94:	90 68       	ori	r25, 0x80	; 128
     f96:	96 bf       	out	0x36, r25	; 54
     f98:	96 b7       	in	r25, 0x36	; 54
     f9a:	90 62       	ori	r25, 0x20	; 32
     f9c:	96 bf       	out	0x36, r25	; 54
     f9e:	06 b6       	in	r0, 0x36	; 54
     fa0:	07 fe       	sbrs	r0, 7
     fa2:	fd cf       	rjmp	.-6      	; 0xf9e <I2C_Repeated_Start+0x12>
     fa4:	91 b1       	in	r25, 0x01	; 1
     fa6:	98 7f       	andi	r25, 0xF8	; 248
     fa8:	90 31       	cpi	r25, 0x10	; 16
     faa:	91 f4       	brne	.+36     	; 0xfd0 <I2C_Repeated_Start+0x44>
     fac:	83 b9       	out	0x03, r24	; 3
     fae:	86 b7       	in	r24, 0x36	; 54
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	86 bf       	out	0x36, r24	; 54
     fb4:	86 b7       	in	r24, 0x36	; 54
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	86 bf       	out	0x36, r24	; 54
     fba:	06 b6       	in	r0, 0x36	; 54
     fbc:	07 fe       	sbrs	r0, 7
     fbe:	fd cf       	rjmp	.-6      	; 0xfba <I2C_Repeated_Start+0x2e>
     fc0:	81 b1       	in	r24, 0x01	; 1
     fc2:	88 7f       	andi	r24, 0xF8	; 248
     fc4:	80 34       	cpi	r24, 0x40	; 64
     fc6:	31 f0       	breq	.+12     	; 0xfd4 <I2C_Repeated_Start+0x48>
     fc8:	88 34       	cpi	r24, 0x48	; 72
     fca:	31 f4       	brne	.+12     	; 0xfd8 <I2C_Repeated_Start+0x4c>
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	08 95       	ret
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 95       	ret
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	08 95       	ret
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	08 95       	ret

00000fdc <I2C_Read_Ack>:
     fdc:	86 b7       	in	r24, 0x36	; 54
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	86 bf       	out	0x36, r24	; 54
     fe2:	86 b7       	in	r24, 0x36	; 54
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	86 bf       	out	0x36, r24	; 54
     fe8:	86 b7       	in	r24, 0x36	; 54
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	86 bf       	out	0x36, r24	; 54
     fee:	06 b6       	in	r0, 0x36	; 54
     ff0:	07 fe       	sbrs	r0, 7
     ff2:	fd cf       	rjmp	.-6      	; 0xfee <I2C_Read_Ack+0x12>
     ff4:	83 b1       	in	r24, 0x03	; 3
     ff6:	08 95       	ret

00000ff8 <I2C_Read_Nack>:
     ff8:	86 b7       	in	r24, 0x36	; 54
     ffa:	84 60       	ori	r24, 0x04	; 4
     ffc:	86 bf       	out	0x36, r24	; 54
     ffe:	86 b7       	in	r24, 0x36	; 54
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	86 bf       	out	0x36, r24	; 54
    1004:	06 b6       	in	r0, 0x36	; 54
    1006:	07 fe       	sbrs	r0, 7
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <I2C_Read_Nack+0xc>
    100a:	83 b1       	in	r24, 0x03	; 3
    100c:	08 95       	ret

0000100e <usbDeviceRead>:
    100e:	dc 01       	movw	r26, r24
    1010:	86 2f       	mov	r24, r22
    1012:	66 23       	and	r22, r22
    1014:	e1 f0       	breq	.+56     	; 0x104e <usbDeviceRead+0x40>
    1016:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <usbMsgPtr>
    101a:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <usbMsgPtr+0x1>
    101e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <usbMsgFlags>
    1022:	96 ff       	sbrs	r25, 6
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <usbDeviceRead+0x2a>
    1026:	96 2f       	mov	r25, r22
    1028:	24 91       	lpm	r18, Z
    102a:	2c 93       	st	X, r18
    102c:	31 96       	adiw	r30, 0x01	; 1
    102e:	91 50       	subi	r25, 0x01	; 1
    1030:	11 96       	adiw	r26, 0x01	; 1
    1032:	91 11       	cpse	r25, r1
    1034:	f9 cf       	rjmp	.-14     	; 0x1028 <usbDeviceRead+0x1a>
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <usbDeviceRead+0x38>
    1038:	96 2f       	mov	r25, r22
    103a:	21 91       	ld	r18, Z+
    103c:	2c 93       	st	X, r18
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	91 11       	cpse	r25, r1
    1044:	fa cf       	rjmp	.-12     	; 0x103a <usbDeviceRead+0x2c>
    1046:	f0 93 a1 00 	sts	0x00A1, r31	; 0x8000a1 <usbMsgPtr+0x1>
    104a:	e0 93 a0 00 	sts	0x00A0, r30	; 0x8000a0 <usbMsgPtr>
    104e:	08 95       	ret

00001050 <usbGenericSetInterrupt>:
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	dc 01       	movw	r26, r24
    1058:	c6 2f       	mov	r28, r22
    105a:	8a 01       	movw	r16, r20
    105c:	fa 01       	movw	r30, r20
    105e:	80 81       	ld	r24, Z
    1060:	84 ff       	sbrs	r24, 4
    1062:	05 c0       	rjmp	.+10     	; 0x106e <usbGenericSetInterrupt+0x1e>
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	88 e8       	ldi	r24, 0x88	; 136
    1068:	89 27       	eor	r24, r25
    106a:	81 83       	std	Z+1, r24	; 0x01
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <usbGenericSetInterrupt+0x24>
    106e:	8a e5       	ldi	r24, 0x5A	; 90
    1070:	fa 01       	movw	r30, r20
    1072:	80 83       	st	Z, r24
    1074:	a8 01       	movw	r20, r16
    1076:	4e 5f       	subi	r20, 0xFE	; 254
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	9c 2f       	mov	r25, r28
    107c:	fa 01       	movw	r30, r20
    107e:	2c 91       	ld	r18, X
    1080:	20 83       	st	Z, r18
    1082:	91 50       	subi	r25, 0x01	; 1
    1084:	11 96       	adiw	r26, 0x01	; 1
    1086:	31 96       	adiw	r30, 0x01	; 1
    1088:	91 11       	cpse	r25, r1
    108a:	f9 cf       	rjmp	.-14     	; 0x107e <usbGenericSetInterrupt+0x2e>
    108c:	6c 2f       	mov	r22, r28
    108e:	ca 01       	movw	r24, r20
    1090:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usbCrc16Append>
    1094:	cc 5f       	subi	r28, 0xFC	; 252
    1096:	f8 01       	movw	r30, r16
    1098:	c0 83       	st	Z, r28
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <usbSetInterrupt>:
    10a2:	41 e9       	ldi	r20, 0x91	; 145
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	0e 94 28 08 	call	0x1050	; 0x1050 <usbGenericSetInterrupt>
    10aa:	08 95       	ret

000010ac <usbPoll>:
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <usbRxLen>
    10b4:	83 50       	subi	r24, 0x03	; 3
    10b6:	0a f4       	brpl	.+2      	; 0x10ba <usbPoll+0xe>
    10b8:	b7 c0       	rjmp	.+366    	; 0x1228 <usbPoll+0x17c>
    10ba:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <usbInputBufOffset>
    10be:	2c e0       	ldi	r18, 0x0C	; 12
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	29 1b       	sub	r18, r25
    10c4:	31 09       	sbc	r19, r1
    10c6:	e9 01       	movw	r28, r18
    10c8:	ca 55       	subi	r28, 0x5A	; 90
    10ca:	df 4f       	sbci	r29, 0xFF	; 255
    10cc:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <usbRxToken>
    10d0:	9d 32       	cpi	r25, 0x2D	; 45
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <usbPoll+0x2a>
    10d4:	a7 c0       	rjmp	.+334    	; 0x1224 <usbPoll+0x178>
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	09 f0       	breq	.+2      	; 0x10dc <usbPoll+0x30>
    10da:	a4 c0       	rjmp	.+328    	; 0x1224 <usbPoll+0x178>
    10dc:	83 ec       	ldi	r24, 0xC3	; 195
    10de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <usbTxBuf>
    10e2:	8a e5       	ldi	r24, 0x5A	; 90
    10e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <usbTxLen>
    10e8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <usbMsgFlags>
    10ec:	88 81       	ld	r24, Y
    10ee:	80 76       	andi	r24, 0x60	; 96
    10f0:	21 f0       	breq	.+8      	; 0x10fa <usbPoll+0x4e>
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 30 06 	call	0xc60	; 0xc60 <usbFunctionSetup>
    10f8:	8c c0       	rjmp	.+280    	; 0x1212 <usbPoll+0x166>
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <usbTxBuf+0x9>
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	81 11       	cpse	r24, r1
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <usbPoll+0x66>
    1106:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <usbTxBuf+0xa>
    110a:	2f e8       	ldi	r18, 0x8F	; 143
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	7c c0       	rjmp	.+248    	; 0x120a <usbPoll+0x15e>
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	31 f4       	brne	.+12     	; 0x1122 <usbPoll+0x76>
    1116:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <usbNewDeviceAddr>
    111a:	2f e8       	ldi	r18, 0x8F	; 143
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	74 c0       	rjmp	.+232    	; 0x120a <usbPoll+0x15e>
    1122:	86 30       	cpi	r24, 0x06	; 6
    1124:	09 f0       	breq	.+2      	; 0x1128 <usbPoll+0x7c>
    1126:	51 c0       	rjmp	.+162    	; 0x11ca <usbPoll+0x11e>
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	41 f4       	brne	.+16     	; 0x113e <usbPoll+0x92>
    112e:	8a e3       	ldi	r24, 0x3A	; 58
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    1136:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    113a:	82 e1       	ldi	r24, 0x12	; 18
    113c:	42 c0       	rjmp	.+132    	; 0x11c2 <usbPoll+0x116>
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	41 f4       	brne	.+16     	; 0x1152 <usbPoll+0xa6>
    1142:	88 e1       	ldi	r24, 0x18	; 24
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    114a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    114e:	82 e2       	ldi	r24, 0x22	; 34
    1150:	38 c0       	rjmp	.+112    	; 0x11c2 <usbPoll+0x116>
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	f9 f4       	brne	.+62     	; 0x1194 <usbPoll+0xe8>
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	81 11       	cpse	r24, r1
    115a:	08 c0       	rjmp	.+16     	; 0x116c <usbPoll+0xc0>
    115c:	8a e6       	ldi	r24, 0x6A	; 106
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    1164:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	2b c0       	rjmp	.+86     	; 0x11c2 <usbPoll+0x116>
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	41 f4       	brne	.+16     	; 0x1180 <usbPoll+0xd4>
    1170:	88 e5       	ldi	r24, 0x58	; 88
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    1178:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    117c:	82 e1       	ldi	r24, 0x12	; 18
    117e:	21 c0       	rjmp	.+66     	; 0x11c2 <usbPoll+0x116>
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	e1 f4       	brne	.+56     	; 0x11bc <usbPoll+0x110>
    1184:	8c e4       	ldi	r24, 0x4C	; 76
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    118c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    1190:	8c e0       	ldi	r24, 0x0C	; 12
    1192:	17 c0       	rjmp	.+46     	; 0x11c2 <usbPoll+0x116>
    1194:	81 32       	cpi	r24, 0x21	; 33
    1196:	41 f4       	brne	.+16     	; 0x11a8 <usbPoll+0xfc>
    1198:	8a e2       	ldi	r24, 0x2A	; 42
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    11a0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    11a4:	89 e0       	ldi	r24, 0x09	; 9
    11a6:	0d c0       	rjmp	.+26     	; 0x11c2 <usbPoll+0x116>
    11a8:	82 32       	cpi	r24, 0x22	; 34
    11aa:	51 f4       	brne	.+20     	; 0x11c0 <usbPoll+0x114>
    11ac:	84 ee       	ldi	r24, 0xE4	; 228
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <usbMsgPtr+0x1>
    11b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <usbMsgPtr>
    11b8:	84 e3       	ldi	r24, 0x34	; 52
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <usbPoll+0x116>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <usbPoll+0x116>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e4       	ldi	r25, 0x40	; 64
    11c4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <usbMsgFlags>
    11c8:	24 c0       	rjmp	.+72     	; 0x1212 <usbPoll+0x166>
    11ca:	88 30       	cpi	r24, 0x08	; 8
    11cc:	99 f0       	breq	.+38     	; 0x11f4 <usbPoll+0x148>
    11ce:	89 30       	cpi	r24, 0x09	; 9
    11d0:	31 f4       	brne	.+12     	; 0x11de <usbPoll+0x132>
    11d2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <usbConfiguration>
    11d6:	2f e8       	ldi	r18, 0x8F	; 143
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <usbPoll+0x15e>
    11de:	8a 30       	cpi	r24, 0x0A	; 10
    11e0:	69 f0       	breq	.+26     	; 0x11fc <usbPoll+0x150>
    11e2:	8b 30       	cpi	r24, 0x0B	; 11
    11e4:	79 f4       	brne	.+30     	; 0x1204 <usbPoll+0x158>
    11e6:	8b e4       	ldi	r24, 0x4B	; 75
    11e8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <usbTxStatus1+0x1>
    11ec:	2f e8       	ldi	r18, 0x8F	; 143
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0b c0       	rjmp	.+22     	; 0x120a <usbPoll+0x15e>
    11f4:	25 ea       	ldi	r18, 0xA5	; 165
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <usbPoll+0x15e>
    11fc:	2f e8       	ldi	r18, 0x8F	; 143
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	03 c0       	rjmp	.+6      	; 0x120a <usbPoll+0x15e>
    1204:	2f e8       	ldi	r18, 0x8F	; 143
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	30 93 a1 00 	sts	0x00A1, r19	; 0x8000a1 <usbMsgPtr+0x1>
    120e:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <usbMsgPtr>
    1212:	9f 81       	ldd	r25, Y+7	; 0x07
    1214:	91 11       	cpse	r25, r1
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <usbPoll+0x174>
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	98 17       	cp	r25, r24
    121c:	08 f4       	brcc	.+2      	; 0x1220 <usbPoll+0x174>
    121e:	89 2f       	mov	r24, r25
    1220:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
    1224:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <usbRxLen>
    1228:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <usbTxLen>
    122c:	84 ff       	sbrs	r24, 4
    122e:	2b c0       	rjmp	.+86     	; 0x1286 <usbPoll+0x1da>
    1230:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <usbMsgLen>
    1234:	8f 3f       	cpi	r24, 0xFF	; 255
    1236:	39 f1       	breq	.+78     	; 0x1286 <usbPoll+0x1da>
    1238:	89 30       	cpi	r24, 0x09	; 9
    123a:	10 f4       	brcc	.+4      	; 0x1240 <usbPoll+0x194>
    123c:	68 2f       	mov	r22, r24
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <usbPoll+0x196>
    1240:	68 e0       	ldi	r22, 0x08	; 8
    1242:	86 1b       	sub	r24, r22
    1244:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
    1248:	e6 e8       	ldi	r30, 0x86	; 134
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	90 81       	ld	r25, Z
    124e:	88 e8       	ldi	r24, 0x88	; 136
    1250:	89 27       	eor	r24, r25
    1252:	80 83       	st	Z, r24
    1254:	87 e8       	ldi	r24, 0x87	; 135
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 07 08 	call	0x100e	; 0x100e <usbDeviceRead>
    125c:	c8 2f       	mov	r28, r24
    125e:	89 30       	cpi	r24, 0x09	; 9
    1260:	60 f4       	brcc	.+24     	; 0x127a <usbPoll+0x1ce>
    1262:	68 2f       	mov	r22, r24
    1264:	87 e8       	ldi	r24, 0x87	; 135
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usbCrc16Append>
    126c:	cc 5f       	subi	r28, 0xFC	; 252
    126e:	cc 30       	cpi	r28, 0x0C	; 12
    1270:	40 f4       	brcc	.+16     	; 0x1282 <usbPoll+0x1d6>
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <usbPoll+0x1d6>
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
    1280:	ce e1       	ldi	r28, 0x1E	; 30
    1282:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <usbTxLen>
    1286:	94 e1       	ldi	r25, 0x14	; 20
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <usbPoll+0x1e6>
    128a:	80 b3       	in	r24, 0x10	; 16
    128c:	84 71       	andi	r24, 0x14	; 20
    128e:	39 f4       	brne	.+14     	; 0x129e <usbPoll+0x1f2>
    1290:	91 50       	subi	r25, 0x01	; 1
    1292:	91 11       	cpse	r25, r1
    1294:	fa cf       	rjmp	.-12     	; 0x128a <usbPoll+0x1de>
    1296:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <usbNewDeviceAddr>
    129a:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <usbDeviceAddr>
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <usbInit>:
    12a4:	85 b7       	in	r24, 0x35	; 53
    12a6:	82 60       	ori	r24, 0x02	; 2
    12a8:	85 bf       	out	0x35, r24	; 53
    12aa:	8b b7       	in	r24, 0x3b	; 59
    12ac:	80 64       	ori	r24, 0x40	; 64
    12ae:	8b bf       	out	0x3b, r24	; 59
    12b0:	e1 e9       	ldi	r30, 0x91	; 145
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8b e4       	ldi	r24, 0x4B	; 75
    12b6:	81 83       	std	Z+1, r24	; 0x01
    12b8:	8a e5       	ldi	r24, 0x5A	; 90
    12ba:	80 83       	st	Z, r24
    12bc:	08 95       	ret

000012be <__subsf3>:
    12be:	50 58       	subi	r21, 0x80	; 128

000012c0 <__addsf3>:
    12c0:	bb 27       	eor	r27, r27
    12c2:	aa 27       	eor	r26, r26
    12c4:	0e 94 77 09 	call	0x12ee	; 0x12ee <__addsf3x>
    12c8:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_round>
    12cc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__fp_pscA>
    12d0:	38 f0       	brcs	.+14     	; 0x12e0 <__addsf3+0x20>
    12d2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscB>
    12d6:	20 f0       	brcs	.+8      	; 0x12e0 <__addsf3+0x20>
    12d8:	39 f4       	brne	.+14     	; 0x12e8 <__addsf3+0x28>
    12da:	9f 3f       	cpi	r25, 0xFF	; 255
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <__addsf3+0x24>
    12de:	26 f4       	brtc	.+8      	; 0x12e8 <__addsf3+0x28>
    12e0:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_nan>
    12e4:	0e f4       	brtc	.+2      	; 0x12e8 <__addsf3+0x28>
    12e6:	e0 95       	com	r30
    12e8:	e7 fb       	bst	r30, 7
    12ea:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>

000012ee <__addsf3x>:
    12ee:	e9 2f       	mov	r30, r25
    12f0:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_split3>
    12f4:	58 f3       	brcs	.-42     	; 0x12cc <__addsf3+0xc>
    12f6:	ba 17       	cp	r27, r26
    12f8:	62 07       	cpc	r22, r18
    12fa:	73 07       	cpc	r23, r19
    12fc:	84 07       	cpc	r24, r20
    12fe:	95 07       	cpc	r25, r21
    1300:	20 f0       	brcs	.+8      	; 0x130a <__addsf3x+0x1c>
    1302:	79 f4       	brne	.+30     	; 0x1322 <__addsf3x+0x34>
    1304:	a6 f5       	brtc	.+104    	; 0x136e <__addsf3x+0x80>
    1306:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_zero>
    130a:	0e f4       	brtc	.+2      	; 0x130e <__addsf3x+0x20>
    130c:	e0 95       	com	r30
    130e:	0b 2e       	mov	r0, r27
    1310:	ba 2f       	mov	r27, r26
    1312:	a0 2d       	mov	r26, r0
    1314:	0b 01       	movw	r0, r22
    1316:	b9 01       	movw	r22, r18
    1318:	90 01       	movw	r18, r0
    131a:	0c 01       	movw	r0, r24
    131c:	ca 01       	movw	r24, r20
    131e:	a0 01       	movw	r20, r0
    1320:	11 24       	eor	r1, r1
    1322:	ff 27       	eor	r31, r31
    1324:	59 1b       	sub	r21, r25
    1326:	99 f0       	breq	.+38     	; 0x134e <__addsf3x+0x60>
    1328:	59 3f       	cpi	r21, 0xF9	; 249
    132a:	50 f4       	brcc	.+20     	; 0x1340 <__addsf3x+0x52>
    132c:	50 3e       	cpi	r21, 0xE0	; 224
    132e:	68 f1       	brcs	.+90     	; 0x138a <__addsf3x+0x9c>
    1330:	1a 16       	cp	r1, r26
    1332:	f0 40       	sbci	r31, 0x00	; 0
    1334:	a2 2f       	mov	r26, r18
    1336:	23 2f       	mov	r18, r19
    1338:	34 2f       	mov	r19, r20
    133a:	44 27       	eor	r20, r20
    133c:	58 5f       	subi	r21, 0xF8	; 248
    133e:	f3 cf       	rjmp	.-26     	; 0x1326 <__addsf3x+0x38>
    1340:	46 95       	lsr	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	a7 95       	ror	r26
    1348:	f0 40       	sbci	r31, 0x00	; 0
    134a:	53 95       	inc	r21
    134c:	c9 f7       	brne	.-14     	; 0x1340 <__addsf3x+0x52>
    134e:	7e f4       	brtc	.+30     	; 0x136e <__addsf3x+0x80>
    1350:	1f 16       	cp	r1, r31
    1352:	ba 0b       	sbc	r27, r26
    1354:	62 0b       	sbc	r22, r18
    1356:	73 0b       	sbc	r23, r19
    1358:	84 0b       	sbc	r24, r20
    135a:	ba f0       	brmi	.+46     	; 0x138a <__addsf3x+0x9c>
    135c:	91 50       	subi	r25, 0x01	; 1
    135e:	a1 f0       	breq	.+40     	; 0x1388 <__addsf3x+0x9a>
    1360:	ff 0f       	add	r31, r31
    1362:	bb 1f       	adc	r27, r27
    1364:	66 1f       	adc	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	c2 f7       	brpl	.-16     	; 0x135c <__addsf3x+0x6e>
    136c:	0e c0       	rjmp	.+28     	; 0x138a <__addsf3x+0x9c>
    136e:	ba 0f       	add	r27, r26
    1370:	62 1f       	adc	r22, r18
    1372:	73 1f       	adc	r23, r19
    1374:	84 1f       	adc	r24, r20
    1376:	48 f4       	brcc	.+18     	; 0x138a <__addsf3x+0x9c>
    1378:	87 95       	ror	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b7 95       	ror	r27
    1380:	f7 95       	ror	r31
    1382:	9e 3f       	cpi	r25, 0xFE	; 254
    1384:	08 f0       	brcs	.+2      	; 0x1388 <__addsf3x+0x9a>
    1386:	b0 cf       	rjmp	.-160    	; 0x12e8 <__addsf3+0x28>
    1388:	93 95       	inc	r25
    138a:	88 0f       	add	r24, r24
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__addsf3x+0xa2>
    138e:	99 27       	eor	r25, r25
    1390:	ee 0f       	add	r30, r30
    1392:	97 95       	ror	r25
    1394:	87 95       	ror	r24
    1396:	08 95       	ret

00001398 <__cmpsf2>:
    1398:	0e 94 b6 0a 	call	0x156c	; 0x156c <__fp_cmp>
    139c:	08 f4       	brcc	.+2      	; 0x13a0 <__cmpsf2+0x8>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	08 95       	ret

000013a2 <__divsf3>:
    13a2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__divsf3x>
    13a6:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_round>
    13aa:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscB>
    13ae:	58 f0       	brcs	.+22     	; 0x13c6 <__divsf3+0x24>
    13b0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__fp_pscA>
    13b4:	40 f0       	brcs	.+16     	; 0x13c6 <__divsf3+0x24>
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <__divsf3+0x20>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	29 f0       	breq	.+10     	; 0x13c6 <__divsf3+0x24>
    13bc:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>
    13c0:	51 11       	cpse	r21, r1
    13c2:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_szero>
    13c6:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_nan>

000013ca <__divsf3x>:
    13ca:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_split3>
    13ce:	68 f3       	brcs	.-38     	; 0x13aa <__divsf3+0x8>

000013d0 <__divsf3_pse>:
    13d0:	99 23       	and	r25, r25
    13d2:	b1 f3       	breq	.-20     	; 0x13c0 <__divsf3+0x1e>
    13d4:	55 23       	and	r21, r21
    13d6:	91 f3       	breq	.-28     	; 0x13bc <__divsf3+0x1a>
    13d8:	95 1b       	sub	r25, r21
    13da:	55 0b       	sbc	r21, r21
    13dc:	bb 27       	eor	r27, r27
    13de:	aa 27       	eor	r26, r26
    13e0:	62 17       	cp	r22, r18
    13e2:	73 07       	cpc	r23, r19
    13e4:	84 07       	cpc	r24, r20
    13e6:	38 f0       	brcs	.+14     	; 0x13f6 <__divsf3_pse+0x26>
    13e8:	9f 5f       	subi	r25, 0xFF	; 255
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255
    13ec:	22 0f       	add	r18, r18
    13ee:	33 1f       	adc	r19, r19
    13f0:	44 1f       	adc	r20, r20
    13f2:	aa 1f       	adc	r26, r26
    13f4:	a9 f3       	breq	.-22     	; 0x13e0 <__divsf3_pse+0x10>
    13f6:	35 d0       	rcall	.+106    	; 0x1462 <__divsf3_pse+0x92>
    13f8:	0e 2e       	mov	r0, r30
    13fa:	3a f0       	brmi	.+14     	; 0x140a <__divsf3_pse+0x3a>
    13fc:	e0 e8       	ldi	r30, 0x80	; 128
    13fe:	32 d0       	rcall	.+100    	; 0x1464 <__divsf3_pse+0x94>
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	50 40       	sbci	r21, 0x00	; 0
    1404:	e6 95       	lsr	r30
    1406:	00 1c       	adc	r0, r0
    1408:	ca f7       	brpl	.-14     	; 0x13fc <__divsf3_pse+0x2c>
    140a:	2b d0       	rcall	.+86     	; 0x1462 <__divsf3_pse+0x92>
    140c:	fe 2f       	mov	r31, r30
    140e:	29 d0       	rcall	.+82     	; 0x1462 <__divsf3_pse+0x92>
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	bb 1f       	adc	r27, r27
    1418:	26 17       	cp	r18, r22
    141a:	37 07       	cpc	r19, r23
    141c:	48 07       	cpc	r20, r24
    141e:	ab 07       	cpc	r26, r27
    1420:	b0 e8       	ldi	r27, 0x80	; 128
    1422:	09 f0       	breq	.+2      	; 0x1426 <__divsf3_pse+0x56>
    1424:	bb 0b       	sbc	r27, r27
    1426:	80 2d       	mov	r24, r0
    1428:	bf 01       	movw	r22, r30
    142a:	ff 27       	eor	r31, r31
    142c:	93 58       	subi	r25, 0x83	; 131
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	3a f0       	brmi	.+14     	; 0x1440 <__divsf3_pse+0x70>
    1432:	9e 3f       	cpi	r25, 0xFE	; 254
    1434:	51 05       	cpc	r21, r1
    1436:	78 f0       	brcs	.+30     	; 0x1456 <__divsf3_pse+0x86>
    1438:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>
    143c:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_szero>
    1440:	5f 3f       	cpi	r21, 0xFF	; 255
    1442:	e4 f3       	brlt	.-8      	; 0x143c <__divsf3_pse+0x6c>
    1444:	98 3e       	cpi	r25, 0xE8	; 232
    1446:	d4 f3       	brlt	.-12     	; 0x143c <__divsf3_pse+0x6c>
    1448:	86 95       	lsr	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	b7 95       	ror	r27
    1450:	f7 95       	ror	r31
    1452:	9f 5f       	subi	r25, 0xFF	; 255
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__divsf3_pse+0x78>
    1456:	88 0f       	add	r24, r24
    1458:	91 1d       	adc	r25, r1
    145a:	96 95       	lsr	r25
    145c:	87 95       	ror	r24
    145e:	97 f9       	bld	r25, 7
    1460:	08 95       	ret
    1462:	e1 e0       	ldi	r30, 0x01	; 1
    1464:	66 0f       	add	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	bb 1f       	adc	r27, r27
    146c:	62 17       	cp	r22, r18
    146e:	73 07       	cpc	r23, r19
    1470:	84 07       	cpc	r24, r20
    1472:	ba 07       	cpc	r27, r26
    1474:	20 f0       	brcs	.+8      	; 0x147e <__divsf3_pse+0xae>
    1476:	62 1b       	sub	r22, r18
    1478:	73 0b       	sbc	r23, r19
    147a:	84 0b       	sbc	r24, r20
    147c:	ba 0b       	sbc	r27, r26
    147e:	ee 1f       	adc	r30, r30
    1480:	88 f7       	brcc	.-30     	; 0x1464 <__divsf3_pse+0x94>
    1482:	e0 95       	com	r30
    1484:	08 95       	ret

00001486 <__fixsfsi>:
    1486:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixunssfsi>
    148a:	68 94       	set
    148c:	b1 11       	cpse	r27, r1
    148e:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_szero>
    1492:	08 95       	ret

00001494 <__fixunssfsi>:
    1494:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_splitA>
    1498:	88 f0       	brcs	.+34     	; 0x14bc <__fixunssfsi+0x28>
    149a:	9f 57       	subi	r25, 0x7F	; 127
    149c:	98 f0       	brcs	.+38     	; 0x14c4 <__fixunssfsi+0x30>
    149e:	b9 2f       	mov	r27, r25
    14a0:	99 27       	eor	r25, r25
    14a2:	b7 51       	subi	r27, 0x17	; 23
    14a4:	b0 f0       	brcs	.+44     	; 0x14d2 <__fixunssfsi+0x3e>
    14a6:	e1 f0       	breq	.+56     	; 0x14e0 <__fixunssfsi+0x4c>
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	1a f0       	brmi	.+6      	; 0x14b8 <__fixunssfsi+0x24>
    14b2:	ba 95       	dec	r27
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__fixunssfsi+0x14>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <__fixunssfsi+0x4c>
    14b8:	b1 30       	cpi	r27, 0x01	; 1
    14ba:	91 f0       	breq	.+36     	; 0x14e0 <__fixunssfsi+0x4c>
    14bc:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_zero>
    14c0:	b1 e0       	ldi	r27, 0x01	; 1
    14c2:	08 95       	ret
    14c4:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_zero>
    14c8:	67 2f       	mov	r22, r23
    14ca:	78 2f       	mov	r23, r24
    14cc:	88 27       	eor	r24, r24
    14ce:	b8 5f       	subi	r27, 0xF8	; 248
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <__fixunssfsi+0x4c>
    14d2:	b9 3f       	cpi	r27, 0xF9	; 249
    14d4:	cc f3       	brlt	.-14     	; 0x14c8 <__fixunssfsi+0x34>
    14d6:	86 95       	lsr	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	b3 95       	inc	r27
    14de:	d9 f7       	brne	.-10     	; 0x14d6 <__fixunssfsi+0x42>
    14e0:	3e f4       	brtc	.+14     	; 0x14f0 <__fixunssfsi+0x5c>
    14e2:	90 95       	com	r25
    14e4:	80 95       	com	r24
    14e6:	70 95       	com	r23
    14e8:	61 95       	neg	r22
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <__floatunsisf>:
    14f2:	e8 94       	clt
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <__floatsisf+0x12>

000014f6 <__floatsisf>:
    14f6:	97 fb       	bst	r25, 7
    14f8:	3e f4       	brtc	.+14     	; 0x1508 <__floatsisf+0x12>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	99 23       	and	r25, r25
    150a:	a9 f0       	breq	.+42     	; 0x1536 <__floatsisf+0x40>
    150c:	f9 2f       	mov	r31, r25
    150e:	96 e9       	ldi	r25, 0x96	; 150
    1510:	bb 27       	eor	r27, r27
    1512:	93 95       	inc	r25
    1514:	f6 95       	lsr	r31
    1516:	87 95       	ror	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	b7 95       	ror	r27
    151e:	f1 11       	cpse	r31, r1
    1520:	f8 cf       	rjmp	.-16     	; 0x1512 <__floatsisf+0x1c>
    1522:	fa f4       	brpl	.+62     	; 0x1562 <__floatsisf+0x6c>
    1524:	bb 0f       	add	r27, r27
    1526:	11 f4       	brne	.+4      	; 0x152c <__floatsisf+0x36>
    1528:	60 ff       	sbrs	r22, 0
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <__floatsisf+0x6c>
    152c:	6f 5f       	subi	r22, 0xFF	; 255
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	16 c0       	rjmp	.+44     	; 0x1562 <__floatsisf+0x6c>
    1536:	88 23       	and	r24, r24
    1538:	11 f0       	breq	.+4      	; 0x153e <__floatsisf+0x48>
    153a:	96 e9       	ldi	r25, 0x96	; 150
    153c:	11 c0       	rjmp	.+34     	; 0x1560 <__floatsisf+0x6a>
    153e:	77 23       	and	r23, r23
    1540:	21 f0       	breq	.+8      	; 0x154a <__floatsisf+0x54>
    1542:	9e e8       	ldi	r25, 0x8E	; 142
    1544:	87 2f       	mov	r24, r23
    1546:	76 2f       	mov	r23, r22
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <__floatsisf+0x5e>
    154a:	66 23       	and	r22, r22
    154c:	71 f0       	breq	.+28     	; 0x156a <__floatsisf+0x74>
    154e:	96 e8       	ldi	r25, 0x86	; 134
    1550:	86 2f       	mov	r24, r22
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	2a f0       	brmi	.+10     	; 0x1562 <__floatsisf+0x6c>
    1558:	9a 95       	dec	r25
    155a:	66 0f       	add	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	da f7       	brpl	.-10     	; 0x1558 <__floatsisf+0x62>
    1562:	88 0f       	add	r24, r24
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret

0000156c <__fp_cmp>:
    156c:	99 0f       	add	r25, r25
    156e:	00 08       	sbc	r0, r0
    1570:	55 0f       	add	r21, r21
    1572:	aa 0b       	sbc	r26, r26
    1574:	e0 e8       	ldi	r30, 0x80	; 128
    1576:	fe ef       	ldi	r31, 0xFE	; 254
    1578:	16 16       	cp	r1, r22
    157a:	17 06       	cpc	r1, r23
    157c:	e8 07       	cpc	r30, r24
    157e:	f9 07       	cpc	r31, r25
    1580:	c0 f0       	brcs	.+48     	; 0x15b2 <__fp_cmp+0x46>
    1582:	12 16       	cp	r1, r18
    1584:	13 06       	cpc	r1, r19
    1586:	e4 07       	cpc	r30, r20
    1588:	f5 07       	cpc	r31, r21
    158a:	98 f0       	brcs	.+38     	; 0x15b2 <__fp_cmp+0x46>
    158c:	62 1b       	sub	r22, r18
    158e:	73 0b       	sbc	r23, r19
    1590:	84 0b       	sbc	r24, r20
    1592:	95 0b       	sbc	r25, r21
    1594:	39 f4       	brne	.+14     	; 0x15a4 <__fp_cmp+0x38>
    1596:	0a 26       	eor	r0, r26
    1598:	61 f0       	breq	.+24     	; 0x15b2 <__fp_cmp+0x46>
    159a:	23 2b       	or	r18, r19
    159c:	24 2b       	or	r18, r20
    159e:	25 2b       	or	r18, r21
    15a0:	21 f4       	brne	.+8      	; 0x15aa <__fp_cmp+0x3e>
    15a2:	08 95       	ret
    15a4:	0a 26       	eor	r0, r26
    15a6:	09 f4       	brne	.+2      	; 0x15aa <__fp_cmp+0x3e>
    15a8:	a1 40       	sbci	r26, 0x01	; 1
    15aa:	a6 95       	lsr	r26
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	81 1d       	adc	r24, r1
    15b0:	81 1d       	adc	r24, r1
    15b2:	08 95       	ret

000015b4 <__fp_inf>:
    15b4:	97 f9       	bld	r25, 7
    15b6:	9f 67       	ori	r25, 0x7F	; 127
    15b8:	80 e8       	ldi	r24, 0x80	; 128
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	08 95       	ret

000015c0 <__fp_nan>:
    15c0:	9f ef       	ldi	r25, 0xFF	; 255
    15c2:	80 ec       	ldi	r24, 0xC0	; 192
    15c4:	08 95       	ret

000015c6 <__fp_pscA>:
    15c6:	00 24       	eor	r0, r0
    15c8:	0a 94       	dec	r0
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	18 06       	cpc	r1, r24
    15d0:	09 06       	cpc	r0, r25
    15d2:	08 95       	ret

000015d4 <__fp_pscB>:
    15d4:	00 24       	eor	r0, r0
    15d6:	0a 94       	dec	r0
    15d8:	12 16       	cp	r1, r18
    15da:	13 06       	cpc	r1, r19
    15dc:	14 06       	cpc	r1, r20
    15de:	05 06       	cpc	r0, r21
    15e0:	08 95       	ret

000015e2 <__fp_round>:
    15e2:	09 2e       	mov	r0, r25
    15e4:	03 94       	inc	r0
    15e6:	00 0c       	add	r0, r0
    15e8:	11 f4       	brne	.+4      	; 0x15ee <__fp_round+0xc>
    15ea:	88 23       	and	r24, r24
    15ec:	52 f0       	brmi	.+20     	; 0x1602 <__fp_round+0x20>
    15ee:	bb 0f       	add	r27, r27
    15f0:	40 f4       	brcc	.+16     	; 0x1602 <__fp_round+0x20>
    15f2:	bf 2b       	or	r27, r31
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__fp_round+0x18>
    15f6:	60 ff       	sbrs	r22, 0
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__fp_round+0x20>
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	08 95       	ret

00001604 <__fp_split3>:
    1604:	57 fd       	sbrc	r21, 7
    1606:	90 58       	subi	r25, 0x80	; 128
    1608:	44 0f       	add	r20, r20
    160a:	55 1f       	adc	r21, r21
    160c:	59 f0       	breq	.+22     	; 0x1624 <__fp_splitA+0x10>
    160e:	5f 3f       	cpi	r21, 0xFF	; 255
    1610:	71 f0       	breq	.+28     	; 0x162e <__fp_splitA+0x1a>
    1612:	47 95       	ror	r20

00001614 <__fp_splitA>:
    1614:	88 0f       	add	r24, r24
    1616:	97 fb       	bst	r25, 7
    1618:	99 1f       	adc	r25, r25
    161a:	61 f0       	breq	.+24     	; 0x1634 <__fp_splitA+0x20>
    161c:	9f 3f       	cpi	r25, 0xFF	; 255
    161e:	79 f0       	breq	.+30     	; 0x163e <__fp_splitA+0x2a>
    1620:	87 95       	ror	r24
    1622:	08 95       	ret
    1624:	12 16       	cp	r1, r18
    1626:	13 06       	cpc	r1, r19
    1628:	14 06       	cpc	r1, r20
    162a:	55 1f       	adc	r21, r21
    162c:	f2 cf       	rjmp	.-28     	; 0x1612 <__fp_split3+0xe>
    162e:	46 95       	lsr	r20
    1630:	f1 df       	rcall	.-30     	; 0x1614 <__fp_splitA>
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <__fp_splitA+0x30>
    1634:	16 16       	cp	r1, r22
    1636:	17 06       	cpc	r1, r23
    1638:	18 06       	cpc	r1, r24
    163a:	99 1f       	adc	r25, r25
    163c:	f1 cf       	rjmp	.-30     	; 0x1620 <__fp_splitA+0xc>
    163e:	86 95       	lsr	r24
    1640:	71 05       	cpc	r23, r1
    1642:	61 05       	cpc	r22, r1
    1644:	08 94       	sec
    1646:	08 95       	ret

00001648 <__fp_zero>:
    1648:	e8 94       	clt

0000164a <__fp_szero>:
    164a:	bb 27       	eor	r27, r27
    164c:	66 27       	eor	r22, r22
    164e:	77 27       	eor	r23, r23
    1650:	cb 01       	movw	r24, r22
    1652:	97 f9       	bld	r25, 7
    1654:	08 95       	ret

00001656 <__mulsf3>:
    1656:	0e 94 3e 0b 	call	0x167c	; 0x167c <__mulsf3x>
    165a:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_round>
    165e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__fp_pscA>
    1662:	38 f0       	brcs	.+14     	; 0x1672 <__mulsf3+0x1c>
    1664:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscB>
    1668:	20 f0       	brcs	.+8      	; 0x1672 <__mulsf3+0x1c>
    166a:	95 23       	and	r25, r21
    166c:	11 f0       	breq	.+4      	; 0x1672 <__mulsf3+0x1c>
    166e:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>
    1672:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_nan>
    1676:	11 24       	eor	r1, r1
    1678:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_szero>

0000167c <__mulsf3x>:
    167c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_split3>
    1680:	70 f3       	brcs	.-36     	; 0x165e <__mulsf3+0x8>

00001682 <__mulsf3_pse>:
    1682:	95 9f       	mul	r25, r21
    1684:	c1 f3       	breq	.-16     	; 0x1676 <__mulsf3+0x20>
    1686:	95 0f       	add	r25, r21
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	55 1f       	adc	r21, r21
    168c:	62 9f       	mul	r22, r18
    168e:	f0 01       	movw	r30, r0
    1690:	72 9f       	mul	r23, r18
    1692:	bb 27       	eor	r27, r27
    1694:	f0 0d       	add	r31, r0
    1696:	b1 1d       	adc	r27, r1
    1698:	63 9f       	mul	r22, r19
    169a:	aa 27       	eor	r26, r26
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	aa 1f       	adc	r26, r26
    16a2:	64 9f       	mul	r22, r20
    16a4:	66 27       	eor	r22, r22
    16a6:	b0 0d       	add	r27, r0
    16a8:	a1 1d       	adc	r26, r1
    16aa:	66 1f       	adc	r22, r22
    16ac:	82 9f       	mul	r24, r18
    16ae:	22 27       	eor	r18, r18
    16b0:	b0 0d       	add	r27, r0
    16b2:	a1 1d       	adc	r26, r1
    16b4:	62 1f       	adc	r22, r18
    16b6:	73 9f       	mul	r23, r19
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	83 9f       	mul	r24, r19
    16c0:	a0 0d       	add	r26, r0
    16c2:	61 1d       	adc	r22, r1
    16c4:	22 1f       	adc	r18, r18
    16c6:	74 9f       	mul	r23, r20
    16c8:	33 27       	eor	r19, r19
    16ca:	a0 0d       	add	r26, r0
    16cc:	61 1d       	adc	r22, r1
    16ce:	23 1f       	adc	r18, r19
    16d0:	84 9f       	mul	r24, r20
    16d2:	60 0d       	add	r22, r0
    16d4:	21 1d       	adc	r18, r1
    16d6:	82 2f       	mov	r24, r18
    16d8:	76 2f       	mov	r23, r22
    16da:	6a 2f       	mov	r22, r26
    16dc:	11 24       	eor	r1, r1
    16de:	9f 57       	subi	r25, 0x7F	; 127
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	9a f0       	brmi	.+38     	; 0x170a <__mulsf3_pse+0x88>
    16e4:	f1 f0       	breq	.+60     	; 0x1722 <__mulsf3_pse+0xa0>
    16e6:	88 23       	and	r24, r24
    16e8:	4a f0       	brmi	.+18     	; 0x16fc <__mulsf3_pse+0x7a>
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	bb 1f       	adc	r27, r27
    16f0:	66 1f       	adc	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	91 50       	subi	r25, 0x01	; 1
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	a9 f7       	brne	.-22     	; 0x16e6 <__mulsf3_pse+0x64>
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	51 05       	cpc	r21, r1
    1700:	80 f0       	brcs	.+32     	; 0x1722 <__mulsf3_pse+0xa0>
    1702:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>
    1706:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_szero>
    170a:	5f 3f       	cpi	r21, 0xFF	; 255
    170c:	e4 f3       	brlt	.-8      	; 0x1706 <__mulsf3_pse+0x84>
    170e:	98 3e       	cpi	r25, 0xE8	; 232
    1710:	d4 f3       	brlt	.-12     	; 0x1706 <__mulsf3_pse+0x84>
    1712:	86 95       	lsr	r24
    1714:	77 95       	ror	r23
    1716:	67 95       	ror	r22
    1718:	b7 95       	ror	r27
    171a:	f7 95       	ror	r31
    171c:	e7 95       	ror	r30
    171e:	9f 5f       	subi	r25, 0xFF	; 255
    1720:	c1 f7       	brne	.-16     	; 0x1712 <__mulsf3_pse+0x90>
    1722:	fe 2b       	or	r31, r30
    1724:	88 0f       	add	r24, r24
    1726:	91 1d       	adc	r25, r1
    1728:	96 95       	lsr	r25
    172a:	87 95       	ror	r24
    172c:	97 f9       	bld	r25, 7
    172e:	08 95       	ret

00001730 <pow>:
    1730:	fa 01       	movw	r30, r20
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	30 96       	adiw	r30, 0x00	; 0
    1738:	21 05       	cpc	r18, r1
    173a:	31 05       	cpc	r19, r1
    173c:	a1 f1       	breq	.+104    	; 0x17a6 <pow+0x76>
    173e:	61 15       	cp	r22, r1
    1740:	71 05       	cpc	r23, r1
    1742:	61 f4       	brne	.+24     	; 0x175c <pow+0x2c>
    1744:	80 38       	cpi	r24, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	9b 07       	cpc	r25, r27
    174a:	49 f1       	breq	.+82     	; 0x179e <pow+0x6e>
    174c:	68 94       	set
    174e:	90 38       	cpi	r25, 0x80	; 128
    1750:	81 05       	cpc	r24, r1
    1752:	61 f0       	breq	.+24     	; 0x176c <pow+0x3c>
    1754:	80 38       	cpi	r24, 0x80	; 128
    1756:	bf ef       	ldi	r27, 0xFF	; 255
    1758:	9b 07       	cpc	r25, r27
    175a:	41 f0       	breq	.+16     	; 0x176c <pow+0x3c>
    175c:	99 23       	and	r25, r25
    175e:	4a f5       	brpl	.+82     	; 0x17b2 <pow+0x82>
    1760:	ff 3f       	cpi	r31, 0xFF	; 255
    1762:	e1 05       	cpc	r30, r1
    1764:	31 05       	cpc	r19, r1
    1766:	21 05       	cpc	r18, r1
    1768:	19 f1       	breq	.+70     	; 0x17b0 <pow+0x80>
    176a:	e8 94       	clt
    176c:	08 94       	sec
    176e:	e7 95       	ror	r30
    1770:	d9 01       	movw	r26, r18
    1772:	aa 23       	and	r26, r26
    1774:	29 f4       	brne	.+10     	; 0x1780 <pow+0x50>
    1776:	ab 2f       	mov	r26, r27
    1778:	be 2f       	mov	r27, r30
    177a:	f8 5f       	subi	r31, 0xF8	; 248
    177c:	d0 f3       	brcs	.-12     	; 0x1772 <pow+0x42>
    177e:	10 c0       	rjmp	.+32     	; 0x17a0 <pow+0x70>
    1780:	ff 5f       	subi	r31, 0xFF	; 255
    1782:	70 f4       	brcc	.+28     	; 0x17a0 <pow+0x70>
    1784:	a6 95       	lsr	r26
    1786:	e0 f7       	brcc	.-8      	; 0x1780 <pow+0x50>
    1788:	f7 39       	cpi	r31, 0x97	; 151
    178a:	50 f0       	brcs	.+20     	; 0x17a0 <pow+0x70>
    178c:	19 f0       	breq	.+6      	; 0x1794 <pow+0x64>
    178e:	ff 3a       	cpi	r31, 0xAF	; 175
    1790:	38 f4       	brcc	.+14     	; 0x17a0 <pow+0x70>
    1792:	9f 77       	andi	r25, 0x7F	; 127
    1794:	9f 93       	push	r25
    1796:	0d d0       	rcall	.+26     	; 0x17b2 <pow+0x82>
    1798:	0f 90       	pop	r0
    179a:	07 fc       	sbrc	r0, 7
    179c:	90 58       	subi	r25, 0x80	; 128
    179e:	08 95       	ret
    17a0:	46 f0       	brts	.+16     	; 0x17b2 <pow+0x82>
    17a2:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_nan>
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	80 e8       	ldi	r24, 0x80	; 128
    17ac:	9f e3       	ldi	r25, 0x3F	; 63
    17ae:	08 95       	ret
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	9f 77       	andi	r25, 0x7F	; 127
    17b4:	5f 93       	push	r21
    17b6:	4f 93       	push	r20
    17b8:	3f 93       	push	r19
    17ba:	2f 93       	push	r18
    17bc:	0e 94 93 0c 	call	0x1926	; 0x1926 <log>
    17c0:	2f 91       	pop	r18
    17c2:	3f 91       	pop	r19
    17c4:	4f 91       	pop	r20
    17c6:	5f 91       	pop	r21
    17c8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3>
    17cc:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <exp>
    17d0:	29 f4       	brne	.+10     	; 0x17dc <pow+0xac>
    17d2:	16 f0       	brts	.+4      	; 0x17d8 <pow+0xa8>
    17d4:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>
    17d8:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_zero>
    17dc:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_nan>

000017e0 <exp>:
    17e0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_splitA>
    17e4:	a8 f3       	brcs	.-22     	; 0x17d0 <pow+0xa0>
    17e6:	96 38       	cpi	r25, 0x86	; 134
    17e8:	a0 f7       	brcc	.-24     	; 0x17d2 <pow+0xa2>
    17ea:	07 f8       	bld	r0, 7
    17ec:	0f 92       	push	r0
    17ee:	e8 94       	clt
    17f0:	2b e3       	ldi	r18, 0x3B	; 59
    17f2:	3a ea       	ldi	r19, 0xAA	; 170
    17f4:	48 eb       	ldi	r20, 0xB8	; 184
    17f6:	5f e7       	ldi	r21, 0x7F	; 127
    17f8:	0e 94 41 0b 	call	0x1682	; 0x1682 <__mulsf3_pse>
    17fc:	0f 92       	push	r0
    17fe:	0f 92       	push	r0
    1800:	0f 92       	push	r0
    1802:	4d b7       	in	r20, 0x3d	; 61
    1804:	5e b7       	in	r21, 0x3e	; 62
    1806:	0f 92       	push	r0
    1808:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <modf>
    180c:	e2 e6       	ldi	r30, 0x62	; 98
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	0e 94 22 0c 	call	0x1844	; 0x1844 <__fp_powser>
    1814:	4f 91       	pop	r20
    1816:	5f 91       	pop	r21
    1818:	ef 91       	pop	r30
    181a:	ff 91       	pop	r31
    181c:	e5 95       	asr	r30
    181e:	ee 1f       	adc	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	49 f0       	breq	.+18     	; 0x1836 <exp+0x56>
    1824:	fe 57       	subi	r31, 0x7E	; 126
    1826:	e0 68       	ori	r30, 0x80	; 128
    1828:	44 27       	eor	r20, r20
    182a:	ee 0f       	add	r30, r30
    182c:	44 1f       	adc	r20, r20
    182e:	fa 95       	dec	r31
    1830:	e1 f7       	brne	.-8      	; 0x182a <exp+0x4a>
    1832:	41 95       	neg	r20
    1834:	55 0b       	sbc	r21, r21
    1836:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ldexp>
    183a:	0f 90       	pop	r0
    183c:	07 fe       	sbrs	r0, 7
    183e:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <inverse>
    1842:	08 95       	ret

00001844 <__fp_powser>:
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	1f 93       	push	r17
    184a:	0f 93       	push	r16
    184c:	ff 92       	push	r15
    184e:	ef 92       	push	r14
    1850:	df 92       	push	r13
    1852:	7b 01       	movw	r14, r22
    1854:	8c 01       	movw	r16, r24
    1856:	68 94       	set
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <__fp_powser+0x22>
    185a:	da 2e       	mov	r13, r26
    185c:	ef 01       	movw	r28, r30
    185e:	0e 94 3e 0b 	call	0x167c	; 0x167c <__mulsf3x>
    1862:	fe 01       	movw	r30, r28
    1864:	e8 94       	clt
    1866:	a5 91       	lpm	r26, Z+
    1868:	25 91       	lpm	r18, Z+
    186a:	35 91       	lpm	r19, Z+
    186c:	45 91       	lpm	r20, Z+
    186e:	55 91       	lpm	r21, Z+
    1870:	a6 f3       	brts	.-24     	; 0x185a <__fp_powser+0x16>
    1872:	ef 01       	movw	r28, r30
    1874:	0e 94 77 09 	call	0x12ee	; 0x12ee <__addsf3x>
    1878:	fe 01       	movw	r30, r28
    187a:	97 01       	movw	r18, r14
    187c:	a8 01       	movw	r20, r16
    187e:	da 94       	dec	r13
    1880:	69 f7       	brne	.-38     	; 0x185c <__fp_powser+0x18>
    1882:	df 90       	pop	r13
    1884:	ef 90       	pop	r14
    1886:	ff 90       	pop	r15
    1888:	0f 91       	pop	r16
    188a:	1f 91       	pop	r17
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <inverse>:
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e8       	ldi	r24, 0x80	; 128
    189c:	9f e3       	ldi	r25, 0x3F	; 63
    189e:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__divsf3>
    18a2:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>
    18a6:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_mpack>

000018aa <ldexp>:
    18aa:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_splitA>
    18ae:	d8 f3       	brcs	.-10     	; 0x18a6 <inverse+0x14>
    18b0:	99 23       	and	r25, r25
    18b2:	c9 f3       	breq	.-14     	; 0x18a6 <inverse+0x14>
    18b4:	94 0f       	add	r25, r20
    18b6:	51 1d       	adc	r21, r1
    18b8:	a3 f3       	brvs	.-24     	; 0x18a2 <inverse+0x10>
    18ba:	91 50       	subi	r25, 0x01	; 1
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	94 f0       	brlt	.+36     	; 0x18e4 <ldexp+0x3a>
    18c0:	59 f0       	breq	.+22     	; 0x18d8 <ldexp+0x2e>
    18c2:	88 23       	and	r24, r24
    18c4:	32 f0       	brmi	.+12     	; 0x18d2 <ldexp+0x28>
    18c6:	66 0f       	add	r22, r22
    18c8:	77 1f       	adc	r23, r23
    18ca:	88 1f       	adc	r24, r24
    18cc:	91 50       	subi	r25, 0x01	; 1
    18ce:	50 40       	sbci	r21, 0x00	; 0
    18d0:	c1 f7       	brne	.-16     	; 0x18c2 <ldexp+0x18>
    18d2:	9e 3f       	cpi	r25, 0xFE	; 254
    18d4:	51 05       	cpc	r21, r1
    18d6:	2c f7       	brge	.-54     	; 0x18a2 <inverse+0x10>
    18d8:	88 0f       	add	r24, r24
    18da:	91 1d       	adc	r25, r1
    18dc:	96 95       	lsr	r25
    18de:	87 95       	ror	r24
    18e0:	97 f9       	bld	r25, 7
    18e2:	08 95       	ret
    18e4:	5f 3f       	cpi	r21, 0xFF	; 255
    18e6:	ac f0       	brlt	.+42     	; 0x1912 <ldexp+0x68>
    18e8:	98 3e       	cpi	r25, 0xE8	; 232
    18ea:	9c f0       	brlt	.+38     	; 0x1912 <ldexp+0x68>
    18ec:	bb 27       	eor	r27, r27
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	08 f4       	brcc	.+2      	; 0x18fa <ldexp+0x50>
    18f8:	b1 60       	ori	r27, 0x01	; 1
    18fa:	93 95       	inc	r25
    18fc:	c1 f7       	brne	.-16     	; 0x18ee <ldexp+0x44>
    18fe:	bb 0f       	add	r27, r27
    1900:	58 f7       	brcc	.-42     	; 0x18d8 <ldexp+0x2e>
    1902:	11 f4       	brne	.+4      	; 0x1908 <ldexp+0x5e>
    1904:	60 ff       	sbrs	r22, 0
    1906:	e8 cf       	rjmp	.-48     	; 0x18d8 <ldexp+0x2e>
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	e3 cf       	rjmp	.-58     	; 0x18d8 <ldexp+0x2e>
    1912:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_szero>
    1916:	16 f0       	brts	.+4      	; 0x191c <ldexp+0x72>
    1918:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_mpack>
    191c:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_nan>
    1920:	68 94       	set
    1922:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_inf>

00001926 <log>:
    1926:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_splitA>
    192a:	a8 f3       	brcs	.-22     	; 0x1916 <ldexp+0x6c>
    192c:	99 23       	and	r25, r25
    192e:	c1 f3       	breq	.-16     	; 0x1920 <ldexp+0x76>
    1930:	ae f3       	brts	.-22     	; 0x191c <ldexp+0x72>
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	1f 93       	push	r17
    1938:	0f 93       	push	r16
    193a:	ff 92       	push	r15
    193c:	c9 2f       	mov	r28, r25
    193e:	dd 27       	eor	r29, r29
    1940:	88 23       	and	r24, r24
    1942:	2a f0       	brmi	.+10     	; 0x194e <log+0x28>
    1944:	21 97       	sbiw	r28, 0x01	; 1
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	da f7       	brpl	.-10     	; 0x1944 <log+0x1e>
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f eb       	ldi	r21, 0xBF	; 191
    1956:	9f e3       	ldi	r25, 0x3F	; 63
    1958:	88 39       	cpi	r24, 0x98	; 152
    195a:	20 f0       	brcs	.+8      	; 0x1964 <log+0x3e>
    195c:	80 3e       	cpi	r24, 0xE0	; 224
    195e:	38 f0       	brcs	.+14     	; 0x196e <log+0x48>
    1960:	21 96       	adiw	r28, 0x01	; 1
    1962:	8f 77       	andi	r24, 0x7F	; 127
    1964:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__addsf3>
    1968:	ea e8       	ldi	r30, 0x8A	; 138
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <log+0x50>
    196e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__addsf3>
    1972:	e7 eb       	ldi	r30, 0xB7	; 183
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	0e 94 22 0c 	call	0x1844	; 0x1844 <__fp_powser>
    197a:	8b 01       	movw	r16, r22
    197c:	be 01       	movw	r22, r28
    197e:	ec 01       	movw	r28, r24
    1980:	fb 2e       	mov	r15, r27
    1982:	6f 57       	subi	r22, 0x7F	; 127
    1984:	71 09       	sbc	r23, r1
    1986:	75 95       	asr	r23
    1988:	77 1f       	adc	r23, r23
    198a:	88 0b       	sbc	r24, r24
    198c:	99 0b       	sbc	r25, r25
    198e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__floatsisf>
    1992:	28 e1       	ldi	r18, 0x18	; 24
    1994:	32 e7       	ldi	r19, 0x72	; 114
    1996:	41 e3       	ldi	r20, 0x31	; 49
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 3e 0b 	call	0x167c	; 0x167c <__mulsf3x>
    199e:	af 2d       	mov	r26, r15
    19a0:	98 01       	movw	r18, r16
    19a2:	ae 01       	movw	r20, r28
    19a4:	ff 90       	pop	r15
    19a6:	0f 91       	pop	r16
    19a8:	1f 91       	pop	r17
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	0e 94 77 09 	call	0x12ee	; 0x12ee <__addsf3x>
    19b2:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_round>

000019b6 <modf>:
    19b6:	fa 01       	movw	r30, r20
    19b8:	dc 01       	movw	r26, r24
    19ba:	aa 0f       	add	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	bf 57       	subi	r27, 0x7F	; 127
    19c4:	28 f4       	brcc	.+10     	; 0x19d0 <modf+0x1a>
    19c6:	22 27       	eor	r18, r18
    19c8:	33 27       	eor	r19, r19
    19ca:	44 27       	eor	r20, r20
    19cc:	50 78       	andi	r21, 0x80	; 128
    19ce:	20 c0       	rjmp	.+64     	; 0x1a10 <modf+0x5a>
    19d0:	b7 51       	subi	r27, 0x17	; 23
    19d2:	90 f4       	brcc	.+36     	; 0x19f8 <modf+0x42>
    19d4:	ab 2f       	mov	r26, r27
    19d6:	00 24       	eor	r0, r0
    19d8:	46 95       	lsr	r20
    19da:	37 95       	ror	r19
    19dc:	27 95       	ror	r18
    19de:	01 1c       	adc	r0, r1
    19e0:	a3 95       	inc	r26
    19e2:	d2 f3       	brmi	.-12     	; 0x19d8 <modf+0x22>
    19e4:	00 20       	and	r0, r0
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <modf+0x4e>
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	44 1f       	adc	r20, r20
    19ee:	b3 95       	inc	r27
    19f0:	da f3       	brmi	.-10     	; 0x19e8 <modf+0x32>
    19f2:	0e d0       	rcall	.+28     	; 0x1a10 <modf+0x5a>
    19f4:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__subsf3>
    19f8:	61 30       	cpi	r22, 0x01	; 1
    19fa:	71 05       	cpc	r23, r1
    19fc:	a0 e8       	ldi	r26, 0x80	; 128
    19fe:	8a 07       	cpc	r24, r26
    1a00:	b9 46       	sbci	r27, 0x69	; 105
    1a02:	30 f4       	brcc	.+12     	; 0x1a10 <modf+0x5a>
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	66 27       	eor	r22, r22
    1a0a:	77 27       	eor	r23, r23
    1a0c:	88 27       	eor	r24, r24
    1a0e:	90 78       	andi	r25, 0x80	; 128
    1a10:	30 96       	adiw	r30, 0x00	; 0
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <modf+0x66>
    1a14:	20 83       	st	Z, r18
    1a16:	31 83       	std	Z+1, r19	; 0x01
    1a18:	42 83       	std	Z+2, r20	; 0x02
    1a1a:	53 83       	std	Z+3, r21	; 0x03
    1a1c:	08 95       	ret

00001a1e <__fp_mpack>:
    1a1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <__fp_mpack_finite+0xc>

00001a22 <__fp_mpack_finite>:
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	20 f4       	brcc	.+8      	; 0x1a2e <__fp_mpack_finite+0xc>
    1a26:	87 95       	ror	r24
    1a28:	77 95       	ror	r23
    1a2a:	67 95       	ror	r22
    1a2c:	b7 95       	ror	r27
    1a2e:	88 0f       	add	r24, r24
    1a30:	91 1d       	adc	r25, r1
    1a32:	96 95       	lsr	r25
    1a34:	87 95       	ror	r24
    1a36:	97 f9       	bld	r25, 7
    1a38:	08 95       	ret

00001a3a <__divmodsi4>:
    1a3a:	05 2e       	mov	r0, r21
    1a3c:	97 fb       	bst	r25, 7
    1a3e:	1e f4       	brtc	.+6      	; 0x1a46 <__divmodsi4+0xc>
    1a40:	00 94       	com	r0
    1a42:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__negsi2>
    1a46:	57 fd       	sbrc	r21, 7
    1a48:	07 d0       	rcall	.+14     	; 0x1a58 <__divmodsi4_neg2>
    1a4a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__udivmodsi4>
    1a4e:	07 fc       	sbrc	r0, 7
    1a50:	03 d0       	rcall	.+6      	; 0x1a58 <__divmodsi4_neg2>
    1a52:	4e f4       	brtc	.+18     	; 0x1a66 <__divmodsi4_exit>
    1a54:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__negsi2>

00001a58 <__divmodsi4_neg2>:
    1a58:	50 95       	com	r21
    1a5a:	40 95       	com	r20
    1a5c:	30 95       	com	r19
    1a5e:	21 95       	neg	r18
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	4f 4f       	sbci	r20, 0xFF	; 255
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255

00001a66 <__divmodsi4_exit>:
    1a66:	08 95       	ret

00001a68 <__negsi2>:
    1a68:	90 95       	com	r25
    1a6a:	80 95       	com	r24
    1a6c:	70 95       	com	r23
    1a6e:	61 95       	neg	r22
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	8f 4f       	sbci	r24, 0xFF	; 255
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	08 95       	ret

00001a78 <__tablejump2__>:
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	05 90       	lpm	r0, Z+
    1a7e:	f4 91       	lpm	r31, Z
    1a80:	e0 2d       	mov	r30, r0
    1a82:	09 94       	ijmp

00001a84 <__umulhisi3>:
    1a84:	a2 9f       	mul	r26, r18
    1a86:	b0 01       	movw	r22, r0
    1a88:	b3 9f       	mul	r27, r19
    1a8a:	c0 01       	movw	r24, r0
    1a8c:	a3 9f       	mul	r26, r19
    1a8e:	70 0d       	add	r23, r0
    1a90:	81 1d       	adc	r24, r1
    1a92:	11 24       	eor	r1, r1
    1a94:	91 1d       	adc	r25, r1
    1a96:	b2 9f       	mul	r27, r18
    1a98:	70 0d       	add	r23, r0
    1a9a:	81 1d       	adc	r24, r1
    1a9c:	11 24       	eor	r1, r1
    1a9e:	91 1d       	adc	r25, r1
    1aa0:	08 95       	ret

00001aa2 <__umulsidi3>:
    1aa2:	e8 94       	clt

00001aa4 <__umulsidi3_helper>:
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	db 01       	movw	r26, r22
    1aac:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__umulhisi3>
    1ab0:	7f 93       	push	r23
    1ab2:	6f 93       	push	r22
    1ab4:	e9 01       	movw	r28, r18
    1ab6:	9a 01       	movw	r18, r20
    1ab8:	ac 01       	movw	r20, r24
    1aba:	bf 93       	push	r27
    1abc:	af 93       	push	r26
    1abe:	3f 93       	push	r19
    1ac0:	2f 93       	push	r18
    1ac2:	df 01       	movw	r26, r30
    1ac4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__umulhisi3>
    1ac8:	26 f4       	brtc	.+8      	; 0x1ad2 <__umulsidi3_helper+0x2e>
    1aca:	6c 1b       	sub	r22, r28
    1acc:	7d 0b       	sbc	r23, r29
    1ace:	82 0b       	sbc	r24, r18
    1ad0:	93 0b       	sbc	r25, r19
    1ad2:	9e 01       	movw	r18, r28
    1ad4:	eb 01       	movw	r28, r22
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__muldi3_6>
    1adc:	af 91       	pop	r26
    1ade:	bf 91       	pop	r27
    1ae0:	2f 91       	pop	r18
    1ae2:	3f 91       	pop	r19
    1ae4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__muldi3_6>
    1ae8:	be 01       	movw	r22, r28
    1aea:	cf 01       	movw	r24, r30
    1aec:	f9 01       	movw	r30, r18
    1aee:	2f 91       	pop	r18
    1af0:	3f 91       	pop	r19
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <__ashrdi3>:
    1af8:	97 fb       	bst	r25, 7
    1afa:	10 f8       	bld	r1, 0

00001afc <__lshrdi3>:
    1afc:	16 94       	lsr	r1
    1afe:	00 08       	sbc	r0, r0
    1b00:	0f 93       	push	r16
    1b02:	08 30       	cpi	r16, 0x08	; 8
    1b04:	98 f0       	brcs	.+38     	; 0x1b2c <__lshrdi3+0x30>
    1b06:	08 50       	subi	r16, 0x08	; 8
    1b08:	23 2f       	mov	r18, r19
    1b0a:	34 2f       	mov	r19, r20
    1b0c:	45 2f       	mov	r20, r21
    1b0e:	56 2f       	mov	r21, r22
    1b10:	67 2f       	mov	r22, r23
    1b12:	78 2f       	mov	r23, r24
    1b14:	89 2f       	mov	r24, r25
    1b16:	90 2d       	mov	r25, r0
    1b18:	f4 cf       	rjmp	.-24     	; 0x1b02 <__lshrdi3+0x6>
    1b1a:	05 94       	asr	r0
    1b1c:	97 95       	ror	r25
    1b1e:	87 95       	ror	r24
    1b20:	77 95       	ror	r23
    1b22:	67 95       	ror	r22
    1b24:	57 95       	ror	r21
    1b26:	47 95       	ror	r20
    1b28:	37 95       	ror	r19
    1b2a:	27 95       	ror	r18
    1b2c:	0a 95       	dec	r16
    1b2e:	aa f7       	brpl	.-22     	; 0x1b1a <__lshrdi3+0x1e>
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <__udivmodsi4>:
    1b34:	a1 e2       	ldi	r26, 0x21	; 33
    1b36:	1a 2e       	mov	r1, r26
    1b38:	aa 1b       	sub	r26, r26
    1b3a:	bb 1b       	sub	r27, r27
    1b3c:	fd 01       	movw	r30, r26
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <__udivmodsi4_ep>

00001b40 <__udivmodsi4_loop>:
    1b40:	aa 1f       	adc	r26, r26
    1b42:	bb 1f       	adc	r27, r27
    1b44:	ee 1f       	adc	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	a2 17       	cp	r26, r18
    1b4a:	b3 07       	cpc	r27, r19
    1b4c:	e4 07       	cpc	r30, r20
    1b4e:	f5 07       	cpc	r31, r21
    1b50:	20 f0       	brcs	.+8      	; 0x1b5a <__udivmodsi4_ep>
    1b52:	a2 1b       	sub	r26, r18
    1b54:	b3 0b       	sbc	r27, r19
    1b56:	e4 0b       	sbc	r30, r20
    1b58:	f5 0b       	sbc	r31, r21

00001b5a <__udivmodsi4_ep>:
    1b5a:	66 1f       	adc	r22, r22
    1b5c:	77 1f       	adc	r23, r23
    1b5e:	88 1f       	adc	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	1a 94       	dec	r1
    1b64:	69 f7       	brne	.-38     	; 0x1b40 <__udivmodsi4_loop>
    1b66:	60 95       	com	r22
    1b68:	70 95       	com	r23
    1b6a:	80 95       	com	r24
    1b6c:	90 95       	com	r25
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	bd 01       	movw	r22, r26
    1b74:	cf 01       	movw	r24, r30
    1b76:	08 95       	ret

00001b78 <__muldi3_6>:
    1b78:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__umulhisi3>
    1b7c:	46 0f       	add	r20, r22
    1b7e:	57 1f       	adc	r21, r23
    1b80:	c8 1f       	adc	r28, r24
    1b82:	d9 1f       	adc	r29, r25
    1b84:	08 f4       	brcc	.+2      	; 0x1b88 <__muldi3_6+0x10>
    1b86:	31 96       	adiw	r30, 0x01	; 1
    1b88:	08 95       	ret

00001b8a <_exit>:
    1b8a:	f8 94       	cli

00001b8c <__stop_program>:
    1b8c:	ff cf       	rjmp	.-2      	; 0x1b8c <__stop_program>
